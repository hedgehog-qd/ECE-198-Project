
StepperMotor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002458  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080025ec  080025ec  000125ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002604  08002604  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002604  08002604  00012604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800260c  0800260c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800260c  0800260c  0001260c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002610  08002610  00012610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002620  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002620  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c021  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c73  00000000  00000000  0002c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  0002dd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000092f  00000000  00000000  0002e8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015a4b  00000000  00000000  0002f207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebee  00000000  00000000  00044c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000893f2  00000000  00000000  00053840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000030d4  00000000  00000000  000dcc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000dfd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080025d4 	.word	0x080025d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080025d4 	.word	0x080025d4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	4b2e      	ldr	r3, [pc, #184]	; (80005a4 <MX_GPIO_Init+0xd4>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a2d      	ldr	r2, [pc, #180]	; (80005a4 <MX_GPIO_Init+0xd4>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <MX_GPIO_Init+0xd4>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	4b27      	ldr	r3, [pc, #156]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a26      	ldr	r2, [pc, #152]	; (80005a4 <MX_GPIO_Init+0xd4>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b24      	ldr	r3, [pc, #144]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a1f      	ldr	r2, [pc, #124]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a18      	ldr	r2, [pc, #96]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <MX_GPIO_Init+0xd4>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800055c:	4812      	ldr	r0, [pc, #72]	; (80005a8 <MX_GPIO_Init+0xd8>)
 800055e:	f000 fdfb 	bl	8001158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000568:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800056c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <MX_GPIO_Init+0xdc>)
 800057a:	f000 fc69 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800057e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2300      	movs	r3, #0
 800058e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4619      	mov	r1, r3
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_GPIO_Init+0xd8>)
 8000598:	f000 fc5a 	bl	8000e50 <HAL_GPIO_Init>

}
 800059c:	bf00      	nop
 800059e:	3728      	adds	r7, #40	; 0x28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020000 	.word	0x40020000
 80005ac:	40020800 	.word	0x40020800

080005b0 <stepper_half_drive>:
{
	delay(60000000/stepsperrev/rpm);
}

void stepper_half_drive (int step)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	switch (step){
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b07      	cmp	r3, #7
 80005bc:	f200 80c4 	bhi.w	8000748 <stepper_half_drive+0x198>
 80005c0:	a201      	add	r2, pc, #4	; (adr r2, 80005c8 <stepper_half_drive+0x18>)
 80005c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c6:	bf00      	nop
 80005c8:	080005e9 	.word	0x080005e9
 80005cc:	08000615 	.word	0x08000615
 80005d0:	08000641 	.word	0x08000641
 80005d4:	0800066d 	.word	0x0800066d
 80005d8:	08000699 	.word	0x08000699
 80005dc:	080006c5 	.word	0x080006c5
 80005e0:	080006f1 	.word	0x080006f1
 80005e4:	0800071d 	.word	0x0800071d
		case 0:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // IN1
 80005e8:	2201      	movs	r2, #1
 80005ea:	2120      	movs	r1, #32
 80005ec:	4858      	ldr	r0, [pc, #352]	; (8000750 <stepper_half_drive+0x1a0>)
 80005ee:	f000 fdb3 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN2
 80005f2:	2200      	movs	r2, #0
 80005f4:	2140      	movs	r1, #64	; 0x40
 80005f6:	4856      	ldr	r0, [pc, #344]	; (8000750 <stepper_half_drive+0x1a0>)
 80005f8:	f000 fdae 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN3
 80005fc:	2200      	movs	r2, #0
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	4853      	ldr	r0, [pc, #332]	; (8000750 <stepper_half_drive+0x1a0>)
 8000602:	f000 fda9 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);   // IN4
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060c:	4850      	ldr	r0, [pc, #320]	; (8000750 <stepper_half_drive+0x1a0>)
 800060e:	f000 fda3 	bl	8001158 <HAL_GPIO_WritePin>
			  break;
 8000612:	e099      	b.n	8000748 <stepper_half_drive+0x198>

		case 1:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // IN1
 8000614:	2201      	movs	r2, #1
 8000616:	2120      	movs	r1, #32
 8000618:	484d      	ldr	r0, [pc, #308]	; (8000750 <stepper_half_drive+0x1a0>)
 800061a:	f000 fd9d 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // IN2
 800061e:	2201      	movs	r2, #1
 8000620:	2140      	movs	r1, #64	; 0x40
 8000622:	484b      	ldr	r0, [pc, #300]	; (8000750 <stepper_half_drive+0x1a0>)
 8000624:	f000 fd98 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN3
 8000628:	2200      	movs	r2, #0
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	4848      	ldr	r0, [pc, #288]	; (8000750 <stepper_half_drive+0x1a0>)
 800062e:	f000 fd93 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);   // IN4
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000638:	4845      	ldr	r0, [pc, #276]	; (8000750 <stepper_half_drive+0x1a0>)
 800063a:	f000 fd8d 	bl	8001158 <HAL_GPIO_WritePin>
			  break;
 800063e:	e083      	b.n	8000748 <stepper_half_drive+0x198>

		case 2:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN1
 8000640:	2200      	movs	r2, #0
 8000642:	2120      	movs	r1, #32
 8000644:	4842      	ldr	r0, [pc, #264]	; (8000750 <stepper_half_drive+0x1a0>)
 8000646:	f000 fd87 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // IN2
 800064a:	2201      	movs	r2, #1
 800064c:	2140      	movs	r1, #64	; 0x40
 800064e:	4840      	ldr	r0, [pc, #256]	; (8000750 <stepper_half_drive+0x1a0>)
 8000650:	f000 fd82 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN3
 8000654:	2200      	movs	r2, #0
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	483d      	ldr	r0, [pc, #244]	; (8000750 <stepper_half_drive+0x1a0>)
 800065a:	f000 fd7d 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);   // IN4
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000664:	483a      	ldr	r0, [pc, #232]	; (8000750 <stepper_half_drive+0x1a0>)
 8000666:	f000 fd77 	bl	8001158 <HAL_GPIO_WritePin>
			  break;
 800066a:	e06d      	b.n	8000748 <stepper_half_drive+0x198>

		case 3:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN1
 800066c:	2200      	movs	r2, #0
 800066e:	2120      	movs	r1, #32
 8000670:	4837      	ldr	r0, [pc, #220]	; (8000750 <stepper_half_drive+0x1a0>)
 8000672:	f000 fd71 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);   // IN2
 8000676:	2201      	movs	r2, #1
 8000678:	2140      	movs	r1, #64	; 0x40
 800067a:	4835      	ldr	r0, [pc, #212]	; (8000750 <stepper_half_drive+0x1a0>)
 800067c:	f000 fd6c 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN3
 8000680:	2201      	movs	r2, #1
 8000682:	2180      	movs	r1, #128	; 0x80
 8000684:	4832      	ldr	r0, [pc, #200]	; (8000750 <stepper_half_drive+0x1a0>)
 8000686:	f000 fd67 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);   // IN4
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000690:	482f      	ldr	r0, [pc, #188]	; (8000750 <stepper_half_drive+0x1a0>)
 8000692:	f000 fd61 	bl	8001158 <HAL_GPIO_WritePin>
			  break;
 8000696:	e057      	b.n	8000748 <stepper_half_drive+0x198>

		case 4:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN1
 8000698:	2200      	movs	r2, #0
 800069a:	2120      	movs	r1, #32
 800069c:	482c      	ldr	r0, [pc, #176]	; (8000750 <stepper_half_drive+0x1a0>)
 800069e:	f000 fd5b 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN2
 80006a2:	2200      	movs	r2, #0
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	482a      	ldr	r0, [pc, #168]	; (8000750 <stepper_half_drive+0x1a0>)
 80006a8:	f000 fd56 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN3
 80006ac:	2201      	movs	r2, #1
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	4827      	ldr	r0, [pc, #156]	; (8000750 <stepper_half_drive+0x1a0>)
 80006b2:	f000 fd51 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);   // IN4
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006bc:	4824      	ldr	r0, [pc, #144]	; (8000750 <stepper_half_drive+0x1a0>)
 80006be:	f000 fd4b 	bl	8001158 <HAL_GPIO_WritePin>
			  break;
 80006c2:	e041      	b.n	8000748 <stepper_half_drive+0x198>

		case 5:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN1
 80006c4:	2200      	movs	r2, #0
 80006c6:	2120      	movs	r1, #32
 80006c8:	4821      	ldr	r0, [pc, #132]	; (8000750 <stepper_half_drive+0x1a0>)
 80006ca:	f000 fd45 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN2
 80006ce:	2200      	movs	r2, #0
 80006d0:	2140      	movs	r1, #64	; 0x40
 80006d2:	481f      	ldr	r0, [pc, #124]	; (8000750 <stepper_half_drive+0x1a0>)
 80006d4:	f000 fd40 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);   // IN3
 80006d8:	2201      	movs	r2, #1
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	481c      	ldr	r0, [pc, #112]	; (8000750 <stepper_half_drive+0x1a0>)
 80006de:	f000 fd3b 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);   // IN4
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e8:	4819      	ldr	r0, [pc, #100]	; (8000750 <stepper_half_drive+0x1a0>)
 80006ea:	f000 fd35 	bl	8001158 <HAL_GPIO_WritePin>
			  break;
 80006ee:	e02b      	b.n	8000748 <stepper_half_drive+0x198>

		case 6:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);   // IN1
 80006f0:	2200      	movs	r2, #0
 80006f2:	2120      	movs	r1, #32
 80006f4:	4816      	ldr	r0, [pc, #88]	; (8000750 <stepper_half_drive+0x1a0>)
 80006f6:	f000 fd2f 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN2
 80006fa:	2200      	movs	r2, #0
 80006fc:	2140      	movs	r1, #64	; 0x40
 80006fe:	4814      	ldr	r0, [pc, #80]	; (8000750 <stepper_half_drive+0x1a0>)
 8000700:	f000 fd2a 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN3
 8000704:	2200      	movs	r2, #0
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	4811      	ldr	r0, [pc, #68]	; (8000750 <stepper_half_drive+0x1a0>)
 800070a:	f000 fd25 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);   // IN4
 800070e:	2201      	movs	r2, #1
 8000710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000714:	480e      	ldr	r0, [pc, #56]	; (8000750 <stepper_half_drive+0x1a0>)
 8000716:	f000 fd1f 	bl	8001158 <HAL_GPIO_WritePin>
			  break;
 800071a:	e015      	b.n	8000748 <stepper_half_drive+0x198>

		case 7:
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);   // IN1
 800071c:	2201      	movs	r2, #1
 800071e:	2120      	movs	r1, #32
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <stepper_half_drive+0x1a0>)
 8000722:	f000 fd19 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);   // IN2
 8000726:	2200      	movs	r2, #0
 8000728:	2140      	movs	r1, #64	; 0x40
 800072a:	4809      	ldr	r0, [pc, #36]	; (8000750 <stepper_half_drive+0x1a0>)
 800072c:	f000 fd14 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);   // IN3
 8000730:	2200      	movs	r2, #0
 8000732:	2180      	movs	r1, #128	; 0x80
 8000734:	4806      	ldr	r0, [pc, #24]	; (8000750 <stepper_half_drive+0x1a0>)
 8000736:	f000 fd0f 	bl	8001158 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);   // IN4
 800073a:	2201      	movs	r2, #1
 800073c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000740:	4803      	ldr	r0, [pc, #12]	; (8000750 <stepper_half_drive+0x1a0>)
 8000742:	f000 fd09 	bl	8001158 <HAL_GPIO_WritePin>
			  break;
 8000746:	bf00      	nop

		}
}
 8000748:	bf00      	nop
 800074a:	3708      	adds	r7, #8
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40020000 	.word	0x40020000

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 f9fd 	bl	8000b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f817 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f7ff feb5 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000766:	f000 f95b 	bl	8000a20 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800076a:	f000 f8e7 	bl	800093c <MX_TIM1_Init>
	  			  stepper_half_drive(i);
	  			  stepper_set_rpm(13);
	  		  }
	  	  }
	  	  */
	  for(int i = 0;i<8;i++){
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	e008      	b.n	8000786 <main+0x32>
		  stepper_half_drive(i);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff1b 	bl	80005b0 <stepper_half_drive>
		  HAL_Delay(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f000 fa5e 	bl	8000c3c <HAL_Delay>
	  for(int i = 0;i<8;i++){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3301      	adds	r3, #1
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b07      	cmp	r3, #7
 800078a:	ddf3      	ble.n	8000774 <main+0x20>
 800078c:	e7ef      	b.n	800076e <main+0x1a>
	...

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	; 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	2230      	movs	r2, #48	; 0x30
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 feec 	bl	800257c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	4b29      	ldr	r3, [pc, #164]	; (8000860 <SystemClock_Config+0xd0>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	4a28      	ldr	r2, [pc, #160]	; (8000860 <SystemClock_Config+0xd0>)
 80007be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c2:	6413      	str	r3, [r2, #64]	; 0x40
 80007c4:	4b26      	ldr	r3, [pc, #152]	; (8000860 <SystemClock_Config+0xd0>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	4b23      	ldr	r3, [pc, #140]	; (8000864 <SystemClock_Config+0xd4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007dc:	4a21      	ldr	r2, [pc, #132]	; (8000864 <SystemClock_Config+0xd4>)
 80007de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007e2:	6013      	str	r3, [r2, #0]
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <SystemClock_Config+0xd4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f0:	2302      	movs	r3, #2
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	2301      	movs	r3, #1
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f8:	2310      	movs	r3, #16
 80007fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000800:	2300      	movs	r3, #0
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000804:	2310      	movs	r3, #16
 8000806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000808:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800080c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800080e:	2304      	movs	r3, #4
 8000810:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000812:	2307      	movs	r3, #7
 8000814:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 0320 	add.w	r3, r7, #32
 800081a:	4618      	mov	r0, r3
 800081c:	f000 fcb6 	bl	800118c <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000826:	f000 f81f 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	2302      	movs	r3, #2
 8000830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2102      	movs	r1, #2
 8000846:	4618      	mov	r0, r3
 8000848:	f000 ff18 	bl	800167c <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000852:	f000 f809 	bl	8000868 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	; 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	e7fe      	b.n	8000870 <Error_Handler+0x8>
	...

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000882:	4a0f      	ldr	r2, [pc, #60]	; (80008c0 <HAL_MspInit+0x4c>)
 8000884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000888:	6453      	str	r3, [r2, #68]	; 0x44
 800088a:	4b0d      	ldr	r3, [pc, #52]	; (80008c0 <HAL_MspInit+0x4c>)
 800088c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <HAL_MspInit+0x4c>)
 80008a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ae:	603b      	str	r3, [r7, #0]
 80008b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008b2:	2007      	movs	r0, #7
 80008b4:	f000 fa98 	bl	8000de8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <NMI_Handler+0x4>

080008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <MemManage_Handler+0x4>

080008d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	e7fe      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e2:	b480      	push	{r7}
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000910:	f000 f974 	bl	8000bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}

08000918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <SystemInit+0x20>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <SystemInit+0x20>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000950:	463b      	mov	r3, r7
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000958:	4b1e      	ldr	r3, [pc, #120]	; (80009d4 <MX_TIM1_Init+0x98>)
 800095a:	4a1f      	ldr	r2, [pc, #124]	; (80009d8 <MX_TIM1_Init+0x9c>)
 800095c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 800095e:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000960:	2248      	movs	r2, #72	; 0x48
 8000962:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_TIM1_Init+0x98>)
 800096c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000970:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_TIM1_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000984:	4813      	ldr	r0, [pc, #76]	; (80009d4 <MX_TIM1_Init+0x98>)
 8000986:	f001 f899 	bl	8001abc <HAL_TIM_Base_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000990:	f7ff ff6a 	bl	8000868 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000998:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	4619      	mov	r1, r3
 80009a0:	480c      	ldr	r0, [pc, #48]	; (80009d4 <MX_TIM1_Init+0x98>)
 80009a2:	f001 f8da 	bl	8001b5a <HAL_TIM_ConfigClockSource>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009ac:	f7ff ff5c 	bl	8000868 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b8:	463b      	mov	r3, r7
 80009ba:	4619      	mov	r1, r3
 80009bc:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_TIM1_Init+0x98>)
 80009be:	f001 faad 	bl	8001f1c <HAL_TIMEx_MasterConfigSynchronization>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009c8:	f7ff ff4e 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20000028 	.word	0x20000028
 80009d8:	40010000 	.word	0x40010000

080009dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <HAL_TIM_Base_MspInit+0x3c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10d      	bne.n	8000a0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_TIM_Base_MspInit+0x40>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <HAL_TIM_Base_MspInit+0x40>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <HAL_TIM_Base_MspInit+0x40>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40010000 	.word	0x40010000
 8000a1c:	40023800 	.word	0x40023800

08000a20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	; (8000a70 <MX_USART2_UART_Init+0x50>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a58:	f001 face 	bl	8001ff8 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a62:	f7ff ff01 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000070 	.word	0x20000070
 8000a70:	40004400 	.word	0x40004400

08000a74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	; 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a19      	ldr	r2, [pc, #100]	; (8000af8 <HAL_UART_MspInit+0x84>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d12b      	bne.n	8000aee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a10      	ldr	r2, [pc, #64]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_UART_MspInit+0x88>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ace:	230c      	movs	r3, #12
 8000ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ade:	2307      	movs	r3, #7
 8000ae0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <HAL_UART_MspInit+0x8c>)
 8000aea:	f000 f9b1 	bl	8000e50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000aee:	bf00      	nop
 8000af0:	3728      	adds	r7, #40	; 0x28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40004400 	.word	0x40004400
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000

08000b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b0a:	490e      	ldr	r1, [pc, #56]	; (8000b44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b10:	e002      	b.n	8000b18 <LoopCopyDataInit>

08000b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b16:	3304      	adds	r3, #4

08000b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b1c:	d3f9      	bcc.n	8000b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1e:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b20:	4c0b      	ldr	r4, [pc, #44]	; (8000b50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b24:	e001      	b.n	8000b2a <LoopFillZerobss>

08000b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b28:	3204      	adds	r2, #4

08000b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b2c:	d3fb      	bcc.n	8000b26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b2e:	f7ff fef3 	bl	8000918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b32:	f001 fd2b 	bl	800258c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b36:	f7ff fe0d 	bl	8000754 <main>
  bx  lr    
 8000b3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b44:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b48:	08002614 	.word	0x08002614
  ldr r2, =_sbss
 8000b4c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b50:	200000b8 	.word	0x200000b8

08000b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b54:	e7fe      	b.n	8000b54 <ADC_IRQHandler>
	...

08000b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b5c:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0d      	ldr	r2, [pc, #52]	; (8000b98 <HAL_Init+0x40>)
 8000b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_Init+0x40>)
 8000b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <HAL_Init+0x40>)
 8000b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b80:	2003      	movs	r0, #3
 8000b82:	f000 f931 	bl	8000de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f000 f808 	bl	8000b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b8c:	f7ff fe72 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023c00 	.word	0x40023c00

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_InitTick+0x54>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_InitTick+0x58>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 f93b 	bl	8000e36 <HAL_SYSTICK_Config>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00e      	b.n	8000be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d80a      	bhi.n	8000be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	6879      	ldr	r1, [r7, #4]
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f000 f911 	bl	8000dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bdc:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <HAL_InitTick+0x5c>)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e000      	b.n	8000be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	20000004 	.word	0x20000004

08000bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_IncTick+0x20>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x24>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_IncTick+0x24>)
 8000c0e:	6013      	str	r3, [r2, #0]
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	200000b4 	.word	0x200000b4

08000c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return uwTick;
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <HAL_GetTick+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	200000b4 	.word	0x200000b4

08000c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff ffee 	bl	8000c24 <HAL_GetTick>
 8000c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c54:	d005      	beq.n	8000c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <HAL_Delay+0x44>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c62:	bf00      	nop
 8000c64:	f7ff ffde 	bl	8000c24 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d8f7      	bhi.n	8000c64 <HAL_Delay+0x28>
  {
  }
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000008 	.word	0x20000008

08000c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd0:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	0a1b      	lsrs	r3, r3, #8
 8000cd6:	f003 0307 	and.w	r3, r3, #7
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db0a      	blt.n	8000d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	490c      	ldr	r1, [pc, #48]	; (8000d34 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d10:	e00a      	b.n	8000d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4908      	ldr	r1, [pc, #32]	; (8000d38 <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	440b      	add	r3, r1
 8000d26:	761a      	strb	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	; 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f1c3 0307 	rsb	r3, r3, #7
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf28      	it	cs
 8000d5a:	2304      	movcs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3304      	adds	r3, #4
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d902      	bls.n	8000d6c <NVIC_EncodePriority+0x30>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b03      	subs	r3, #3
 8000d6a:	e000      	b.n	8000d6e <NVIC_EncodePriority+0x32>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
         );
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	; 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db4:	d301      	bcc.n	8000dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00f      	b.n	8000dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <SysTick_Config+0x40>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f7ff ff8e 	bl	8000ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <SysTick_Config+0x40>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <SysTick_Config+0x40>)
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	e000e010 	.word	0xe000e010

08000de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff47 	bl	8000c84 <__NVIC_SetPriorityGrouping>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
 8000e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e10:	f7ff ff5c 	bl	8000ccc <__NVIC_GetPriorityGrouping>
 8000e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	68b9      	ldr	r1, [r7, #8]
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	f7ff ff8e 	bl	8000d3c <NVIC_EncodePriority>
 8000e20:	4602      	mov	r2, r0
 8000e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff5d 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffb0 	bl	8000da4 <SysTick_Config>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
 8000e6a:	e159      	b.n	8001120 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	f040 8148 	bne.w	800111a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d005      	beq.n	8000ea2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d130      	bne.n	8000f04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	2203      	movs	r2, #3
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed8:	2201      	movs	r2, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	091b      	lsrs	r3, r3, #4
 8000eee:	f003 0201 	and.w	r2, r3, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b03      	cmp	r3, #3
 8000f0e:	d017      	beq.n	8000f40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	43db      	mvns	r3, r3
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	4013      	ands	r3, r2
 8000f26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0303 	and.w	r3, r3, #3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d123      	bne.n	8000f94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	08da      	lsrs	r2, r3, #3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3208      	adds	r2, #8
 8000f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	220f      	movs	r2, #15
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	691a      	ldr	r2, [r3, #16]
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3208      	adds	r2, #8
 8000f8e:	69b9      	ldr	r1, [r7, #24]
 8000f90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0203 	and.w	r2, r3, #3
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f000 80a2 	beq.w	800111a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	4b57      	ldr	r3, [pc, #348]	; (8001138 <HAL_GPIO_Init+0x2e8>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	4a56      	ldr	r2, [pc, #344]	; (8001138 <HAL_GPIO_Init+0x2e8>)
 8000fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe6:	4b54      	ldr	r3, [pc, #336]	; (8001138 <HAL_GPIO_Init+0x2e8>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ff2:	4a52      	ldr	r2, [pc, #328]	; (800113c <HAL_GPIO_Init+0x2ec>)
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	220f      	movs	r2, #15
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a49      	ldr	r2, [pc, #292]	; (8001140 <HAL_GPIO_Init+0x2f0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d019      	beq.n	8001052 <HAL_GPIO_Init+0x202>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a48      	ldr	r2, [pc, #288]	; (8001144 <HAL_GPIO_Init+0x2f4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0x1fe>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a47      	ldr	r2, [pc, #284]	; (8001148 <HAL_GPIO_Init+0x2f8>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d00d      	beq.n	800104a <HAL_GPIO_Init+0x1fa>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a46      	ldr	r2, [pc, #280]	; (800114c <HAL_GPIO_Init+0x2fc>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d007      	beq.n	8001046 <HAL_GPIO_Init+0x1f6>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a45      	ldr	r2, [pc, #276]	; (8001150 <HAL_GPIO_Init+0x300>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d101      	bne.n	8001042 <HAL_GPIO_Init+0x1f2>
 800103e:	2304      	movs	r3, #4
 8001040:	e008      	b.n	8001054 <HAL_GPIO_Init+0x204>
 8001042:	2307      	movs	r3, #7
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x204>
 8001046:	2303      	movs	r3, #3
 8001048:	e004      	b.n	8001054 <HAL_GPIO_Init+0x204>
 800104a:	2302      	movs	r3, #2
 800104c:	e002      	b.n	8001054 <HAL_GPIO_Init+0x204>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_GPIO_Init+0x204>
 8001052:	2300      	movs	r3, #0
 8001054:	69fa      	ldr	r2, [r7, #28]
 8001056:	f002 0203 	and.w	r2, r2, #3
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	4093      	lsls	r3, r2
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001064:	4935      	ldr	r1, [pc, #212]	; (800113c <HAL_GPIO_Init+0x2ec>)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001072:	4b38      	ldr	r3, [pc, #224]	; (8001154 <HAL_GPIO_Init+0x304>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001096:	4a2f      	ldr	r2, [pc, #188]	; (8001154 <HAL_GPIO_Init+0x304>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <HAL_GPIO_Init+0x304>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c0:	4a24      	ldr	r2, [pc, #144]	; (8001154 <HAL_GPIO_Init+0x304>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <HAL_GPIO_Init+0x304>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <HAL_GPIO_Init+0x304>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_GPIO_Init+0x304>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001114:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <HAL_GPIO_Init+0x304>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	f67f aea2 	bls.w	8000e6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40013800 	.word	0x40013800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021000 	.word	0x40021000
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	807b      	strh	r3, [r7, #2]
 8001164:	4613      	mov	r3, r2
 8001166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001168:	787b      	ldrb	r3, [r7, #1]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001174:	e003      	b.n	800117e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	041a      	lsls	r2, r3, #16
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	619a      	str	r2, [r3, #24]
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e267      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d075      	beq.n	8001296 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011aa:	4b88      	ldr	r3, [pc, #544]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d00c      	beq.n	80011d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011b6:	4b85      	ldr	r3, [pc, #532]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d112      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011c2:	4b82      	ldr	r3, [pc, #520]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ce:	d10b      	bne.n	80011e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	4b7e      	ldr	r3, [pc, #504]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d05b      	beq.n	8001294 <HAL_RCC_OscConfig+0x108>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d157      	bne.n	8001294 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e242      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f0:	d106      	bne.n	8001200 <HAL_RCC_OscConfig+0x74>
 80011f2:	4b76      	ldr	r3, [pc, #472]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a75      	ldr	r2, [pc, #468]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e01d      	b.n	800123c <HAL_RCC_OscConfig+0xb0>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0x98>
 800120a:	4b70      	ldr	r3, [pc, #448]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a6f      	ldr	r2, [pc, #444]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b6d      	ldr	r3, [pc, #436]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a6c      	ldr	r2, [pc, #432]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e00b      	b.n	800123c <HAL_RCC_OscConfig+0xb0>
 8001224:	4b69      	ldr	r3, [pc, #420]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a68      	ldr	r2, [pc, #416]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 800122a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b66      	ldr	r3, [pc, #408]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a65      	ldr	r2, [pc, #404]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d013      	beq.n	800126c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001244:	f7ff fcee 	bl	8000c24 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fcea 	bl	8000c24 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e207      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b5b      	ldr	r3, [pc, #364]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0xc0>
 800126a:	e014      	b.n	8001296 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fcda 	bl	8000c24 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fcd6 	bl	8000c24 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e1f3      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	4b51      	ldr	r3, [pc, #324]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0xe8>
 8001292:	e000      	b.n	8001296 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d063      	beq.n	800136a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a2:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00b      	beq.n	80012c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ae:	4b47      	ldr	r3, [pc, #284]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d11c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ba:	4b44      	ldr	r3, [pc, #272]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d116      	bne.n	80012f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	4b41      	ldr	r3, [pc, #260]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_RCC_OscConfig+0x152>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d001      	beq.n	80012de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e1c7      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012de:	4b3b      	ldr	r3, [pc, #236]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4937      	ldr	r1, [pc, #220]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	e03a      	b.n	800136a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d020      	beq.n	800133e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <HAL_RCC_OscConfig+0x244>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001302:	f7ff fc8f 	bl	8000c24 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130a:	f7ff fc8b 	bl	8000c24 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e1a8      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131c:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d0f0      	beq.n	800130a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001328:	4b28      	ldr	r3, [pc, #160]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4925      	ldr	r1, [pc, #148]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001338:	4313      	orrs	r3, r2
 800133a:	600b      	str	r3, [r1, #0]
 800133c:	e015      	b.n	800136a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133e:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <HAL_RCC_OscConfig+0x244>)
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001344:	f7ff fc6e 	bl	8000c24 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134c:	f7ff fc6a 	bl	8000c24 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e187      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d036      	beq.n	80013e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d016      	beq.n	80013ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_RCC_OscConfig+0x248>)
 8001380:	2201      	movs	r2, #1
 8001382:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001384:	f7ff fc4e 	bl	8000c24 <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800138c:	f7ff fc4a 	bl	8000c24 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e167      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <HAL_RCC_OscConfig+0x240>)
 80013a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0f0      	beq.n	800138c <HAL_RCC_OscConfig+0x200>
 80013aa:	e01b      	b.n	80013e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ac:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <HAL_RCC_OscConfig+0x248>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fc37 	bl	8000c24 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	e00e      	b.n	80013d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013ba:	f7ff fc33 	bl	8000c24 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d907      	bls.n	80013d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e150      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
 80013cc:	40023800 	.word	0x40023800
 80013d0:	42470000 	.word	0x42470000
 80013d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d8:	4b88      	ldr	r3, [pc, #544]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80013da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1ea      	bne.n	80013ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 8097 	beq.w	8001520 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013f6:	4b81      	ldr	r3, [pc, #516]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d10f      	bne.n	8001422 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b7d      	ldr	r3, [pc, #500]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a7c      	ldr	r2, [pc, #496]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b7a      	ldr	r3, [pc, #488]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141e:	2301      	movs	r3, #1
 8001420:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b77      	ldr	r3, [pc, #476]	; (8001600 <HAL_RCC_OscConfig+0x474>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d118      	bne.n	8001460 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142e:	4b74      	ldr	r3, [pc, #464]	; (8001600 <HAL_RCC_OscConfig+0x474>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a73      	ldr	r2, [pc, #460]	; (8001600 <HAL_RCC_OscConfig+0x474>)
 8001434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143a:	f7ff fbf3 	bl	8000c24 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001442:	f7ff fbef 	bl	8000c24 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e10c      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	4b6a      	ldr	r3, [pc, #424]	; (8001600 <HAL_RCC_OscConfig+0x474>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x2ea>
 8001468:	4b64      	ldr	r3, [pc, #400]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146c:	4a63      	ldr	r2, [pc, #396]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6713      	str	r3, [r2, #112]	; 0x70
 8001474:	e01c      	b.n	80014b0 <HAL_RCC_OscConfig+0x324>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b05      	cmp	r3, #5
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x30c>
 800147e:	4b5f      	ldr	r3, [pc, #380]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001482:	4a5e      	ldr	r2, [pc, #376]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	6713      	str	r3, [r2, #112]	; 0x70
 800148a:	4b5c      	ldr	r3, [pc, #368]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148e:	4a5b      	ldr	r2, [pc, #364]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6713      	str	r3, [r2, #112]	; 0x70
 8001496:	e00b      	b.n	80014b0 <HAL_RCC_OscConfig+0x324>
 8001498:	4b58      	ldr	r3, [pc, #352]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800149a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149c:	4a57      	ldr	r2, [pc, #348]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	6713      	str	r3, [r2, #112]	; 0x70
 80014a4:	4b55      	ldr	r3, [pc, #340]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a8:	4a54      	ldr	r2, [pc, #336]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80014aa:	f023 0304 	bic.w	r3, r3, #4
 80014ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d015      	beq.n	80014e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b8:	f7ff fbb4 	bl	8000c24 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014c0:	f7ff fbb0 	bl	8000c24 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e0cb      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014d6:	4b49      	ldr	r3, [pc, #292]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0ee      	beq.n	80014c0 <HAL_RCC_OscConfig+0x334>
 80014e2:	e014      	b.n	800150e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e4:	f7ff fb9e 	bl	8000c24 <HAL_GetTick>
 80014e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ec:	f7ff fb9a 	bl	8000c24 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e0b5      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001502:	4b3e      	ldr	r3, [pc, #248]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ee      	bne.n	80014ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800150e:	7dfb      	ldrb	r3, [r7, #23]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d105      	bne.n	8001520 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001514:	4b39      	ldr	r3, [pc, #228]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	4a38      	ldr	r2, [pc, #224]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800151a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800151e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	f000 80a1 	beq.w	800166c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800152a:	4b34      	ldr	r3, [pc, #208]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
 8001532:	2b08      	cmp	r3, #8
 8001534:	d05c      	beq.n	80015f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d141      	bne.n	80015c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153e:	4b31      	ldr	r3, [pc, #196]	; (8001604 <HAL_RCC_OscConfig+0x478>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fb6e 	bl	8000c24 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800154c:	f7ff fb6a 	bl	8000c24 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e087      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155e:	4b27      	ldr	r3, [pc, #156]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69da      	ldr	r2, [r3, #28]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	431a      	orrs	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	019b      	lsls	r3, r3, #6
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	085b      	lsrs	r3, r3, #1
 8001582:	3b01      	subs	r3, #1
 8001584:	041b      	lsls	r3, r3, #16
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	061b      	lsls	r3, r3, #24
 800158e:	491b      	ldr	r1, [pc, #108]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 8001590:	4313      	orrs	r3, r2
 8001592:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001594:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_RCC_OscConfig+0x478>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff fb43 	bl	8000c24 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015a2:	f7ff fb3f 	bl	8000c24 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e05c      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x416>
 80015c0:	e054      	b.n	800166c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <HAL_RCC_OscConfig+0x478>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fb2c 	bl	8000c24 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d0:	f7ff fb28 	bl	8000c24 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e045      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_RCC_OscConfig+0x470>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x444>
 80015ee:	e03d      	b.n	800166c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d107      	bne.n	8001608 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e038      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000
 8001604:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <HAL_RCC_OscConfig+0x4ec>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d028      	beq.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d121      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162e:	429a      	cmp	r2, r3
 8001630:	d11a      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001638:	4013      	ands	r3, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800163e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001640:	4293      	cmp	r3, r2
 8001642:	d111      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164e:	085b      	lsrs	r3, r3, #1
 8001650:	3b01      	subs	r3, #1
 8001652:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001654:	429a      	cmp	r2, r3
 8001656:	d107      	bne.n	8001668 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0cc      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001690:	4b68      	ldr	r3, [pc, #416]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d90c      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b65      	ldr	r3, [pc, #404]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0b8      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b59      	ldr	r3, [pc, #356]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a58      	ldr	r2, [pc, #352]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e8:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	494d      	ldr	r1, [pc, #308]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d044      	beq.n	800179c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d119      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d003      	beq.n	800173a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001736:	2b03      	cmp	r3, #3
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173a:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e06f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174a:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e067      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175a:	4b37      	ldr	r3, [pc, #220]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f023 0203 	bic.w	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4934      	ldr	r1, [pc, #208]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800176c:	f7ff fa5a 	bl	8000c24 <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	e00a      	b.n	800178a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001774:	f7ff fa56 	bl	8000c24 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e04f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178a:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 020c 	and.w	r2, r3, #12
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	429a      	cmp	r2, r3
 800179a:	d1eb      	bne.n	8001774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800179c:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d20c      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e032      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4916      	ldr	r1, [pc, #88]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	490e      	ldr	r1, [pc, #56]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001802:	f000 f821 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 8001806:	4602      	mov	r2, r0
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	490a      	ldr	r1, [pc, #40]	; (800183c <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	5ccb      	ldrb	r3, [r1, r3]
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f9ba 	bl	8000b9c <HAL_InitTick>

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023c00 	.word	0x40023c00
 8001838:	40023800 	.word	0x40023800
 800183c:	080025ec 	.word	0x080025ec
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004

08001848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800184c:	b094      	sub	sp, #80	; 0x50
 800184e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001850:	2300      	movs	r3, #0
 8001852:	647b      	str	r3, [r7, #68]	; 0x44
 8001854:	2300      	movs	r3, #0
 8001856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001858:	2300      	movs	r3, #0
 800185a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001860:	4b79      	ldr	r3, [pc, #484]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b08      	cmp	r3, #8
 800186a:	d00d      	beq.n	8001888 <HAL_RCC_GetSysClockFreq+0x40>
 800186c:	2b08      	cmp	r3, #8
 800186e:	f200 80e1 	bhi.w	8001a34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001872:	2b00      	cmp	r3, #0
 8001874:	d002      	beq.n	800187c <HAL_RCC_GetSysClockFreq+0x34>
 8001876:	2b04      	cmp	r3, #4
 8001878:	d003      	beq.n	8001882 <HAL_RCC_GetSysClockFreq+0x3a>
 800187a:	e0db      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800187c:	4b73      	ldr	r3, [pc, #460]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x204>)
 800187e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001880:	e0db      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001882:	4b73      	ldr	r3, [pc, #460]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x208>)
 8001884:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001886:	e0d8      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001888:	4b6f      	ldr	r3, [pc, #444]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x200>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001890:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001892:	4b6d      	ldr	r3, [pc, #436]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d063      	beq.n	8001966 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189e:	4b6a      	ldr	r3, [pc, #424]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x200>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	099b      	lsrs	r3, r3, #6
 80018a4:	2200      	movs	r2, #0
 80018a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80018a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
 80018b2:	2300      	movs	r3, #0
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
 80018b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80018ba:	4622      	mov	r2, r4
 80018bc:	462b      	mov	r3, r5
 80018be:	f04f 0000 	mov.w	r0, #0
 80018c2:	f04f 0100 	mov.w	r1, #0
 80018c6:	0159      	lsls	r1, r3, #5
 80018c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018cc:	0150      	lsls	r0, r2, #5
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4621      	mov	r1, r4
 80018d4:	1a51      	subs	r1, r2, r1
 80018d6:	6139      	str	r1, [r7, #16]
 80018d8:	4629      	mov	r1, r5
 80018da:	eb63 0301 	sbc.w	r3, r3, r1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018ec:	4659      	mov	r1, fp
 80018ee:	018b      	lsls	r3, r1, #6
 80018f0:	4651      	mov	r1, sl
 80018f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018f6:	4651      	mov	r1, sl
 80018f8:	018a      	lsls	r2, r1, #6
 80018fa:	4651      	mov	r1, sl
 80018fc:	ebb2 0801 	subs.w	r8, r2, r1
 8001900:	4659      	mov	r1, fp
 8001902:	eb63 0901 	sbc.w	r9, r3, r1
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800191a:	4690      	mov	r8, r2
 800191c:	4699      	mov	r9, r3
 800191e:	4623      	mov	r3, r4
 8001920:	eb18 0303 	adds.w	r3, r8, r3
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	462b      	mov	r3, r5
 8001928:	eb49 0303 	adc.w	r3, r9, r3
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800193a:	4629      	mov	r1, r5
 800193c:	024b      	lsls	r3, r1, #9
 800193e:	4621      	mov	r1, r4
 8001940:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001944:	4621      	mov	r1, r4
 8001946:	024a      	lsls	r2, r1, #9
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800194e:	2200      	movs	r2, #0
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
 8001952:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001954:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001958:	f7fe fc3c 	bl	80001d4 <__aeabi_uldivmod>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4613      	mov	r3, r2
 8001962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001964:	e058      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001966:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	099b      	lsrs	r3, r3, #6
 800196c:	2200      	movs	r2, #0
 800196e:	4618      	mov	r0, r3
 8001970:	4611      	mov	r1, r2
 8001972:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001976:	623b      	str	r3, [r7, #32]
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
 800197c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001980:	4642      	mov	r2, r8
 8001982:	464b      	mov	r3, r9
 8001984:	f04f 0000 	mov.w	r0, #0
 8001988:	f04f 0100 	mov.w	r1, #0
 800198c:	0159      	lsls	r1, r3, #5
 800198e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001992:	0150      	lsls	r0, r2, #5
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4641      	mov	r1, r8
 800199a:	ebb2 0a01 	subs.w	sl, r2, r1
 800199e:	4649      	mov	r1, r9
 80019a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019b8:	ebb2 040a 	subs.w	r4, r2, sl
 80019bc:	eb63 050b 	sbc.w	r5, r3, fp
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	00eb      	lsls	r3, r5, #3
 80019ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019ce:	00e2      	lsls	r2, r4, #3
 80019d0:	4614      	mov	r4, r2
 80019d2:	461d      	mov	r5, r3
 80019d4:	4643      	mov	r3, r8
 80019d6:	18e3      	adds	r3, r4, r3
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	464b      	mov	r3, r9
 80019dc:	eb45 0303 	adc.w	r3, r5, r3
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ee:	4629      	mov	r1, r5
 80019f0:	028b      	lsls	r3, r1, #10
 80019f2:	4621      	mov	r1, r4
 80019f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019f8:	4621      	mov	r1, r4
 80019fa:	028a      	lsls	r2, r1, #10
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a02:	2200      	movs	r2, #0
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	61fa      	str	r2, [r7, #28]
 8001a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a0c:	f7fe fbe2 	bl	80001d4 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4613      	mov	r3, r2
 8001a16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	0c1b      	lsrs	r3, r3, #16
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	3301      	adds	r3, #1
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001a28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a32:	e002      	b.n	8001a3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001a36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3750      	adds	r7, #80	; 0x50
 8001a40:	46bd      	mov	sp, r7
 8001a42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	00f42400 	.word	0x00f42400
 8001a50:	007a1200 	.word	0x007a1200

08001a54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000000 	.word	0x20000000

08001a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a70:	f7ff fff0 	bl	8001a54 <HAL_RCC_GetHCLKFreq>
 8001a74:	4602      	mov	r2, r0
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	0a9b      	lsrs	r3, r3, #10
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	4903      	ldr	r1, [pc, #12]	; (8001a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a82:	5ccb      	ldrb	r3, [r1, r3]
 8001a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	080025fc 	.word	0x080025fc

08001a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a98:	f7ff ffdc 	bl	8001a54 <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	0b5b      	lsrs	r3, r3, #13
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	080025fc 	.word	0x080025fc

08001abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e041      	b.n	8001b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7fe ff7a 	bl	80009dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3304      	adds	r3, #4
 8001af8:	4619      	mov	r1, r3
 8001afa:	4610      	mov	r0, r2
 8001afc:	f000 f8f4 	bl	8001ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b084      	sub	sp, #16
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_TIM_ConfigClockSource+0x1c>
 8001b72:	2302      	movs	r3, #2
 8001b74:	e0b4      	b.n	8001ce0 <HAL_TIM_ConfigClockSource+0x186>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2202      	movs	r2, #2
 8001b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b9c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bae:	d03e      	beq.n	8001c2e <HAL_TIM_ConfigClockSource+0xd4>
 8001bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bb4:	f200 8087 	bhi.w	8001cc6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bbc:	f000 8086 	beq.w	8001ccc <HAL_TIM_ConfigClockSource+0x172>
 8001bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc4:	d87f      	bhi.n	8001cc6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bc6:	2b70      	cmp	r3, #112	; 0x70
 8001bc8:	d01a      	beq.n	8001c00 <HAL_TIM_ConfigClockSource+0xa6>
 8001bca:	2b70      	cmp	r3, #112	; 0x70
 8001bcc:	d87b      	bhi.n	8001cc6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bce:	2b60      	cmp	r3, #96	; 0x60
 8001bd0:	d050      	beq.n	8001c74 <HAL_TIM_ConfigClockSource+0x11a>
 8001bd2:	2b60      	cmp	r3, #96	; 0x60
 8001bd4:	d877      	bhi.n	8001cc6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bd6:	2b50      	cmp	r3, #80	; 0x50
 8001bd8:	d03c      	beq.n	8001c54 <HAL_TIM_ConfigClockSource+0xfa>
 8001bda:	2b50      	cmp	r3, #80	; 0x50
 8001bdc:	d873      	bhi.n	8001cc6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bde:	2b40      	cmp	r3, #64	; 0x40
 8001be0:	d058      	beq.n	8001c94 <HAL_TIM_ConfigClockSource+0x13a>
 8001be2:	2b40      	cmp	r3, #64	; 0x40
 8001be4:	d86f      	bhi.n	8001cc6 <HAL_TIM_ConfigClockSource+0x16c>
 8001be6:	2b30      	cmp	r3, #48	; 0x30
 8001be8:	d064      	beq.n	8001cb4 <HAL_TIM_ConfigClockSource+0x15a>
 8001bea:	2b30      	cmp	r3, #48	; 0x30
 8001bec:	d86b      	bhi.n	8001cc6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	d060      	beq.n	8001cb4 <HAL_TIM_ConfigClockSource+0x15a>
 8001bf2:	2b20      	cmp	r3, #32
 8001bf4:	d867      	bhi.n	8001cc6 <HAL_TIM_ConfigClockSource+0x16c>
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d05c      	beq.n	8001cb4 <HAL_TIM_ConfigClockSource+0x15a>
 8001bfa:	2b10      	cmp	r3, #16
 8001bfc:	d05a      	beq.n	8001cb4 <HAL_TIM_ConfigClockSource+0x15a>
 8001bfe:	e062      	b.n	8001cc6 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6899      	ldr	r1, [r3, #8]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f000 f964 	bl	8001edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	609a      	str	r2, [r3, #8]
      break;
 8001c2c:	e04f      	b.n	8001cce <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6818      	ldr	r0, [r3, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6899      	ldr	r1, [r3, #8]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685a      	ldr	r2, [r3, #4]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f000 f94d 	bl	8001edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c50:	609a      	str	r2, [r3, #8]
      break;
 8001c52:	e03c      	b.n	8001cce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	6859      	ldr	r1, [r3, #4]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	461a      	mov	r2, r3
 8001c62:	f000 f8c1 	bl	8001de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2150      	movs	r1, #80	; 0x50
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 f91a 	bl	8001ea6 <TIM_ITRx_SetConfig>
      break;
 8001c72:	e02c      	b.n	8001cce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	461a      	mov	r2, r3
 8001c82:	f000 f8e0 	bl	8001e46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2160      	movs	r1, #96	; 0x60
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 f90a 	bl	8001ea6 <TIM_ITRx_SetConfig>
      break;
 8001c92:	e01c      	b.n	8001cce <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6818      	ldr	r0, [r3, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6859      	ldr	r1, [r3, #4]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f000 f8a1 	bl	8001de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2140      	movs	r1, #64	; 0x40
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 f8fa 	bl	8001ea6 <TIM_ITRx_SetConfig>
      break;
 8001cb2:	e00c      	b.n	8001cce <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4610      	mov	r0, r2
 8001cc0:	f000 f8f1 	bl	8001ea6 <TIM_ITRx_SetConfig>
      break;
 8001cc4:	e003      	b.n	8001cce <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8001cca:	e000      	b.n	8001cce <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001ccc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a34      	ldr	r2, [pc, #208]	; (8001dcc <TIM_Base_SetConfig+0xe4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d00f      	beq.n	8001d20 <TIM_Base_SetConfig+0x38>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d06:	d00b      	beq.n	8001d20 <TIM_Base_SetConfig+0x38>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4a31      	ldr	r2, [pc, #196]	; (8001dd0 <TIM_Base_SetConfig+0xe8>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d007      	beq.n	8001d20 <TIM_Base_SetConfig+0x38>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a30      	ldr	r2, [pc, #192]	; (8001dd4 <TIM_Base_SetConfig+0xec>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d003      	beq.n	8001d20 <TIM_Base_SetConfig+0x38>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a2f      	ldr	r2, [pc, #188]	; (8001dd8 <TIM_Base_SetConfig+0xf0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d108      	bne.n	8001d32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	68fa      	ldr	r2, [r7, #12]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a25      	ldr	r2, [pc, #148]	; (8001dcc <TIM_Base_SetConfig+0xe4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d01b      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d40:	d017      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a22      	ldr	r2, [pc, #136]	; (8001dd0 <TIM_Base_SetConfig+0xe8>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <TIM_Base_SetConfig+0xec>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00f      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a20      	ldr	r2, [pc, #128]	; (8001dd8 <TIM_Base_SetConfig+0xf0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00b      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <TIM_Base_SetConfig+0xf4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a1e      	ldr	r2, [pc, #120]	; (8001de0 <TIM_Base_SetConfig+0xf8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d003      	beq.n	8001d72 <TIM_Base_SetConfig+0x8a>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <TIM_Base_SetConfig+0xfc>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d108      	bne.n	8001d84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <TIM_Base_SetConfig+0xe4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d103      	bne.n	8001db8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	615a      	str	r2, [r3, #20]
}
 8001dbe:	bf00      	nop
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40010000 	.word	0x40010000
 8001dd0:	40000400 	.word	0x40000400
 8001dd4:	40000800 	.word	0x40000800
 8001dd8:	40000c00 	.word	0x40000c00
 8001ddc:	40014000 	.word	0x40014000
 8001de0:	40014400 	.word	0x40014400
 8001de4:	40014800 	.word	0x40014800

08001de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	f023 0201 	bic.w	r2, r3, #1
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	011b      	lsls	r3, r3, #4
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f023 030a 	bic.w	r3, r3, #10
 8001e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	621a      	str	r2, [r3, #32]
}
 8001e3a:	bf00      	nop
 8001e3c:	371c      	adds	r7, #28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b087      	sub	sp, #28
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	60f8      	str	r0, [r7, #12]
 8001e4e:	60b9      	str	r1, [r7, #8]
 8001e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	f023 0210 	bic.w	r2, r3, #16
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	031b      	lsls	r3, r3, #12
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	011b      	lsls	r3, r3, #4
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	621a      	str	r2, [r3, #32]
}
 8001e9a:	bf00      	nop
 8001e9c:	371c      	adds	r7, #28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b085      	sub	sp, #20
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	f043 0307 	orr.w	r3, r3, #7
 8001ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	609a      	str	r2, [r3, #8]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	021a      	lsls	r2, r3, #8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	431a      	orrs	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	609a      	str	r2, [r3, #8]
}
 8001f10:	bf00      	nop
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e050      	b.n	8001fd6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d018      	beq.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f80:	d013      	beq.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a18      	ldr	r2, [pc, #96]	; (8001fe8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00e      	beq.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a16      	ldr	r2, [pc, #88]	; (8001fec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a15      	ldr	r2, [pc, #84]	; (8001ff0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d004      	beq.n	8001faa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	68ba      	ldr	r2, [r7, #8]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68ba      	ldr	r2, [r7, #8]
 8001fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	40000400 	.word	0x40000400
 8001fec:	40000800 	.word	0x40000800
 8001ff0:	40000c00 	.word	0x40000c00
 8001ff4:	40014000 	.word	0x40014000

08001ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e03f      	b.n	800208a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7fe fd28 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2224      	movs	r2, #36	; 0x24
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800203a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f829 	bl	8002094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691a      	ldr	r2, [r3, #16]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2220      	movs	r2, #32
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002098:	b0c0      	sub	sp, #256	; 0x100
 800209a:	af00      	add	r7, sp, #0
 800209c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b0:	68d9      	ldr	r1, [r3, #12]
 80020b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	ea40 0301 	orr.w	r3, r0, r1
 80020bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020ec:	f021 010c 	bic.w	r1, r1, #12
 80020f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020fa:	430b      	orrs	r3, r1
 80020fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800210a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210e:	6999      	ldr	r1, [r3, #24]
 8002110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	ea40 0301 	orr.w	r3, r0, r1
 800211a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800211c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4b8f      	ldr	r3, [pc, #572]	; (8002360 <UART_SetConfig+0x2cc>)
 8002124:	429a      	cmp	r2, r3
 8002126:	d005      	beq.n	8002134 <UART_SetConfig+0xa0>
 8002128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b8d      	ldr	r3, [pc, #564]	; (8002364 <UART_SetConfig+0x2d0>)
 8002130:	429a      	cmp	r2, r3
 8002132:	d104      	bne.n	800213e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002134:	f7ff fcae 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 8002138:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800213c:	e003      	b.n	8002146 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800213e:	f7ff fc95 	bl	8001a6c <HAL_RCC_GetPCLK1Freq>
 8002142:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002150:	f040 810c 	bne.w	800236c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002158:	2200      	movs	r2, #0
 800215a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800215e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002162:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002166:	4622      	mov	r2, r4
 8002168:	462b      	mov	r3, r5
 800216a:	1891      	adds	r1, r2, r2
 800216c:	65b9      	str	r1, [r7, #88]	; 0x58
 800216e:	415b      	adcs	r3, r3
 8002170:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002172:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002176:	4621      	mov	r1, r4
 8002178:	eb12 0801 	adds.w	r8, r2, r1
 800217c:	4629      	mov	r1, r5
 800217e:	eb43 0901 	adc.w	r9, r3, r1
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800218e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002196:	4690      	mov	r8, r2
 8002198:	4699      	mov	r9, r3
 800219a:	4623      	mov	r3, r4
 800219c:	eb18 0303 	adds.w	r3, r8, r3
 80021a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021a4:	462b      	mov	r3, r5
 80021a6:	eb49 0303 	adc.w	r3, r9, r3
 80021aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021c2:	460b      	mov	r3, r1
 80021c4:	18db      	adds	r3, r3, r3
 80021c6:	653b      	str	r3, [r7, #80]	; 0x50
 80021c8:	4613      	mov	r3, r2
 80021ca:	eb42 0303 	adc.w	r3, r2, r3
 80021ce:	657b      	str	r3, [r7, #84]	; 0x54
 80021d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021d8:	f7fd fffc 	bl	80001d4 <__aeabi_uldivmod>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4b61      	ldr	r3, [pc, #388]	; (8002368 <UART_SetConfig+0x2d4>)
 80021e2:	fba3 2302 	umull	r2, r3, r3, r2
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	011c      	lsls	r4, r3, #4
 80021ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021ee:	2200      	movs	r2, #0
 80021f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021fc:	4642      	mov	r2, r8
 80021fe:	464b      	mov	r3, r9
 8002200:	1891      	adds	r1, r2, r2
 8002202:	64b9      	str	r1, [r7, #72]	; 0x48
 8002204:	415b      	adcs	r3, r3
 8002206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002208:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800220c:	4641      	mov	r1, r8
 800220e:	eb12 0a01 	adds.w	sl, r2, r1
 8002212:	4649      	mov	r1, r9
 8002214:	eb43 0b01 	adc.w	fp, r3, r1
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800222c:	4692      	mov	sl, r2
 800222e:	469b      	mov	fp, r3
 8002230:	4643      	mov	r3, r8
 8002232:	eb1a 0303 	adds.w	r3, sl, r3
 8002236:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800223a:	464b      	mov	r3, r9
 800223c:	eb4b 0303 	adc.w	r3, fp, r3
 8002240:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002250:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002254:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002258:	460b      	mov	r3, r1
 800225a:	18db      	adds	r3, r3, r3
 800225c:	643b      	str	r3, [r7, #64]	; 0x40
 800225e:	4613      	mov	r3, r2
 8002260:	eb42 0303 	adc.w	r3, r2, r3
 8002264:	647b      	str	r3, [r7, #68]	; 0x44
 8002266:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800226a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800226e:	f7fd ffb1 	bl	80001d4 <__aeabi_uldivmod>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4611      	mov	r1, r2
 8002278:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <UART_SetConfig+0x2d4>)
 800227a:	fba3 2301 	umull	r2, r3, r3, r1
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2264      	movs	r2, #100	; 0x64
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	1acb      	subs	r3, r1, r3
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800228e:	4b36      	ldr	r3, [pc, #216]	; (8002368 <UART_SetConfig+0x2d4>)
 8002290:	fba3 2302 	umull	r2, r3, r3, r2
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800229c:	441c      	add	r4, r3
 800229e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022a2:	2200      	movs	r2, #0
 80022a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80022ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80022b0:	4642      	mov	r2, r8
 80022b2:	464b      	mov	r3, r9
 80022b4:	1891      	adds	r1, r2, r2
 80022b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80022b8:	415b      	adcs	r3, r3
 80022ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022c0:	4641      	mov	r1, r8
 80022c2:	1851      	adds	r1, r2, r1
 80022c4:	6339      	str	r1, [r7, #48]	; 0x30
 80022c6:	4649      	mov	r1, r9
 80022c8:	414b      	adcs	r3, r1
 80022ca:	637b      	str	r3, [r7, #52]	; 0x34
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022d8:	4659      	mov	r1, fp
 80022da:	00cb      	lsls	r3, r1, #3
 80022dc:	4651      	mov	r1, sl
 80022de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022e2:	4651      	mov	r1, sl
 80022e4:	00ca      	lsls	r2, r1, #3
 80022e6:	4610      	mov	r0, r2
 80022e8:	4619      	mov	r1, r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	4642      	mov	r2, r8
 80022ee:	189b      	adds	r3, r3, r2
 80022f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022f4:	464b      	mov	r3, r9
 80022f6:	460a      	mov	r2, r1
 80022f8:	eb42 0303 	adc.w	r3, r2, r3
 80022fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800230c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002314:	460b      	mov	r3, r1
 8002316:	18db      	adds	r3, r3, r3
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
 800231a:	4613      	mov	r3, r2
 800231c:	eb42 0303 	adc.w	r3, r2, r3
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002326:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800232a:	f7fd ff53 	bl	80001d4 <__aeabi_uldivmod>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <UART_SetConfig+0x2d4>)
 8002334:	fba3 1302 	umull	r1, r3, r3, r2
 8002338:	095b      	lsrs	r3, r3, #5
 800233a:	2164      	movs	r1, #100	; 0x64
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	3332      	adds	r3, #50	; 0x32
 8002346:	4a08      	ldr	r2, [pc, #32]	; (8002368 <UART_SetConfig+0x2d4>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	f003 0207 	and.w	r2, r3, #7
 8002352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4422      	add	r2, r4
 800235a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800235c:	e106      	b.n	800256c <UART_SetConfig+0x4d8>
 800235e:	bf00      	nop
 8002360:	40011000 	.word	0x40011000
 8002364:	40011400 	.word	0x40011400
 8002368:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800236c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002370:	2200      	movs	r2, #0
 8002372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002376:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800237a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800237e:	4642      	mov	r2, r8
 8002380:	464b      	mov	r3, r9
 8002382:	1891      	adds	r1, r2, r2
 8002384:	6239      	str	r1, [r7, #32]
 8002386:	415b      	adcs	r3, r3
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
 800238a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800238e:	4641      	mov	r1, r8
 8002390:	1854      	adds	r4, r2, r1
 8002392:	4649      	mov	r1, r9
 8002394:	eb43 0501 	adc.w	r5, r3, r1
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	00eb      	lsls	r3, r5, #3
 80023a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023a6:	00e2      	lsls	r2, r4, #3
 80023a8:	4614      	mov	r4, r2
 80023aa:	461d      	mov	r5, r3
 80023ac:	4643      	mov	r3, r8
 80023ae:	18e3      	adds	r3, r4, r3
 80023b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023b4:	464b      	mov	r3, r9
 80023b6:	eb45 0303 	adc.w	r3, r5, r3
 80023ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023da:	4629      	mov	r1, r5
 80023dc:	008b      	lsls	r3, r1, #2
 80023de:	4621      	mov	r1, r4
 80023e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023e4:	4621      	mov	r1, r4
 80023e6:	008a      	lsls	r2, r1, #2
 80023e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023ec:	f7fd fef2 	bl	80001d4 <__aeabi_uldivmod>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4b60      	ldr	r3, [pc, #384]	; (8002578 <UART_SetConfig+0x4e4>)
 80023f6:	fba3 2302 	umull	r2, r3, r3, r2
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	011c      	lsls	r4, r3, #4
 80023fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002402:	2200      	movs	r2, #0
 8002404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002408:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800240c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002410:	4642      	mov	r2, r8
 8002412:	464b      	mov	r3, r9
 8002414:	1891      	adds	r1, r2, r2
 8002416:	61b9      	str	r1, [r7, #24]
 8002418:	415b      	adcs	r3, r3
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002420:	4641      	mov	r1, r8
 8002422:	1851      	adds	r1, r2, r1
 8002424:	6139      	str	r1, [r7, #16]
 8002426:	4649      	mov	r1, r9
 8002428:	414b      	adcs	r3, r1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002438:	4659      	mov	r1, fp
 800243a:	00cb      	lsls	r3, r1, #3
 800243c:	4651      	mov	r1, sl
 800243e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002442:	4651      	mov	r1, sl
 8002444:	00ca      	lsls	r2, r1, #3
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	4603      	mov	r3, r0
 800244c:	4642      	mov	r2, r8
 800244e:	189b      	adds	r3, r3, r2
 8002450:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002454:	464b      	mov	r3, r9
 8002456:	460a      	mov	r2, r1
 8002458:	eb42 0303 	adc.w	r3, r2, r3
 800245c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	67bb      	str	r3, [r7, #120]	; 0x78
 800246a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002478:	4649      	mov	r1, r9
 800247a:	008b      	lsls	r3, r1, #2
 800247c:	4641      	mov	r1, r8
 800247e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002482:	4641      	mov	r1, r8
 8002484:	008a      	lsls	r2, r1, #2
 8002486:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800248a:	f7fd fea3 	bl	80001d4 <__aeabi_uldivmod>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4611      	mov	r1, r2
 8002494:	4b38      	ldr	r3, [pc, #224]	; (8002578 <UART_SetConfig+0x4e4>)
 8002496:	fba3 2301 	umull	r2, r3, r3, r1
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	2264      	movs	r2, #100	; 0x64
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	1acb      	subs	r3, r1, r3
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	3332      	adds	r3, #50	; 0x32
 80024a8:	4a33      	ldr	r2, [pc, #204]	; (8002578 <UART_SetConfig+0x4e4>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b4:	441c      	add	r4, r3
 80024b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024ba:	2200      	movs	r2, #0
 80024bc:	673b      	str	r3, [r7, #112]	; 0x70
 80024be:	677a      	str	r2, [r7, #116]	; 0x74
 80024c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024c4:	4642      	mov	r2, r8
 80024c6:	464b      	mov	r3, r9
 80024c8:	1891      	adds	r1, r2, r2
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	415b      	adcs	r3, r3
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024d4:	4641      	mov	r1, r8
 80024d6:	1851      	adds	r1, r2, r1
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	4649      	mov	r1, r9
 80024dc:	414b      	adcs	r3, r1
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024ec:	4659      	mov	r1, fp
 80024ee:	00cb      	lsls	r3, r1, #3
 80024f0:	4651      	mov	r1, sl
 80024f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024f6:	4651      	mov	r1, sl
 80024f8:	00ca      	lsls	r2, r1, #3
 80024fa:	4610      	mov	r0, r2
 80024fc:	4619      	mov	r1, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	4642      	mov	r2, r8
 8002502:	189b      	adds	r3, r3, r2
 8002504:	66bb      	str	r3, [r7, #104]	; 0x68
 8002506:	464b      	mov	r3, r9
 8002508:	460a      	mov	r2, r1
 800250a:	eb42 0303 	adc.w	r3, r2, r3
 800250e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	663b      	str	r3, [r7, #96]	; 0x60
 800251a:	667a      	str	r2, [r7, #100]	; 0x64
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002528:	4649      	mov	r1, r9
 800252a:	008b      	lsls	r3, r1, #2
 800252c:	4641      	mov	r1, r8
 800252e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002532:	4641      	mov	r1, r8
 8002534:	008a      	lsls	r2, r1, #2
 8002536:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800253a:	f7fd fe4b 	bl	80001d4 <__aeabi_uldivmod>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <UART_SetConfig+0x4e4>)
 8002544:	fba3 1302 	umull	r1, r3, r3, r2
 8002548:	095b      	lsrs	r3, r3, #5
 800254a:	2164      	movs	r1, #100	; 0x64
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	011b      	lsls	r3, r3, #4
 8002554:	3332      	adds	r3, #50	; 0x32
 8002556:	4a08      	ldr	r2, [pc, #32]	; (8002578 <UART_SetConfig+0x4e4>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	f003 020f 	and.w	r2, r3, #15
 8002562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4422      	add	r2, r4
 800256a:	609a      	str	r2, [r3, #8]
}
 800256c:	bf00      	nop
 800256e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002572:	46bd      	mov	sp, r7
 8002574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002578:	51eb851f 	.word	0x51eb851f

0800257c <memset>:
 800257c:	4402      	add	r2, r0
 800257e:	4603      	mov	r3, r0
 8002580:	4293      	cmp	r3, r2
 8002582:	d100      	bne.n	8002586 <memset+0xa>
 8002584:	4770      	bx	lr
 8002586:	f803 1b01 	strb.w	r1, [r3], #1
 800258a:	e7f9      	b.n	8002580 <memset+0x4>

0800258c <__libc_init_array>:
 800258c:	b570      	push	{r4, r5, r6, lr}
 800258e:	4d0d      	ldr	r5, [pc, #52]	; (80025c4 <__libc_init_array+0x38>)
 8002590:	4c0d      	ldr	r4, [pc, #52]	; (80025c8 <__libc_init_array+0x3c>)
 8002592:	1b64      	subs	r4, r4, r5
 8002594:	10a4      	asrs	r4, r4, #2
 8002596:	2600      	movs	r6, #0
 8002598:	42a6      	cmp	r6, r4
 800259a:	d109      	bne.n	80025b0 <__libc_init_array+0x24>
 800259c:	4d0b      	ldr	r5, [pc, #44]	; (80025cc <__libc_init_array+0x40>)
 800259e:	4c0c      	ldr	r4, [pc, #48]	; (80025d0 <__libc_init_array+0x44>)
 80025a0:	f000 f818 	bl	80025d4 <_init>
 80025a4:	1b64      	subs	r4, r4, r5
 80025a6:	10a4      	asrs	r4, r4, #2
 80025a8:	2600      	movs	r6, #0
 80025aa:	42a6      	cmp	r6, r4
 80025ac:	d105      	bne.n	80025ba <__libc_init_array+0x2e>
 80025ae:	bd70      	pop	{r4, r5, r6, pc}
 80025b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025b4:	4798      	blx	r3
 80025b6:	3601      	adds	r6, #1
 80025b8:	e7ee      	b.n	8002598 <__libc_init_array+0xc>
 80025ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80025be:	4798      	blx	r3
 80025c0:	3601      	adds	r6, #1
 80025c2:	e7f2      	b.n	80025aa <__libc_init_array+0x1e>
 80025c4:	0800260c 	.word	0x0800260c
 80025c8:	0800260c 	.word	0x0800260c
 80025cc:	0800260c 	.word	0x0800260c
 80025d0:	08002610 	.word	0x08002610

080025d4 <_init>:
 80025d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d6:	bf00      	nop
 80025d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025da:	bc08      	pop	{r3}
 80025dc:	469e      	mov	lr, r3
 80025de:	4770      	bx	lr

080025e0 <_fini>:
 80025e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e2:	bf00      	nop
 80025e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e6:	bc08      	pop	{r3}
 80025e8:	469e      	mov	lr, r3
 80025ea:	4770      	bx	lr
