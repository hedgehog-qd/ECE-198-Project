
TFT2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ba0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009b28  08002d34  08002d34  00012d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c85c  0800c85c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c85c  0800c85c  0001c85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c864  0800c864  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c864  0800c864  0001c864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c868  0800c868  0001c868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800c86c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  0800c878  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  0800c878  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009de4  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c4c  00000000  00000000  00029e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f0  00000000  00000000  0002bab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d6  00000000  00000000  0002c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000146a9  00000000  00000000  0002ca76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c4ed  00000000  00000000  0004111f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000833e6  00000000  00000000  0004d60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002338  00000000  00000000  000d09f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000d2d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002d1c 	.word	0x08002d1c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002d1c 	.word	0x08002d1c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	4b2e      	ldr	r3, [pc, #184]	; (80005a4 <MX_GPIO_Init+0xd4>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a2d      	ldr	r2, [pc, #180]	; (80005a4 <MX_GPIO_Init+0xd4>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <MX_GPIO_Init+0xd4>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	4b27      	ldr	r3, [pc, #156]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a26      	ldr	r2, [pc, #152]	; (80005a4 <MX_GPIO_Init+0xd4>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b24      	ldr	r3, [pc, #144]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b20      	ldr	r3, [pc, #128]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a1f      	ldr	r2, [pc, #124]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a18      	ldr	r2, [pc, #96]	; (80005a4 <MX_GPIO_Init+0xd4>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <MX_GPIO_Init+0xd4>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_RS_Pin|LCD_CS_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	f44f 4152 	mov.w	r1, #53760	; 0xd200
 800055c:	4812      	ldr	r0, [pc, #72]	; (80005a8 <MX_GPIO_Init+0xd8>)
 800055e:	f001 f9ad 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000568:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800056c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <MX_GPIO_Init+0xdc>)
 800057a:	f001 f81b 	bl	80015b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PB9 */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_RS_Pin|LCD_CS_Pin|GPIO_PIN_9;
 800057e:	f44f 4352 	mov.w	r3, #53760	; 0xd200
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2300      	movs	r3, #0
 800058e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4619      	mov	r1, r3
 8000596:	4804      	ldr	r0, [pc, #16]	; (80005a8 <MX_GPIO_Init+0xd8>)
 8000598:	f001 f80c 	bl	80015b4 <HAL_GPIO_Init>

}
 800059c:	bf00      	nop
 800059e:	3728      	adds	r7, #40	; 0x28
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40020400 	.word	0x40020400
 80005ac:	40020800 	.word	0x40020800

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f000 fe81 	bl	80012bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f839 	bl	8000630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f7ff ff87 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c2:	f000 fddf 	bl	8001184 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005c6:	f000 f8a5 	bl	8000714 <MX_SPI1_Init>
  ST7735_Init();
 80005ca:	f000 f959 	bl	8000880 <ST7735_Init>
  	ST7735_FillScreen(ST7735_BLACK);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fc62 	bl	8000e98 <ST7735_FillScreen>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  ST7735_DrawString(5, 0, "FUCK", ST7735_GREEN);
 80005d4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80005d8:	4a12      	ldr	r2, [pc, #72]	; (8000624 <main+0x74>)
 80005da:	2100      	movs	r1, #0
 80005dc:	2005      	movs	r0, #5
 80005de:	f000 fad5 	bl	8000b8c <ST7735_DrawString>
  ST7735_DrawImage(0,160,120,160,gImage_lzy);
 80005e2:	4b11      	ldr	r3, [pc, #68]	; (8000628 <main+0x78>)
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	23a0      	movs	r3, #160	; 0xa0
 80005e8:	2278      	movs	r2, #120	; 0x78
 80005ea:	21a0      	movs	r1, #160	; 0xa0
 80005ec:	2000      	movs	r0, #0
 80005ee:	f000 fc65 	bl	8000ebc <ST7735_DrawImage>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(int i=0;i<10;i++){
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	e00a      	b.n	800060e <main+0x5e>
		  ST7735_DrawString(1, i, "FUCK", ST7735_GREEN);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	b299      	uxth	r1, r3
 80005fc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000600:	4a08      	ldr	r2, [pc, #32]	; (8000624 <main+0x74>)
 8000602:	2001      	movs	r0, #1
 8000604:	f000 fac2 	bl	8000b8c <ST7735_DrawString>
	  for(int i=0;i<10;i++){
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	3301      	adds	r3, #1
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b09      	cmp	r3, #9
 8000612:	ddf1      	ble.n	80005f8 <main+0x48>
	  }
	  ST7735_DrawString(2,12,"@Tony Lyu", ST7735_WHITE);
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <main+0x7c>)
 800061a:	210c      	movs	r1, #12
 800061c:	2002      	movs	r0, #2
 800061e:	f000 fab5 	bl	8000b8c <ST7735_DrawString>
	  for(int i=0;i<10;i++){
 8000622:	e7e6      	b.n	80005f2 <main+0x42>
 8000624:	08002d34 	.word	0x08002d34
 8000628:	08002d48 	.word	0x08002d48
 800062c:	08002d3c 	.word	0x08002d3c

08000630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b094      	sub	sp, #80	; 0x50
 8000634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000636:	f107 0320 	add.w	r3, r7, #32
 800063a:	2230      	movs	r2, #48	; 0x30
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fb40 	bl	8002cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	4b29      	ldr	r3, [pc, #164]	; (8000700 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	4a28      	ldr	r2, [pc, #160]	; (8000700 <SystemClock_Config+0xd0>)
 800065e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000662:	6413      	str	r3, [r2, #64]	; 0x40
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <SystemClock_Config+0xd0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <SystemClock_Config+0xd4>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <SystemClock_Config+0xd4>)
 800067e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <SystemClock_Config+0xd4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	2310      	movs	r3, #16
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006a4:	2310      	movs	r3, #16
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ae:	2304      	movs	r3, #4
 80006b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b2:	2307      	movs	r3, #7
 80006b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f918 	bl	80018f0 <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006c6:	f000 f81f 	bl	8000708 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2102      	movs	r1, #2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fb7a 	bl	8001de0 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006f2:	f000 f809 	bl	8000708 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	; 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>
	...

08000714 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_SPI1_Init+0x64>)
 800071a:	4a18      	ldr	r2, [pc, #96]	; (800077c <MX_SPI1_Init+0x68>)
 800071c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_SPI1_Init+0x64>)
 8000720:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000724:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_SPI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_SPI1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_SPI1_Init+0x64>)
 8000740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000744:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_SPI1_Init+0x64>)
 8000748:	2220      	movs	r2, #32
 800074a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_SPI1_Init+0x64>)
 8000760:	220a      	movs	r2, #10
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_SPI1_Init+0x64>)
 8000766:	f001 fd5b 	bl	8002220 <HAL_SPI_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000770:	f7ff ffca 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000028 	.word	0x20000028
 800077c:	40013000 	.word	0x40013000

08000780 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a19      	ldr	r2, [pc, #100]	; (8000804 <HAL_SPI_MspInit+0x84>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d12b      	bne.n	80007fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <HAL_SPI_MspInit+0x88>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	4a17      	ldr	r2, [pc, #92]	; (8000808 <HAL_SPI_MspInit+0x88>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b0:	6453      	str	r3, [r2, #68]	; 0x44
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <HAL_SPI_MspInit+0x88>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <HAL_SPI_MspInit+0x88>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a10      	ldr	r2, [pc, #64]	; (8000808 <HAL_SPI_MspInit+0x88>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <HAL_SPI_MspInit+0x88>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80007da:	2328      	movs	r3, #40	; 0x28
 80007dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e6:	2303      	movs	r3, #3
 80007e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ea:	2305      	movs	r3, #5
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <HAL_SPI_MspInit+0x8c>)
 80007f6:	f000 fedd 	bl	80015b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	; 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40013000 	.word	0x40013000
 8000808:	40023800 	.word	0x40023800
 800080c:	40020400 	.word	0x40020400

08000810 <ST7735_SetAddressWindow>:
int32_t Ymax,Ymin,X;        // X goes from 0 to 127
int32_t Yrange; //YrangeDiv2;
int TimeIndex;
uint16_t PlotBGColor;
 
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4604      	mov	r4, r0
 8000818:	4608      	mov	r0, r1
 800081a:	4611      	mov	r1, r2
 800081c:	461a      	mov	r2, r3
 800081e:	4623      	mov	r3, r4
 8000820:	71fb      	strb	r3, [r7, #7]
 8000822:	4603      	mov	r3, r0
 8000824:	71bb      	strb	r3, [r7, #6]
 8000826:	460b      	mov	r3, r1
 8000828:	717b      	strb	r3, [r7, #5]
 800082a:	4613      	mov	r3, r2
 800082c:	713b      	strb	r3, [r7, #4]
    lcd7735_sendCmd(ST7735_CASET); // Column addr set
 800082e:	202a      	movs	r0, #42	; 0x2a
 8000830:	f000 fc06 	bl	8001040 <lcd7735_sendCmd>
		lcd7735_sendData(0x00);            // XS15 ~ XS8
 8000834:	2000      	movs	r0, #0
 8000836:	f000 fc19 	bl	800106c <lcd7735_sendData>
		lcd7735_sendData(x0+ST7735_XSTART);     // XSTART       XS7 ~ XS0
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	4618      	mov	r0, r3
 800083e:	f000 fc15 	bl	800106c <lcd7735_sendData>
		lcd7735_sendData(0x00);            // XE15 ~ XE8
 8000842:	2000      	movs	r0, #0
 8000844:	f000 fc12 	bl	800106c <lcd7735_sendData>
		lcd7735_sendData(x1+ST7735_XSTART);     // XEND         XE7 ~ XE0
 8000848:	797b      	ldrb	r3, [r7, #5]
 800084a:	4618      	mov	r0, r3
 800084c:	f000 fc0e 	bl	800106c <lcd7735_sendData>
 
		lcd7735_sendCmd(ST7735_RASET); // Row addr set
 8000850:	202b      	movs	r0, #43	; 0x2b
 8000852:	f000 fbf5 	bl	8001040 <lcd7735_sendCmd>
		lcd7735_sendData(0x00);
 8000856:	2000      	movs	r0, #0
 8000858:	f000 fc08 	bl	800106c <lcd7735_sendData>
		lcd7735_sendData(y0+ST7735_YSTART);     // YSTART
 800085c:	79bb      	ldrb	r3, [r7, #6]
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fc04 	bl	800106c <lcd7735_sendData>
		lcd7735_sendData(0x00);
 8000864:	2000      	movs	r0, #0
 8000866:	f000 fc01 	bl	800106c <lcd7735_sendData>
		lcd7735_sendData(y1+ST7735_YSTART);     // YEND
 800086a:	793b      	ldrb	r3, [r7, #4]
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fbfd 	bl	800106c <lcd7735_sendData>
	
		lcd7735_sendCmd(ST7735_RAMWR); 
 8000872:	202c      	movs	r0, #44	; 0x2c
 8000874:	f000 fbe4 	bl	8001040 <lcd7735_sendCmd>
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bd90      	pop	{r4, r7, pc}

08000880 <ST7735_Init>:
void ST7735_Init() {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
    //ST7735_Select();
	  LCD_CS0;
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800088a:	4810      	ldr	r0, [pc, #64]	; (80008cc <ST7735_Init+0x4c>)
 800088c:	f001 f816 	bl	80018bc <HAL_GPIO_WritePin>
    //ST7735_Reset();
	  LCD_RST0;
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <ST7735_Init+0x4c>)
 8000898:	f001 f810 	bl	80018bc <HAL_GPIO_WritePin>
		HAL_Delay(7);
 800089c:	2007      	movs	r0, #7
 800089e:	f000 fd7f 	bl	80013a0 <HAL_Delay>
		LCD_RST1;
 80008a2:	2201      	movs	r2, #1
 80008a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a8:	4808      	ldr	r0, [pc, #32]	; (80008cc <ST7735_Init+0x4c>)
 80008aa:	f001 f807 	bl	80018bc <HAL_GPIO_WritePin>
	
    //ST7735_ExecuteCommandList(init_cmds1);
		ST7735_Init_Command1();
 80008ae:	f000 f80f 	bl	80008d0 <ST7735_Init_Command1>
    //ST7735_ExecuteCommandList(init_cmds2);
		ST7735_Init_Command2();
 80008b2:	f000 f893 	bl	80009dc <ST7735_Init_Command2>
    //ST7735_ExecuteCommandList(init_cmds3);
		ST7735_Init_Command3();
 80008b6:	f000 f8b3 	bl	8000a20 <ST7735_Init_Command3>
	
    //ST7735_Unselect();
		LCD_CS1;		
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <ST7735_Init+0x4c>)
 80008c2:	f000 fffb 	bl	80018bc <HAL_GPIO_WritePin>
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40020400 	.word	0x40020400

080008d0 <ST7735_Init_Command1>:
 
void ST7735_Init_Command1(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_SWRESET);		//  1: Software reset
 80008d4:	2001      	movs	r0, #1
 80008d6:	f000 fbb3 	bl	8001040 <lcd7735_sendCmd>
	HAL_Delay(150);
 80008da:	2096      	movs	r0, #150	; 0x96
 80008dc:	f000 fd60 	bl	80013a0 <HAL_Delay>
	lcd7735_sendCmd(ST7735_SLPOUT);			//  2: Out of sleep mode
 80008e0:	2011      	movs	r0, #17
 80008e2:	f000 fbad 	bl	8001040 <lcd7735_sendCmd>
	HAL_Delay(500);
 80008e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ea:	f000 fd59 	bl	80013a0 <HAL_Delay>
	lcd7735_sendCmd(ST7735_FRMCTR1);		//  3: Frame rate ctrl - normal mode
 80008ee:	20b1      	movs	r0, #177	; 0xb1
 80008f0:	f000 fba6 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 80008f4:	2001      	movs	r0, #1
 80008f6:	f000 fbb9 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 80008fa:	202c      	movs	r0, #44	; 0x2c
 80008fc:	f000 fbb6 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000900:	202d      	movs	r0, #45	; 0x2d
 8000902:	f000 fbb3 	bl	800106c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR2);		//  4: Frame rate control - idle mode
 8000906:	20b2      	movs	r0, #178	; 0xb2
 8000908:	f000 fb9a 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//  Rate = fosc/(1x2+40) * (LINE+2C+2D)
 800090c:	2001      	movs	r0, #1
 800090e:	f000 fbad 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000912:	202c      	movs	r0, #44	; 0x2c
 8000914:	f000 fbaa 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000918:	202d      	movs	r0, #45	; 0x2d
 800091a:	f000 fba7 	bl	800106c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR3);		//  5: Frame rate ctrl - partial mode
 800091e:	20b3      	movs	r0, #179	; 0xb3
 8000920:	f000 fb8e 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//     Dot inversion mode
 8000924:	2001      	movs	r0, #1
 8000926:	f000 fba1 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 800092a:	202c      	movs	r0, #44	; 0x2c
 800092c:	f000 fb9e 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000930:	202d      	movs	r0, #45	; 0x2d
 8000932:	f000 fb9b 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x01);							//     Line inversion mode
 8000936:	2001      	movs	r0, #1
 8000938:	f000 fb98 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 800093c:	202c      	movs	r0, #44	; 0x2c
 800093e:	f000 fb95 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000942:	202d      	movs	r0, #45	; 0x2d
 8000944:	f000 fb92 	bl	800106c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_INVCTR);			//  6: Display inversion ctrl
 8000948:	20b4      	movs	r0, #180	; 0xb4
 800094a:	f000 fb79 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(0x07);							//     No inversion
 800094e:	2007      	movs	r0, #7
 8000950:	f000 fb8c 	bl	800106c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR1);			//  7: Power control
 8000954:	20c0      	movs	r0, #192	; 0xc0
 8000956:	f000 fb73 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(0xA2);
 800095a:	20a2      	movs	r0, #162	; 0xa2
 800095c:	f000 fb86 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x02);							//     -4.6V
 8000960:	2002      	movs	r0, #2
 8000962:	f000 fb83 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x84);							//     AUTO mode
 8000966:	2084      	movs	r0, #132	; 0x84
 8000968:	f000 fb80 	bl	800106c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR2);			//  8: Power control
 800096c:	20c1      	movs	r0, #193	; 0xc1
 800096e:	f000 fb67 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(0xC5);							//     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 8000972:	20c5      	movs	r0, #197	; 0xc5
 8000974:	f000 fb7a 	bl	800106c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR3);			//  9: Power control
 8000978:	20c2      	movs	r0, #194	; 0xc2
 800097a:	f000 fb61 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(0x0A);							//     Opamp current small
 800097e:	200a      	movs	r0, #10
 8000980:	f000 fb74 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     Boost frequency
 8000984:	2000      	movs	r0, #0
 8000986:	f000 fb71 	bl	800106c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR4);			// 10: Power control
 800098a:	20c3      	movs	r0, #195	; 0xc3
 800098c:	f000 fb58 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);							//     BCLK/2, Opamp current small & Medium low
 8000990:	208a      	movs	r0, #138	; 0x8a
 8000992:	f000 fb6b 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2A);
 8000996:	202a      	movs	r0, #42	; 0x2a
 8000998:	f000 fb68 	bl	800106c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR5);			// 11: Power control
 800099c:	20c4      	movs	r0, #196	; 0xc4
 800099e:	f000 fb4f 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);
 80009a2:	208a      	movs	r0, #138	; 0x8a
 80009a4:	f000 fb62 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0xEE);
 80009a8:	20ee      	movs	r0, #238	; 0xee
 80009aa:	f000 fb5f 	bl	800106c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_VMCTR1);			// 12: Power control
 80009ae:	20c5      	movs	r0, #197	; 0xc5
 80009b0:	f000 fb46 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(0x0E);
 80009b4:	200e      	movs	r0, #14
 80009b6:	f000 fb59 	bl	800106c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_INVOFF);			// 13: Don't invert display
 80009ba:	2020      	movs	r0, #32
 80009bc:	f000 fb40 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendCmd(ST7735_MADCTL);			// 14: Memory access control (directions)
 80009c0:	2036      	movs	r0, #54	; 0x36
 80009c2:	f000 fb3d 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(ST7735_ROTATION);	//     row addr/col addr, bottom to top refresh
 80009c6:	20c0      	movs	r0, #192	; 0xc0
 80009c8:	f000 fb50 	bl	800106c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_COLMOD);			// 15: set color mode
 80009cc:	203a      	movs	r0, #58	; 0x3a
 80009ce:	f000 fb37 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(0x05);							//     16-bit color
 80009d2:	2005      	movs	r0, #5
 80009d4:	f000 fb4a 	bl	800106c <lcd7735_sendData>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <ST7735_Init_Command2>:
 
void ST7735_Init_Command2(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_CASET);			//  1: Column addr set
 80009e0:	202a      	movs	r0, #42	; 0x2a
 80009e2:	f000 fb2d 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 fb40 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f000 fb3d 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 fb3a 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 80009f8:	207f      	movs	r0, #127	; 0x7f
 80009fa:	f000 fb37 	bl	800106c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_RASET);			//  2: Row addr set
 80009fe:	202b      	movs	r0, #43	; 0x2b
 8000a00:	f000 fb1e 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 fb31 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f000 fb2e 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 fb2b 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 8000a16:	207f      	movs	r0, #127	; 0x7f
 8000a18:	f000 fb28 	bl	800106c <lcd7735_sendData>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <ST7735_Init_Command3>:
 
void ST7735_Init_Command3(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_GMCTRP1);  //  1: Magical unicorn dust
 8000a24:	20e0      	movs	r0, #224	; 0xe0
 8000a26:	f000 fb0b 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(0x02);
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f000 fb1e 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x1C);
 8000a30:	201c      	movs	r0, #28
 8000a32:	f000 fb1b 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8000a36:	2007      	movs	r0, #7
 8000a38:	f000 fb18 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x12);
 8000a3c:	2012      	movs	r0, #18
 8000a3e:	f000 fb15 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x37);
 8000a42:	2037      	movs	r0, #55	; 0x37
 8000a44:	f000 fb12 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x32);
 8000a48:	2032      	movs	r0, #50	; 0x32
 8000a4a:	f000 fb0f 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000a4e:	2029      	movs	r0, #41	; 0x29
 8000a50:	f000 fb0c 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000a54:	202d      	movs	r0, #45	; 0x2d
 8000a56:	f000 fb09 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000a5a:	2029      	movs	r0, #41	; 0x29
 8000a5c:	f000 fb06 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x25);
 8000a60:	2025      	movs	r0, #37	; 0x25
 8000a62:	f000 fb03 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2B);
 8000a66:	202b      	movs	r0, #43	; 0x2b
 8000a68:	f000 fb00 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x39);
 8000a6c:	2039      	movs	r0, #57	; 0x39
 8000a6e:	f000 fafd 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 fafa 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x01);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f000 faf7 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x03);
 8000a7e:	2003      	movs	r0, #3
 8000a80:	f000 faf4 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x10);
 8000a84:	2010      	movs	r0, #16
 8000a86:	f000 faf1 	bl	800106c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_GMCTRN1);  //  2: Sparkles and rainbows
 8000a8a:	20e1      	movs	r0, #225	; 0xe1
 8000a8c:	f000 fad8 	bl	8001040 <lcd7735_sendCmd>
	lcd7735_sendData(0x03);
 8000a90:	2003      	movs	r0, #3
 8000a92:	f000 faeb 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x1D);
 8000a96:	201d      	movs	r0, #29
 8000a98:	f000 fae8 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8000a9c:	2007      	movs	r0, #7
 8000a9e:	f000 fae5 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x06);
 8000aa2:	2006      	movs	r0, #6
 8000aa4:	f000 fae2 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000aa8:	202e      	movs	r0, #46	; 0x2e
 8000aaa:	f000 fadf 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000aae:	202c      	movs	r0, #44	; 0x2c
 8000ab0:	f000 fadc 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000ab4:	2029      	movs	r0, #41	; 0x29
 8000ab6:	f000 fad9 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000aba:	202d      	movs	r0, #45	; 0x2d
 8000abc:	f000 fad6 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000ac0:	202e      	movs	r0, #46	; 0x2e
 8000ac2:	f000 fad3 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000ac6:	202e      	movs	r0, #46	; 0x2e
 8000ac8:	f000 fad0 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x37);
 8000acc:	2037      	movs	r0, #55	; 0x37
 8000ace:	f000 facd 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x3F);
 8000ad2:	203f      	movs	r0, #63	; 0x3f
 8000ad4:	f000 faca 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f000 fac7 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 fac4 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x02);
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f000 fac1 	bl	800106c <lcd7735_sendData>
	lcd7735_sendData(0x10);
 8000aea:	2010      	movs	r0, #16
 8000aec:	f000 fabe 	bl	800106c <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_NORON);
 8000af0:	2013      	movs	r0, #19
 8000af2:	f000 faa5 	bl	8001040 <lcd7735_sendCmd>
	HAL_Delay(10);
 8000af6:	200a      	movs	r0, #10
 8000af8:	f000 fc52 	bl	80013a0 <HAL_Delay>
	lcd7735_sendCmd(ST7735_DISPON);
 8000afc:	2029      	movs	r0, #41	; 0x29
 8000afe:	f000 fa9f 	bl	8001040 <lcd7735_sendCmd>
	HAL_Delay(100);
 8000b02:	2064      	movs	r0, #100	; 0x64
 8000b04:	f000 fc4c 	bl	80013a0 <HAL_Delay>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <ST7735_DrawPixel>:
    TimeIndex = 0;
  }
  ST7735_DrawFastVLine(TimeIndex + 11, 17, 100, PlotBGColor);
}

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	80fb      	strh	r3, [r7, #6]
 8000b16:	460b      	mov	r3, r1
 8000b18:	80bb      	strh	r3, [r7, #4]
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	2b7f      	cmp	r3, #127	; 0x7f
 8000b22:	d82d      	bhi.n	8000b80 <ST7735_DrawPixel+0x74>
 8000b24:	88bb      	ldrh	r3, [r7, #4]
 8000b26:	2b9f      	cmp	r3, #159	; 0x9f
 8000b28:	d82a      	bhi.n	8000b80 <ST7735_DrawPixel+0x74>
        return;
 
    LCD_CS0;
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b30:	4815      	ldr	r0, [pc, #84]	; (8000b88 <ST7735_DrawPixel+0x7c>)
 8000b32:	f000 fec3 	bl	80018bc <HAL_GPIO_WritePin>
 
    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	b2d8      	uxtb	r0, r3
 8000b3a:	88bb      	ldrh	r3, [r7, #4]
 8000b3c:	b2d9      	uxtb	r1, r3
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	3301      	adds	r3, #1
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	88bb      	ldrh	r3, [r7, #4]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f7ff fe5f 	bl	8000810 <ST7735_SetAddressWindow>
    uint8_t data[2];
		data[0] = color >> 8;
 8000b52:	887b      	ldrh	r3, [r7, #2]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	733b      	strb	r3, [r7, #12]
		data[1] = color & 0xFF;
 8000b5c:	887b      	ldrh	r3, [r7, #2]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	737b      	strb	r3, [r7, #13]
		lcd7735_sendData(data[0]);
 8000b62:	7b3b      	ldrb	r3, [r7, #12]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f000 fa81 	bl	800106c <lcd7735_sendData>
		lcd7735_sendData(data[1]);
 8000b6a:	7b7b      	ldrb	r3, [r7, #13]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f000 fa7d 	bl	800106c <lcd7735_sendData>
 
    LCD_CS1;  //unselect
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b78:	4803      	ldr	r0, [pc, #12]	; (8000b88 <ST7735_DrawPixel+0x7c>)
 8000b7a:	f000 fe9f 	bl	80018bc <HAL_GPIO_WritePin>
 8000b7e:	e000      	b.n	8000b82 <ST7735_DrawPixel+0x76>
        return;
 8000b80:	bf00      	nop
}
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40020400 	.word	0x40020400

08000b8c <ST7735_DrawString>:
uint32_t ST7735_DrawString(uint16_t x, uint16_t y, char *pt, int16_t textColor){
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	60ba      	str	r2, [r7, #8]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4603      	mov	r3, r0
 8000b98:	81fb      	strh	r3, [r7, #14]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	81bb      	strh	r3, [r7, #12]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	80fb      	strh	r3, [r7, #6]
  uint32_t count = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  if(y>15) return 0;
 8000ba6:	89bb      	ldrh	r3, [r7, #12]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	d927      	bls.n	8000bfc <ST7735_DrawString+0x70>
 8000bac:	2300      	movs	r3, #0
 8000bae:	e02a      	b.n	8000c06 <ST7735_DrawString+0x7a>
  while(*pt){
    ST7735_DrawCharS(x*6, y*10, *pt, textColor, ST7735_BLACK, 1);
 8000bb0:	89fb      	ldrh	r3, [r7, #14]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	0052      	lsls	r2, r2, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	b218      	sxth	r0, r3
 8000bbe:	89bb      	ldrh	r3, [r7, #12]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	0092      	lsls	r2, r2, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	b219      	sxth	r1, r3
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	781a      	ldrb	r2, [r3, #0]
 8000bd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd4:	2401      	movs	r4, #1
 8000bd6:	9401      	str	r4, [sp, #4]
 8000bd8:	2400      	movs	r4, #0
 8000bda:	9400      	str	r4, [sp, #0]
 8000bdc:	f000 f818 	bl	8000c10 <ST7735_DrawCharS>
    pt++;
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	3301      	adds	r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
    x = x+1;
 8000be6:	89fb      	ldrh	r3, [r7, #14]
 8000be8:	3301      	adds	r3, #1
 8000bea:	81fb      	strh	r3, [r7, #14]
    if(x>20) return count;  // number of characters printed
 8000bec:	89fb      	ldrh	r3, [r7, #14]
 8000bee:	2b14      	cmp	r3, #20
 8000bf0:	d901      	bls.n	8000bf6 <ST7735_DrawString+0x6a>
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	e007      	b.n	8000c06 <ST7735_DrawString+0x7a>
    count++;
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
  while(*pt){
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1d5      	bne.n	8000bb0 <ST7735_DrawString+0x24>
  }
  return count;  // number of characters printed
 8000c04:	697b      	ldr	r3, [r7, #20]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	371c      	adds	r7, #28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd90      	pop	{r4, r7, pc}
	...

08000c10 <ST7735_DrawCharS>:
void ST7735_DrawCharS(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af02      	add	r7, sp, #8
 8000c16:	4604      	mov	r4, r0
 8000c18:	4608      	mov	r0, r1
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4623      	mov	r3, r4
 8000c20:	80fb      	strh	r3, [r7, #6]
 8000c22:	4603      	mov	r3, r0
 8000c24:	80bb      	strh	r3, [r7, #4]
 8000c26:	460b      	mov	r3, r1
 8000c28:	70fb      	strb	r3, [r7, #3]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	803b      	strh	r3, [r7, #0]
  uint8_t line; 
  int32_t i, j;
  if((x >= ST7735_WIDTH)            || 
 8000c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c32:	2b7f      	cmp	r3, #127	; 0x7f
 8000c34:	f300 80b3 	bgt.w	8000d9e <ST7735_DrawCharS+0x18e>
 8000c38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c3c:	2b9f      	cmp	r3, #159	; 0x9f
 8000c3e:	f300 80ae 	bgt.w	8000d9e <ST7735_DrawCharS+0x18e>
     (y >= ST7735_HEIGHT)           || 
     ((x + 5 * size - 1) < 0) || 
 8000c42:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000c46:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	440b      	add	r3, r1
     (y >= ST7735_HEIGHT)           || 
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f340 80a3 	ble.w	8000d9e <ST7735_DrawCharS+0x18e>
     ((y + 8 * size - 1) < 0))   
 8000c58:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	4413      	add	r3, r2
     ((x + 5 * size - 1) < 0) || 
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f340 809a 	ble.w	8000d9e <ST7735_DrawCharS+0x18e>
    return;
 
  for (i=0; i<6; i++ ) {
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	e091      	b.n	8000d94 <ST7735_DrawCharS+0x184>
    if (i == 5)
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	2b05      	cmp	r3, #5
 8000c74:	d102      	bne.n	8000c7c <ST7735_DrawCharS+0x6c>
      line = 0x0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	75fb      	strb	r3, [r7, #23]
 8000c7a:	e008      	b.n	8000c8e <ST7735_DrawCharS+0x7e>
    else
      line = Font[(c*5)+i];
 8000c7c:	78fa      	ldrb	r2, [r7, #3]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	441a      	add	r2, r3
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a47      	ldr	r2, [pc, #284]	; (8000da8 <ST7735_DrawCharS+0x198>)
 8000c8a:	5cd3      	ldrb	r3, [r2, r3]
 8000c8c:	75fb      	strb	r3, [r7, #23]
    for (j = 0; j<8; j++) {
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	e079      	b.n	8000d88 <ST7735_DrawCharS+0x178>
      if (line & 0x1) {
 8000c94:	7dfb      	ldrb	r3, [r7, #23]
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d034      	beq.n	8000d08 <ST7735_DrawCharS+0xf8>
        if (size == 1) 
 8000c9e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d10e      	bne.n	8000cc4 <ST7735_DrawCharS+0xb4>
          ST7735_DrawPixel(x+i, y+j, textColor);
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	4413      	add	r3, r2
 8000cae:	b298      	uxth	r0, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	88bb      	ldrh	r3, [r7, #4]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	883a      	ldrh	r2, [r7, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f7ff ff25 	bl	8000b0c <ST7735_DrawPixel>
 8000cc2:	e05b      	b.n	8000d7c <ST7735_DrawCharS+0x16c>
        else {  
          ST7735_FillRectangle(x+(i*size), y+(j*size), size, size, textColor);
 8000cc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	fb12 f303 	smulbb	r3, r2, r3
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b298      	uxth	r0, r3
 8000cda:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	fb12 f303 	smulbb	r3, r2, r3
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	88bb      	ldrh	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	b299      	uxth	r1, r3
 8000cf0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000cfa:	b29c      	uxth	r4, r3
 8000cfc:	883b      	ldrh	r3, [r7, #0]
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	4623      	mov	r3, r4
 8000d02:	f000 f853 	bl	8000dac <ST7735_FillRectangle>
 8000d06:	e039      	b.n	8000d7c <ST7735_DrawCharS+0x16c>
        }
      } else if (bgColor != textColor) {
 8000d08:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8000d0c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d033      	beq.n	8000d7c <ST7735_DrawCharS+0x16c>
        if (size == 1) // default size
 8000d14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d10e      	bne.n	8000d3a <ST7735_DrawCharS+0x12a>
          ST7735_DrawPixel(x+i, y+j, bgColor);
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	88fb      	ldrh	r3, [r7, #6]
 8000d22:	4413      	add	r3, r2
 8000d24:	b298      	uxth	r0, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d32:	4619      	mov	r1, r3
 8000d34:	f7ff feea 	bl	8000b0c <ST7735_DrawPixel>
 8000d38:	e020      	b.n	8000d7c <ST7735_DrawCharS+0x16c>
        else {  // big size
         ST7735_FillRectangle(x+i*size, y+j*size, size, size, bgColor);
 8000d3a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	fb12 f303 	smulbb	r3, r2, r3
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b298      	uxth	r0, r3
 8000d50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	fb12 f303 	smulbb	r3, r2, r3
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	88bb      	ldrh	r3, [r7, #4]
 8000d62:	4413      	add	r3, r2
 8000d64:	b299      	uxth	r1, r3
 8000d66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d6a:	b29a      	uxth	r2, r3
 8000d6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d70:	b29c      	uxth	r4, r3
 8000d72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	4623      	mov	r3, r4
 8000d78:	f000 f818 	bl	8000dac <ST7735_FillRectangle>
        }
      }
      line >>= 1;
 8000d7c:	7dfb      	ldrb	r3, [r7, #23]
 8000d7e:	085b      	lsrs	r3, r3, #1
 8000d80:	75fb      	strb	r3, [r7, #23]
    for (j = 0; j<8; j++) {
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	3301      	adds	r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2b07      	cmp	r3, #7
 8000d8c:	dd82      	ble.n	8000c94 <ST7735_DrawCharS+0x84>
  for (i=0; i<6; i++ ) {
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	3301      	adds	r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	2b05      	cmp	r3, #5
 8000d98:	f77f af6a 	ble.w	8000c70 <ST7735_DrawCharS+0x60>
 8000d9c:	e000      	b.n	8000da0 <ST7735_DrawCharS+0x190>
    return;
 8000d9e:	bf00      	nop
    }
  }
}
 8000da0:	371c      	adds	r7, #28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd90      	pop	{r4, r7, pc}
 8000da6:	bf00      	nop
 8000da8:	0800c348 	.word	0x0800c348

08000dac <ST7735_FillRectangle>:
    lcd7735_sendData(lo);
  }
	LCD_CS1;
}
	
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4604      	mov	r4, r0
 8000db4:	4608      	mov	r0, r1
 8000db6:	4611      	mov	r1, r2
 8000db8:	461a      	mov	r2, r3
 8000dba:	4623      	mov	r3, r4
 8000dbc:	80fb      	strh	r3, [r7, #6]
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80bb      	strh	r3, [r7, #4]
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	807b      	strh	r3, [r7, #2]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	2b7f      	cmp	r3, #127	; 0x7f
 8000dce:	d85c      	bhi.n	8000e8a <ST7735_FillRectangle+0xde>
 8000dd0:	88bb      	ldrh	r3, [r7, #4]
 8000dd2:	2b9f      	cmp	r3, #159	; 0x9f
 8000dd4:	d859      	bhi.n	8000e8a <ST7735_FillRectangle+0xde>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000dd6:	88fa      	ldrh	r2, [r7, #6]
 8000dd8:	887b      	ldrh	r3, [r7, #2]
 8000dda:	4413      	add	r3, r2
 8000ddc:	2b80      	cmp	r3, #128	; 0x80
 8000dde:	dd03      	ble.n	8000de8 <ST7735_FillRectangle+0x3c>
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000de6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000de8:	88ba      	ldrh	r2, [r7, #4]
 8000dea:	883b      	ldrh	r3, [r7, #0]
 8000dec:	4413      	add	r3, r2
 8000dee:	2ba0      	cmp	r3, #160	; 0xa0
 8000df0:	dd03      	ble.n	8000dfa <ST7735_FillRectangle+0x4e>
 8000df2:	88bb      	ldrh	r3, [r7, #4]
 8000df4:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8000df8:	803b      	strh	r3, [r7, #0]
 
    LCD_CS0;
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e00:	4824      	ldr	r0, [pc, #144]	; (8000e94 <ST7735_FillRectangle+0xe8>)
 8000e02:	f000 fd5b 	bl	80018bc <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	b2d8      	uxtb	r0, r3
 8000e0a:	88bb      	ldrh	r3, [r7, #4]
 8000e0c:	b2d9      	uxtb	r1, r3
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	887b      	ldrh	r3, [r7, #2]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4413      	add	r3, r2
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	b2dc      	uxtb	r4, r3
 8000e1e:	88bb      	ldrh	r3, [r7, #4]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	883b      	ldrh	r3, [r7, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4413      	add	r3, r2
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	4622      	mov	r2, r4
 8000e30:	f7ff fcee 	bl	8000810 <ST7735_SetAddressWindow>
    LCD_DC1;
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e3a:	4816      	ldr	r0, [pc, #88]	; (8000e94 <ST7735_FillRectangle+0xe8>)
 8000e3c:	f000 fd3e 	bl	80018bc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000e40:	883b      	ldrh	r3, [r7, #0]
 8000e42:	80bb      	strh	r3, [r7, #4]
 8000e44:	e017      	b.n	8000e76 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {            
 8000e46:	887b      	ldrh	r3, [r7, #2]
 8000e48:	80fb      	strh	r3, [r7, #6]
 8000e4a:	e00e      	b.n	8000e6a <ST7735_FillRectangle+0xbe>
					lcd7735_sendData(color>>8);
 8000e4c:	8b3b      	ldrh	r3, [r7, #24]
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 f909 	bl	800106c <lcd7735_sendData>
					lcd7735_sendData(color);
 8000e5a:	8b3b      	ldrh	r3, [r7, #24]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f904 	bl	800106c <lcd7735_sendData>
        for(x = w; x > 0; x--) {            
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	80fb      	strh	r3, [r7, #6]
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1ed      	bne.n	8000e4c <ST7735_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8000e70:	88bb      	ldrh	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	80bb      	strh	r3, [r7, #4]
 8000e76:	88bb      	ldrh	r3, [r7, #4]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1e4      	bne.n	8000e46 <ST7735_FillRectangle+0x9a>
        }
    }
		
		LCD_CS1;  //Unselect
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e82:	4804      	ldr	r0, [pc, #16]	; (8000e94 <ST7735_FillRectangle+0xe8>)
 8000e84:	f000 fd1a 	bl	80018bc <HAL_GPIO_WritePin>
 8000e88:	e000      	b.n	8000e8c <ST7735_FillRectangle+0xe0>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000e8a:	bf00      	nop
}
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd90      	pop	{r4, r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40020400 	.word	0x40020400

08000e98 <ST7735_FillScreen>:
void ST7735_FillScreen(uint16_t color) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	23a0      	movs	r3, #160	; 0xa0
 8000ea8:	2280      	movs	r2, #128	; 0x80
 8000eaa:	2100      	movs	r1, #0
 8000eac:	2000      	movs	r0, #0
 8000eae:	f7ff ff7d 	bl	8000dac <ST7735_FillRectangle>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <ST7735_DrawImage>:
void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4623      	mov	r3, r4
 8000ecc:	80fb      	strh	r3, [r7, #6]
 8000ece:	4603      	mov	r3, r0
 8000ed0:	80bb      	strh	r3, [r7, #4]
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	807b      	strh	r3, [r7, #2]
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	803b      	strh	r3, [r7, #0]
int16_t skipC = 0;                      
 8000eda:	2300      	movs	r3, #0
 8000edc:	82fb      	strh	r3, [r7, #22]
  int16_t originalWidth = w;              
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	81fb      	strh	r3, [r7, #14]
  int i = w*(h - 1);
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	883a      	ldrh	r2, [r7, #0]
 8000ee6:	3a01      	subs	r2, #1
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	613b      	str	r3, [r7, #16]
 
  if((x >= ST7735_WIDTH) || ((y - h + 1) >= ST7735_HEIGHT) || ((x + w) <= 0) || (y < 0)){
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef2:	f200 809c 	bhi.w	800102e <ST7735_DrawImage+0x172>
 8000ef6:	88ba      	ldrh	r2, [r7, #4]
 8000ef8:	883b      	ldrh	r3, [r7, #0]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b9e      	cmp	r3, #158	; 0x9e
 8000efe:	f300 8096 	bgt.w	800102e <ST7735_DrawImage+0x172>
 8000f02:	88fa      	ldrh	r2, [r7, #6]
 8000f04:	887b      	ldrh	r3, [r7, #2]
 8000f06:	4413      	add	r3, r2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f340 8090 	ble.w	800102e <ST7735_DrawImage+0x172>
    return;                             
  }
  if((w > ST7735_WIDTH) || (h > ST7735_HEIGHT)){    
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	2b80      	cmp	r3, #128	; 0x80
 8000f12:	f200 808e 	bhi.w	8001032 <ST7735_DrawImage+0x176>
 8000f16:	883b      	ldrh	r3, [r7, #0]
 8000f18:	2ba0      	cmp	r3, #160	; 0xa0
 8000f1a:	f200 808a 	bhi.w	8001032 <ST7735_DrawImage+0x176>
   
    return;
  }
  if((x + w - 1) >= ST7735_WIDTH){            
 8000f1e:	88fa      	ldrh	r2, [r7, #6]
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	4413      	add	r3, r2
 8000f24:	2b80      	cmp	r3, #128	; 0x80
 8000f26:	dd0a      	ble.n	8000f3e <ST7735_DrawImage+0x82>
    skipC = (x + w) - ST7735_WIDTH;           
 8000f28:	88fa      	ldrh	r2, [r7, #6]
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	3b80      	subs	r3, #128	; 0x80
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	82fb      	strh	r3, [r7, #22]
    w = ST7735_WIDTH - x;
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000f3c:	807b      	strh	r3, [r7, #2]
  }
  if((y - h + 1) < 0){                  
 8000f3e:	88ba      	ldrh	r2, [r7, #4]
 8000f40:	883b      	ldrh	r3, [r7, #0]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	da0d      	bge.n	8000f66 <ST7735_DrawImage+0xaa>
    i = i - (h - y - 1)*originalWidth;  
 8000f4a:	883a      	ldrh	r2, [r7, #0]
 8000f4c:	88bb      	ldrh	r3, [r7, #4]
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	3b01      	subs	r3, #1
 8000f52:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000f56:	fb02 f303 	mul.w	r3, r2, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	613b      	str	r3, [r7, #16]
    h = y + 1;
 8000f60:	88bb      	ldrh	r3, [r7, #4]
 8000f62:	3301      	adds	r3, #1
 8000f64:	803b      	strh	r3, [r7, #0]
    w = w + x;
    skipC = -1*x;                       
    i = i - x;                          
    x = 0;
  }
  if(y >= ST7735_HEIGHT){                     
 8000f66:	88bb      	ldrh	r3, [r7, #4]
 8000f68:	2b9f      	cmp	r3, #159	; 0x9f
 8000f6a:	d907      	bls.n	8000f7c <ST7735_DrawImage+0xc0>
    h = h - (y - ST7735_HEIGHT + 1);
 8000f6c:	883a      	ldrh	r2, [r7, #0]
 8000f6e:	88bb      	ldrh	r3, [r7, #4]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	339f      	adds	r3, #159	; 0x9f
 8000f76:	803b      	strh	r3, [r7, #0]
    y = ST7735_HEIGHT - 1;
 8000f78:	239f      	movs	r3, #159	; 0x9f
 8000f7a:	80bb      	strh	r3, [r7, #4]
  }
	
	LCD_CS0;  //Select
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f82:	482e      	ldr	r0, [pc, #184]	; (800103c <ST7735_DrawImage+0x180>)
 8000f84:	f000 fc9a 	bl	80018bc <HAL_GPIO_WritePin>
 
  ST7735_SetAddressWindow(x, y-h+1, x+w-1, y);
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	b2d8      	uxtb	r0, r3
 8000f8c:	88bb      	ldrh	r3, [r7, #4]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	883b      	ldrh	r3, [r7, #0]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b2d9      	uxtb	r1, r3
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4413      	add	r3, r2
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	88bb      	ldrh	r3, [r7, #4]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	f7ff fc2e 	bl	8000810 <ST7735_SetAddressWindow>
 
  for(y=0; y<h; y=y+1){
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	80bb      	strh	r3, [r7, #4]
 8000fb8:	e02e      	b.n	8001018 <ST7735_DrawImage+0x15c>
    for(x=0; x<w; x=x+1){
 8000fba:	2300      	movs	r3, #0
 8000fbc:	80fb      	strh	r3, [r7, #6]
 8000fbe:	e019      	b.n	8000ff4 <ST7735_DrawImage+0x138>
                                        
      lcd7735_sendData((uint8_t)(data[i] >> 8));
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fc6:	4413      	add	r3, r2
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	0a1b      	lsrs	r3, r3, #8
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f000 f84b 	bl	800106c <lcd7735_sendData>
                                        
      lcd7735_sendData((uint8_t)data[i]);
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fdc:	4413      	add	r3, r2
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f842 	bl	800106c <lcd7735_sendData>
      i = i + 1;                       
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	3301      	adds	r3, #1
 8000fec:	613b      	str	r3, [r7, #16]
    for(x=0; x<w; x=x+1){
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	80fb      	strh	r3, [r7, #6]
 8000ff4:	88fa      	ldrh	r2, [r7, #6]
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3e1      	bcc.n	8000fc0 <ST7735_DrawImage+0x104>
    }
    i = i + skipC;
 8000ffc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4413      	add	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
    i = i - 2*originalWidth;
 8001006:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	613b      	str	r3, [r7, #16]
  for(y=0; y<h; y=y+1){
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	3301      	adds	r3, #1
 8001016:	80bb      	strh	r3, [r7, #4]
 8001018:	88ba      	ldrh	r2, [r7, #4]
 800101a:	883b      	ldrh	r3, [r7, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d3cc      	bcc.n	8000fba <ST7735_DrawImage+0xfe>
  }
	LCD_CS1;  //Unselect
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <ST7735_DrawImage+0x180>)
 8001028:	f000 fc48 	bl	80018bc <HAL_GPIO_WritePin>
 800102c:	e002      	b.n	8001034 <ST7735_DrawImage+0x178>
    return;                             
 800102e:	bf00      	nop
 8001030:	e000      	b.n	8001034 <ST7735_DrawImage+0x178>
    return;
 8001032:	bf00      	nop
}
 8001034:	371c      	adds	r7, #28
 8001036:	46bd      	mov	sp, r7
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	bf00      	nop
 800103c:	40020400 	.word	0x40020400

08001040 <lcd7735_sendCmd>:
  //ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
	lcd7735_sendCmd(invert ? ST7735_INVON : ST7735_INVOFF);
  LCD_CS1;  //Unselect
}
 
void lcd7735_sendCmd(uint8_t cmd) {  //uint8_t       //unsigned char
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
   LCD_DC0; //Set DC low
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <lcd7735_sendCmd+0x28>)
 8001052:	f000 fc33 	bl	80018bc <HAL_GPIO_WritePin>
   lcd7735_senddata(cmd);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 f81d 	bl	8001098 <lcd7735_senddata>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40020400 	.word	0x40020400

0800106c <lcd7735_sendData>:
 
 
void lcd7735_sendData(uint8_t data) {  //uint8_t      //unsigned char
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
   LCD_DC1;//Set DC HIGH
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <lcd7735_sendData+0x28>)
 800107e:	f000 fc1d 	bl	80018bc <HAL_GPIO_WritePin>
   lcd7735_senddata(data);
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f807 	bl	8001098 <lcd7735_senddata>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40020400 	.word	0x40020400

08001098 <lcd7735_senddata>:
 
void lcd7735_senddata(uint8_t data) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, &data,sizeof(data),0x1);
 80010a2:	1df9      	adds	r1, r7, #7
 80010a4:	2301      	movs	r3, #1
 80010a6:	2201      	movs	r2, #1
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <lcd7735_senddata+0x20>)
 80010aa:	f001 f942 	bl	8002332 <HAL_SPI_Transmit>
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000028 	.word	0x20000028

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <HAL_MspInit+0x4c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a0f      	ldr	r2, [pc, #60]	; (8001108 <HAL_MspInit+0x4c>)
 80010cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <HAL_MspInit+0x4c>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_MspInit+0x4c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	4a08      	ldr	r2, [pc, #32]	; (8001108 <HAL_MspInit+0x4c>)
 80010e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ec:	6413      	str	r3, [r2, #64]	; 0x40
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_MspInit+0x4c>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010fa:	2007      	movs	r0, #7
 80010fc:	f000 fa26 	bl	800154c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800

0800110c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <NMI_Handler+0x4>

08001112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <HardFault_Handler+0x4>

08001118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <MemManage_Handler+0x4>

0800111e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001122:	e7fe      	b.n	8001122 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <UsageFault_Handler+0x4>

0800112a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001158:	f000 f902 	bl	8001360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <SystemInit+0x20>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <SystemInit+0x20>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 800118a:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <MX_USART2_UART_Init+0x50>)
 800118c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_USART2_UART_Init+0x4c>)
 80011bc:	f001 fac0 	bl	8002740 <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011c6:	f7ff fa9f 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000080 	.word	0x20000080
 80011d4:	40004400 	.word	0x40004400

080011d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a19      	ldr	r2, [pc, #100]	; (800125c <HAL_UART_MspInit+0x84>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d12b      	bne.n	8001252 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_UART_MspInit+0x88>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a17      	ldr	r2, [pc, #92]	; (8001260 <HAL_UART_MspInit+0x88>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_UART_MspInit+0x88>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <HAL_UART_MspInit+0x88>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a10      	ldr	r2, [pc, #64]	; (8001260 <HAL_UART_MspInit+0x88>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_UART_MspInit+0x88>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001232:	230c      	movs	r3, #12
 8001234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001242:	2307      	movs	r3, #7
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_UART_MspInit+0x8c>)
 800124e:	f000 f9b1 	bl	80015b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40004400 	.word	0x40004400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800126e:	490e      	ldr	r1, [pc, #56]	; (80012a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001270:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001274:	e002      	b.n	800127c <LoopCopyDataInit>

08001276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800127a:	3304      	adds	r3, #4

0800127c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800127c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001280:	d3f9      	bcc.n	8001276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001282:	4a0b      	ldr	r2, [pc, #44]	; (80012b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001284:	4c0b      	ldr	r4, [pc, #44]	; (80012b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001288:	e001      	b.n	800128e <LoopFillZerobss>

0800128a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800128a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800128c:	3204      	adds	r2, #4

0800128e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001290:	d3fb      	bcc.n	800128a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001292:	f7ff ff65 	bl	8001160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001296:	f001 fd1d 	bl	8002cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129a:	f7ff f989 	bl	80005b0 <main>
  bx  lr    
 800129e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012ac:	0800c86c 	.word	0x0800c86c
  ldr r2, =_sbss
 80012b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012b4:	200000c8 	.word	0x200000c8

080012b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b8:	e7fe      	b.n	80012b8 <ADC_IRQHandler>
	...

080012bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c0:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_Init+0x40>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <HAL_Init+0x40>)
 80012c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_Init+0x40>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <HAL_Init+0x40>)
 80012d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_Init+0x40>)
 80012de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e4:	2003      	movs	r0, #3
 80012e6:	f000 f931 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f000 f808 	bl	8001300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f0:	f7ff fee4 	bl	80010bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023c00 	.word	0x40023c00

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x54>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x58>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	fbb3 f3f1 	udiv	r3, r3, r1
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f93b 	bl	800159a <HAL_SYSTICK_Config>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e00e      	b.n	800134c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d80a      	bhi.n	800134a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001334:	2200      	movs	r2, #0
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f000 f911 	bl	8001562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <HAL_InitTick+0x5c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000000 	.word	0x20000000
 8001358:	20000008 	.word	0x20000008
 800135c:	20000004 	.word	0x20000004

08001360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x20>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x24>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <HAL_IncTick+0x24>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000008 	.word	0x20000008
 8001384:	200000c4 	.word	0x200000c4

08001388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_GetTick+0x14>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	200000c4 	.word	0x200000c4

080013a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a8:	f7ff ffee 	bl	8001388 <HAL_GetTick>
 80013ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b8:	d005      	beq.n	80013c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_Delay+0x44>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4413      	add	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013c6:	bf00      	nop
 80013c8:	f7ff ffde 	bl	8001388 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d8f7      	bhi.n	80013c8 <HAL_Delay+0x28>
  {
  }
}
 80013d8:	bf00      	nop
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000008 	.word	0x20000008

080013e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001410:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800141a:	4a04      	ldr	r2, [pc, #16]	; (800142c <__NVIC_SetPriorityGrouping+0x44>)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	60d3      	str	r3, [r2, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <__NVIC_GetPriorityGrouping+0x18>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	0a1b      	lsrs	r3, r3, #8
 800143a:	f003 0307 	and.w	r3, r3, #7
}
 800143e:	4618      	mov	r0, r3
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db0a      	blt.n	8001476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	490c      	ldr	r1, [pc, #48]	; (8001498 <__NVIC_SetPriority+0x4c>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	0112      	lsls	r2, r2, #4
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	440b      	add	r3, r1
 8001470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001474:	e00a      	b.n	800148c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4908      	ldr	r1, [pc, #32]	; (800149c <__NVIC_SetPriority+0x50>)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	3b04      	subs	r3, #4
 8001484:	0112      	lsls	r2, r2, #4
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	440b      	add	r3, r1
 800148a:	761a      	strb	r2, [r3, #24]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000e100 	.word	0xe000e100
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f1c3 0307 	rsb	r3, r3, #7
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	bf28      	it	cs
 80014be:	2304      	movcs	r3, #4
 80014c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3304      	adds	r3, #4
 80014c6:	2b06      	cmp	r3, #6
 80014c8:	d902      	bls.n	80014d0 <NVIC_EncodePriority+0x30>
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3b03      	subs	r3, #3
 80014ce:	e000      	b.n	80014d2 <NVIC_EncodePriority+0x32>
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	401a      	ands	r2, r3
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43d9      	mvns	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	4313      	orrs	r3, r2
         );
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3724      	adds	r7, #36	; 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
	...

08001508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001518:	d301      	bcc.n	800151e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800151a:	2301      	movs	r3, #1
 800151c:	e00f      	b.n	800153e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151e:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <SysTick_Config+0x40>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3b01      	subs	r3, #1
 8001524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001526:	210f      	movs	r1, #15
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f7ff ff8e 	bl	800144c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <SysTick_Config+0x40>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <SysTick_Config+0x40>)
 8001538:	2207      	movs	r2, #7
 800153a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f7ff ff47 	bl	80013e8 <__NVIC_SetPriorityGrouping>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
 800156e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001574:	f7ff ff5c 	bl	8001430 <__NVIC_GetPriorityGrouping>
 8001578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68b9      	ldr	r1, [r7, #8]
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff ff8e 	bl	80014a0 <NVIC_EncodePriority>
 8001584:	4602      	mov	r2, r0
 8001586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff5d 	bl	800144c <__NVIC_SetPriority>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffb0 	bl	8001508 <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	e159      	b.n	8001884 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015d0:	2201      	movs	r2, #1
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	f040 8148 	bne.w	800187e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d005      	beq.n	8001606 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001602:	2b02      	cmp	r3, #2
 8001604:	d130      	bne.n	8001668 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2203      	movs	r2, #3
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800163c:	2201      	movs	r2, #1
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	f003 0201 	and.w	r2, r3, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b03      	cmp	r3, #3
 8001672:	d017      	beq.n	80016a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	2203      	movs	r2, #3
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d123      	bne.n	80016f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	08da      	lsrs	r2, r3, #3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3208      	adds	r2, #8
 80016b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f003 0307 	and.w	r3, r3, #7
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	220f      	movs	r2, #15
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	691a      	ldr	r2, [r3, #16]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	08da      	lsrs	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3208      	adds	r2, #8
 80016f2:	69b9      	ldr	r1, [r7, #24]
 80016f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0203 	and.w	r2, r3, #3
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 80a2 	beq.w	800187e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b57      	ldr	r3, [pc, #348]	; (800189c <HAL_GPIO_Init+0x2e8>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	4a56      	ldr	r2, [pc, #344]	; (800189c <HAL_GPIO_Init+0x2e8>)
 8001744:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001748:	6453      	str	r3, [r2, #68]	; 0x44
 800174a:	4b54      	ldr	r3, [pc, #336]	; (800189c <HAL_GPIO_Init+0x2e8>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001756:	4a52      	ldr	r2, [pc, #328]	; (80018a0 <HAL_GPIO_Init+0x2ec>)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	089b      	lsrs	r3, r3, #2
 800175c:	3302      	adds	r3, #2
 800175e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a49      	ldr	r2, [pc, #292]	; (80018a4 <HAL_GPIO_Init+0x2f0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d019      	beq.n	80017b6 <HAL_GPIO_Init+0x202>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a48      	ldr	r2, [pc, #288]	; (80018a8 <HAL_GPIO_Init+0x2f4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_Init+0x1fe>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a47      	ldr	r2, [pc, #284]	; (80018ac <HAL_GPIO_Init+0x2f8>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00d      	beq.n	80017ae <HAL_GPIO_Init+0x1fa>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a46      	ldr	r2, [pc, #280]	; (80018b0 <HAL_GPIO_Init+0x2fc>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d007      	beq.n	80017aa <HAL_GPIO_Init+0x1f6>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a45      	ldr	r2, [pc, #276]	; (80018b4 <HAL_GPIO_Init+0x300>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d101      	bne.n	80017a6 <HAL_GPIO_Init+0x1f2>
 80017a2:	2304      	movs	r3, #4
 80017a4:	e008      	b.n	80017b8 <HAL_GPIO_Init+0x204>
 80017a6:	2307      	movs	r3, #7
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x204>
 80017aa:	2303      	movs	r3, #3
 80017ac:	e004      	b.n	80017b8 <HAL_GPIO_Init+0x204>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e002      	b.n	80017b8 <HAL_GPIO_Init+0x204>
 80017b2:	2301      	movs	r3, #1
 80017b4:	e000      	b.n	80017b8 <HAL_GPIO_Init+0x204>
 80017b6:	2300      	movs	r3, #0
 80017b8:	69fa      	ldr	r2, [r7, #28]
 80017ba:	f002 0203 	and.w	r2, r2, #3
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	4093      	lsls	r3, r2
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c8:	4935      	ldr	r1, [pc, #212]	; (80018a0 <HAL_GPIO_Init+0x2ec>)
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	089b      	lsrs	r3, r3, #2
 80017ce:	3302      	adds	r3, #2
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d6:	4b38      	ldr	r3, [pc, #224]	; (80018b8 <HAL_GPIO_Init+0x304>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	43db      	mvns	r3, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4013      	ands	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017fa:	4a2f      	ldr	r2, [pc, #188]	; (80018b8 <HAL_GPIO_Init+0x304>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001800:	4b2d      	ldr	r3, [pc, #180]	; (80018b8 <HAL_GPIO_Init+0x304>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001824:	4a24      	ldr	r2, [pc, #144]	; (80018b8 <HAL_GPIO_Init+0x304>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HAL_GPIO_Init+0x304>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800184e:	4a1a      	ldr	r2, [pc, #104]	; (80018b8 <HAL_GPIO_Init+0x304>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_GPIO_Init+0x304>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001878:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <HAL_GPIO_Init+0x304>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3301      	adds	r3, #1
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	2b0f      	cmp	r3, #15
 8001888:	f67f aea2 	bls.w	80015d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	40013800 	.word	0x40013800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40013c00 	.word	0x40013c00

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
 80018c8:	4613      	mov	r3, r2
 80018ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018cc:	787b      	ldrb	r3, [r7, #1]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018d8:	e003      	b.n	80018e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018da:	887b      	ldrh	r3, [r7, #2]
 80018dc:	041a      	lsls	r2, r3, #16
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	619a      	str	r2, [r3, #24]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e267      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d075      	beq.n	80019fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800190e:	4b88      	ldr	r3, [pc, #544]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b04      	cmp	r3, #4
 8001918:	d00c      	beq.n	8001934 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800191a:	4b85      	ldr	r3, [pc, #532]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001922:	2b08      	cmp	r3, #8
 8001924:	d112      	bne.n	800194c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001926:	4b82      	ldr	r3, [pc, #520]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001932:	d10b      	bne.n	800194c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001934:	4b7e      	ldr	r3, [pc, #504]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d05b      	beq.n	80019f8 <HAL_RCC_OscConfig+0x108>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d157      	bne.n	80019f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e242      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001954:	d106      	bne.n	8001964 <HAL_RCC_OscConfig+0x74>
 8001956:	4b76      	ldr	r3, [pc, #472]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a75      	ldr	r2, [pc, #468]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 800195c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e01d      	b.n	80019a0 <HAL_RCC_OscConfig+0xb0>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800196c:	d10c      	bne.n	8001988 <HAL_RCC_OscConfig+0x98>
 800196e:	4b70      	ldr	r3, [pc, #448]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a6f      	ldr	r2, [pc, #444]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	4b6d      	ldr	r3, [pc, #436]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a6c      	ldr	r2, [pc, #432]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	e00b      	b.n	80019a0 <HAL_RCC_OscConfig+0xb0>
 8001988:	4b69      	ldr	r3, [pc, #420]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a68      	ldr	r2, [pc, #416]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 800198e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b66      	ldr	r3, [pc, #408]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a65      	ldr	r2, [pc, #404]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 800199a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d013      	beq.n	80019d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff fcee 	bl	8001388 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b0:	f7ff fcea 	bl	8001388 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b64      	cmp	r3, #100	; 0x64
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e207      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	4b5b      	ldr	r3, [pc, #364]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f0      	beq.n	80019b0 <HAL_RCC_OscConfig+0xc0>
 80019ce:	e014      	b.n	80019fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fcda 	bl	8001388 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d8:	f7ff fcd6 	bl	8001388 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e1f3      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ea:	4b51      	ldr	r3, [pc, #324]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0xe8>
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d063      	beq.n	8001ace <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a06:	4b4a      	ldr	r3, [pc, #296]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00b      	beq.n	8001a2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a1a:	2b08      	cmp	r3, #8
 8001a1c:	d11c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1e:	4b44      	ldr	r3, [pc, #272]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d116      	bne.n	8001a58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2a:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d005      	beq.n	8001a42 <HAL_RCC_OscConfig+0x152>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e1c7      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a42:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	4937      	ldr	r1, [pc, #220]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a56:	e03a      	b.n	8001ace <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d020      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a60:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <HAL_RCC_OscConfig+0x244>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a66:	f7ff fc8f 	bl	8001388 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a6e:	f7ff fc8b 	bl	8001388 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e1a8      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a80:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8c:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	4925      	ldr	r1, [pc, #148]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]
 8001aa0:	e015      	b.n	8001ace <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <HAL_RCC_OscConfig+0x244>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fc6e 	bl	8001388 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fc6a 	bl	8001388 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e187      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d036      	beq.n	8001b48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d016      	beq.n	8001b10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_RCC_OscConfig+0x248>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae8:	f7ff fc4e 	bl	8001388 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001af0:	f7ff fc4a 	bl	8001388 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e167      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b02:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_OscConfig+0x240>)
 8001b04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x200>
 8001b0e:	e01b      	b.n	8001b48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b10:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <HAL_RCC_OscConfig+0x248>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fc37 	bl	8001388 <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b1c:	e00e      	b.n	8001b3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b1e:	f7ff fc33 	bl	8001388 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d907      	bls.n	8001b3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e150      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
 8001b30:	40023800 	.word	0x40023800
 8001b34:	42470000 	.word	0x42470000
 8001b38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3c:	4b88      	ldr	r3, [pc, #544]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1ea      	bne.n	8001b1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	f000 8097 	beq.w	8001c84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b5a:	4b81      	ldr	r3, [pc, #516]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10f      	bne.n	8001b86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	4b7d      	ldr	r3, [pc, #500]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	4a7c      	ldr	r2, [pc, #496]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b74:	6413      	str	r3, [r2, #64]	; 0x40
 8001b76:	4b7a      	ldr	r3, [pc, #488]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b82:	2301      	movs	r3, #1
 8001b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b86:	4b77      	ldr	r3, [pc, #476]	; (8001d64 <HAL_RCC_OscConfig+0x474>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d118      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b92:	4b74      	ldr	r3, [pc, #464]	; (8001d64 <HAL_RCC_OscConfig+0x474>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a73      	ldr	r2, [pc, #460]	; (8001d64 <HAL_RCC_OscConfig+0x474>)
 8001b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fbf3 	bl	8001388 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ba6:	f7ff fbef 	bl	8001388 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e10c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb8:	4b6a      	ldr	r3, [pc, #424]	; (8001d64 <HAL_RCC_OscConfig+0x474>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_OscConfig+0x2ea>
 8001bcc:	4b64      	ldr	r3, [pc, #400]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	4a63      	ldr	r2, [pc, #396]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd8:	e01c      	b.n	8001c14 <HAL_RCC_OscConfig+0x324>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b05      	cmp	r3, #5
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x30c>
 8001be2:	4b5f      	ldr	r3, [pc, #380]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	4a5e      	ldr	r2, [pc, #376]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	6713      	str	r3, [r2, #112]	; 0x70
 8001bee:	4b5c      	ldr	r3, [pc, #368]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	4a5b      	ldr	r2, [pc, #364]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfa:	e00b      	b.n	8001c14 <HAL_RCC_OscConfig+0x324>
 8001bfc:	4b58      	ldr	r3, [pc, #352]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c00:	4a57      	ldr	r2, [pc, #348]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	6713      	str	r3, [r2, #112]	; 0x70
 8001c08:	4b55      	ldr	r3, [pc, #340]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	4a54      	ldr	r2, [pc, #336]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001c0e:	f023 0304 	bic.w	r3, r3, #4
 8001c12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d015      	beq.n	8001c48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1c:	f7ff fbb4 	bl	8001388 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c24:	f7ff fbb0 	bl	8001388 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e0cb      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3a:	4b49      	ldr	r3, [pc, #292]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0ee      	beq.n	8001c24 <HAL_RCC_OscConfig+0x334>
 8001c46:	e014      	b.n	8001c72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c48:	f7ff fb9e 	bl	8001388 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c50:	f7ff fb9a 	bl	8001388 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e0b5      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c66:	4b3e      	ldr	r3, [pc, #248]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1ee      	bne.n	8001c50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c72:	7dfb      	ldrb	r3, [r7, #23]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d105      	bne.n	8001c84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c78:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	4a38      	ldr	r2, [pc, #224]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001c7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80a1 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c8e:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d05c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	699b      	ldr	r3, [r3, #24]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d141      	bne.n	8001d26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca2:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <HAL_RCC_OscConfig+0x478>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fb6e 	bl	8001388 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7ff fb6a 	bl	8001388 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e087      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc2:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69da      	ldr	r2, [r3, #28]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	019b      	lsls	r3, r3, #6
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	085b      	lsrs	r3, r3, #1
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	041b      	lsls	r3, r3, #16
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	061b      	lsls	r3, r3, #24
 8001cf2:	491b      	ldr	r1, [pc, #108]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_RCC_OscConfig+0x478>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fb43 	bl	8001388 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d06:	f7ff fb3f 	bl	8001388 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e05c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x416>
 8001d24:	e054      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_RCC_OscConfig+0x478>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fb2c 	bl	8001388 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d34:	f7ff fb28 	bl	8001388 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e045      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_OscConfig+0x470>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x444>
 8001d52:	e03d      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e038      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40007000 	.word	0x40007000
 8001d68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_RCC_OscConfig+0x4ec>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d028      	beq.n	8001dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d121      	bne.n	8001dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d11a      	bne.n	8001dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001da2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d111      	bne.n	8001dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	3b01      	subs	r3, #1
 8001db6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800

08001de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0cc      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b68      	ldr	r3, [pc, #416]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d90c      	bls.n	8001e1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	4b65      	ldr	r3, [pc, #404]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0a:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d001      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0b8      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d020      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e34:	4b59      	ldr	r3, [pc, #356]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4a58      	ldr	r2, [pc, #352]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a52      	ldr	r2, [pc, #328]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	494d      	ldr	r1, [pc, #308]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d044      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7e:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d119      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e07f      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d003      	beq.n	8001e9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d107      	bne.n	8001eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9e:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d109      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e06f      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eae:	4b3b      	ldr	r3, [pc, #236]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e067      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ebe:	4b37      	ldr	r3, [pc, #220]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f023 0203 	bic.w	r2, r3, #3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4934      	ldr	r1, [pc, #208]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed0:	f7ff fa5a 	bl	8001388 <HAL_GetTick>
 8001ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ed8:	f7ff fa56 	bl	8001388 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e04f      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eee:	4b2b      	ldr	r3, [pc, #172]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 020c 	and.w	r2, r3, #12
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d1eb      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d20c      	bcs.n	8001f28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e032      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f34:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4916      	ldr	r1, [pc, #88]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	490e      	ldr	r1, [pc, #56]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f66:	f000 f821 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	490a      	ldr	r1, [pc, #40]	; (8001fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	5ccb      	ldrb	r3, [r1, r3]
 8001f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7e:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff f9ba 	bl	8001300 <HAL_InitTick>

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023c00 	.word	0x40023c00
 8001f9c:	40023800 	.word	0x40023800
 8001fa0:	0800c844 	.word	0x0800c844
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	20000004 	.word	0x20000004

08001fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fb0:	b094      	sub	sp, #80	; 0x50
 8001fb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8001fb8:	2300      	movs	r3, #0
 8001fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fc4:	4b79      	ldr	r3, [pc, #484]	; (80021ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 030c 	and.w	r3, r3, #12
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d00d      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x40>
 8001fd0:	2b08      	cmp	r3, #8
 8001fd2:	f200 80e1 	bhi.w	8002198 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d003      	beq.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fde:	e0db      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fe0:	4b73      	ldr	r3, [pc, #460]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fe2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001fe4:	e0db      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fe6:	4b73      	ldr	r3, [pc, #460]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001fe8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fea:	e0d8      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fec:	4b6f      	ldr	r3, [pc, #444]	; (80021ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ff4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ff6:	4b6d      	ldr	r3, [pc, #436]	; (80021ac <HAL_RCC_GetSysClockFreq+0x200>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d063      	beq.n	80020ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002002:	4b6a      	ldr	r3, [pc, #424]	; (80021ac <HAL_RCC_GetSysClockFreq+0x200>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	099b      	lsrs	r3, r3, #6
 8002008:	2200      	movs	r2, #0
 800200a:	63bb      	str	r3, [r7, #56]	; 0x38
 800200c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800200e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002014:	633b      	str	r3, [r7, #48]	; 0x30
 8002016:	2300      	movs	r3, #0
 8002018:	637b      	str	r3, [r7, #52]	; 0x34
 800201a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800201e:	4622      	mov	r2, r4
 8002020:	462b      	mov	r3, r5
 8002022:	f04f 0000 	mov.w	r0, #0
 8002026:	f04f 0100 	mov.w	r1, #0
 800202a:	0159      	lsls	r1, r3, #5
 800202c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002030:	0150      	lsls	r0, r2, #5
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4621      	mov	r1, r4
 8002038:	1a51      	subs	r1, r2, r1
 800203a:	6139      	str	r1, [r7, #16]
 800203c:	4629      	mov	r1, r5
 800203e:	eb63 0301 	sbc.w	r3, r3, r1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002050:	4659      	mov	r1, fp
 8002052:	018b      	lsls	r3, r1, #6
 8002054:	4651      	mov	r1, sl
 8002056:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800205a:	4651      	mov	r1, sl
 800205c:	018a      	lsls	r2, r1, #6
 800205e:	4651      	mov	r1, sl
 8002060:	ebb2 0801 	subs.w	r8, r2, r1
 8002064:	4659      	mov	r1, fp
 8002066:	eb63 0901 	sbc.w	r9, r3, r1
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002076:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800207a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800207e:	4690      	mov	r8, r2
 8002080:	4699      	mov	r9, r3
 8002082:	4623      	mov	r3, r4
 8002084:	eb18 0303 	adds.w	r3, r8, r3
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	462b      	mov	r3, r5
 800208c:	eb49 0303 	adc.w	r3, r9, r3
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800209e:	4629      	mov	r1, r5
 80020a0:	024b      	lsls	r3, r1, #9
 80020a2:	4621      	mov	r1, r4
 80020a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020a8:	4621      	mov	r1, r4
 80020aa:	024a      	lsls	r2, r1, #9
 80020ac:	4610      	mov	r0, r2
 80020ae:	4619      	mov	r1, r3
 80020b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b2:	2200      	movs	r2, #0
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020bc:	f7fe f88a 	bl	80001d4 <__aeabi_uldivmod>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4613      	mov	r3, r2
 80020c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020c8:	e058      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ca:	4b38      	ldr	r3, [pc, #224]	; (80021ac <HAL_RCC_GetSysClockFreq+0x200>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	099b      	lsrs	r3, r3, #6
 80020d0:	2200      	movs	r2, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	4611      	mov	r1, r2
 80020d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020da:	623b      	str	r3, [r7, #32]
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
 80020e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020e4:	4642      	mov	r2, r8
 80020e6:	464b      	mov	r3, r9
 80020e8:	f04f 0000 	mov.w	r0, #0
 80020ec:	f04f 0100 	mov.w	r1, #0
 80020f0:	0159      	lsls	r1, r3, #5
 80020f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020f6:	0150      	lsls	r0, r2, #5
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4641      	mov	r1, r8
 80020fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002102:	4649      	mov	r1, r9
 8002104:	eb63 0b01 	sbc.w	fp, r3, r1
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002114:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002118:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800211c:	ebb2 040a 	subs.w	r4, r2, sl
 8002120:	eb63 050b 	sbc.w	r5, r3, fp
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	00eb      	lsls	r3, r5, #3
 800212e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002132:	00e2      	lsls	r2, r4, #3
 8002134:	4614      	mov	r4, r2
 8002136:	461d      	mov	r5, r3
 8002138:	4643      	mov	r3, r8
 800213a:	18e3      	adds	r3, r4, r3
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	464b      	mov	r3, r9
 8002140:	eb45 0303 	adc.w	r3, r5, r3
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002152:	4629      	mov	r1, r5
 8002154:	028b      	lsls	r3, r1, #10
 8002156:	4621      	mov	r1, r4
 8002158:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800215c:	4621      	mov	r1, r4
 800215e:	028a      	lsls	r2, r1, #10
 8002160:	4610      	mov	r0, r2
 8002162:	4619      	mov	r1, r3
 8002164:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002166:	2200      	movs	r2, #0
 8002168:	61bb      	str	r3, [r7, #24]
 800216a:	61fa      	str	r2, [r7, #28]
 800216c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002170:	f7fe f830 	bl	80001d4 <__aeabi_uldivmod>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4613      	mov	r3, r2
 800217a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_GetSysClockFreq+0x200>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	0c1b      	lsrs	r3, r3, #16
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	3301      	adds	r3, #1
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800218c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800218e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002190:	fbb2 f3f3 	udiv	r3, r2, r3
 8002194:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002196:	e002      	b.n	800219e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800219a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800219c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800219e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3750      	adds	r7, #80	; 0x50
 80021a4:	46bd      	mov	sp, r7
 80021a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	00f42400 	.word	0x00f42400
 80021b4:	007a1200 	.word	0x007a1200

080021b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <HAL_RCC_GetHCLKFreq+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000000 	.word	0x20000000

080021d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021d4:	f7ff fff0 	bl	80021b8 <HAL_RCC_GetHCLKFreq>
 80021d8:	4602      	mov	r2, r0
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	0a9b      	lsrs	r3, r3, #10
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	4903      	ldr	r1, [pc, #12]	; (80021f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021e6:	5ccb      	ldrb	r3, [r1, r3]
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40023800 	.word	0x40023800
 80021f4:	0800c854 	.word	0x0800c854

080021f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021fc:	f7ff ffdc 	bl	80021b8 <HAL_RCC_GetHCLKFreq>
 8002200:	4602      	mov	r2, r0
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	0b5b      	lsrs	r3, r3, #13
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	4903      	ldr	r1, [pc, #12]	; (800221c <HAL_RCC_GetPCLK2Freq+0x24>)
 800220e:	5ccb      	ldrb	r3, [r1, r3]
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002214:	4618      	mov	r0, r3
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40023800 	.word	0x40023800
 800221c:	0800c854 	.word	0x0800c854

08002220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e07b      	b.n	800232a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	2b00      	cmp	r3, #0
 8002238:	d108      	bne.n	800224c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002242:	d009      	beq.n	8002258 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
 800224a:	e005      	b.n	8002258 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fa84 	bl	8000780 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800228e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022dc:	ea42 0103 	orr.w	r1, r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	f003 0104 	and.w	r1, r3, #4
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	f003 0210 	and.w	r2, r3, #16
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	69da      	ldr	r2, [r3, #28]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002318:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b088      	sub	sp, #32
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_SPI_Transmit+0x22>
 8002350:	2302      	movs	r3, #2
 8002352:	e126      	b.n	80025a2 <HAL_SPI_Transmit+0x270>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800235c:	f7ff f814 	bl	8001388 <HAL_GetTick>
 8002360:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b01      	cmp	r3, #1
 8002370:	d002      	beq.n	8002378 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002372:	2302      	movs	r3, #2
 8002374:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002376:	e10b      	b.n	8002590 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_SPI_Transmit+0x52>
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002388:	e102      	b.n	8002590 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2203      	movs	r2, #3
 800238e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	88fa      	ldrh	r2, [r7, #6]
 80023a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	88fa      	ldrh	r2, [r7, #6]
 80023a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023d0:	d10f      	bne.n	80023f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fc:	2b40      	cmp	r3, #64	; 0x40
 80023fe:	d007      	beq.n	8002410 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800240e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002418:	d14b      	bne.n	80024b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <HAL_SPI_Transmit+0xf6>
 8002422:	8afb      	ldrh	r3, [r7, #22]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d13e      	bne.n	80024a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	881a      	ldrh	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	1c9a      	adds	r2, r3, #2
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800244c:	e02b      	b.n	80024a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b02      	cmp	r3, #2
 800245a:	d112      	bne.n	8002482 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	881a      	ldrh	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	1c9a      	adds	r2, r3, #2
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002476:	b29b      	uxth	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002480:	e011      	b.n	80024a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002482:	f7fe ff81 	bl	8001388 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d803      	bhi.n	800249a <HAL_SPI_Transmit+0x168>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002498:	d102      	bne.n	80024a0 <HAL_SPI_Transmit+0x16e>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024a4:	e074      	b.n	8002590 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ce      	bne.n	800244e <HAL_SPI_Transmit+0x11c>
 80024b0:	e04c      	b.n	800254c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <HAL_SPI_Transmit+0x18e>
 80024ba:	8afb      	ldrh	r3, [r7, #22]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d140      	bne.n	8002542 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	330c      	adds	r3, #12
 80024ca:	7812      	ldrb	r2, [r2, #0]
 80024cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024dc:	b29b      	uxth	r3, r3
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024e6:	e02c      	b.n	8002542 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d113      	bne.n	800251e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	330c      	adds	r3, #12
 8002500:	7812      	ldrb	r2, [r2, #0]
 8002502:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	86da      	strh	r2, [r3, #54]	; 0x36
 800251c:	e011      	b.n	8002542 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800251e:	f7fe ff33 	bl	8001388 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d803      	bhi.n	8002536 <HAL_SPI_Transmit+0x204>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d102      	bne.n	800253c <HAL_SPI_Transmit+0x20a>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d102      	bne.n	8002542 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002540:	e026      	b.n	8002590 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1cd      	bne.n	80024e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	6839      	ldr	r1, [r7, #0]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f8b3 	bl	80026bc <SPI_EndRxTxTransaction>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10a      	bne.n	8002580 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	77fb      	strb	r3, [r7, #31]
 800258c:	e000      	b.n	8002590 <HAL_SPI_Transmit+0x25e>
  }

error:
 800258e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3720      	adds	r7, #32
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	4613      	mov	r3, r2
 80025ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025bc:	f7fe fee4 	bl	8001388 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025cc:	f7fe fedc 	bl	8001388 <HAL_GetTick>
 80025d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025d2:	4b39      	ldr	r3, [pc, #228]	; (80026b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	015b      	lsls	r3, r3, #5
 80025d8:	0d1b      	lsrs	r3, r3, #20
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	fb02 f303 	mul.w	r3, r2, r3
 80025e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025e2:	e054      	b.n	800268e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ea:	d050      	beq.n	800268e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025ec:	f7fe fecc 	bl	8001388 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	69fa      	ldr	r2, [r7, #28]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d902      	bls.n	8002602 <SPI_WaitFlagStateUntilTimeout+0x56>
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d13d      	bne.n	800267e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002610:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800261a:	d111      	bne.n	8002640 <SPI_WaitFlagStateUntilTimeout+0x94>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002624:	d004      	beq.n	8002630 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800262e:	d107      	bne.n	8002640 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800263e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002648:	d10f      	bne.n	800266a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002668:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e017      	b.n	80026ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	3b01      	subs	r3, #1
 800268c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4013      	ands	r3, r2
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	429a      	cmp	r2, r3
 800269c:	bf0c      	ite	eq
 800269e:	2301      	moveq	r3, #1
 80026a0:	2300      	movne	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d19b      	bne.n	80025e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3720      	adds	r7, #32
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000

080026bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <SPI_EndRxTxTransaction+0x7c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1b      	ldr	r2, [pc, #108]	; (800273c <SPI_EndRxTxTransaction+0x80>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	0d5b      	lsrs	r3, r3, #21
 80026d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
 80026dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026e6:	d112      	bne.n	800270e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2200      	movs	r2, #0
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7ff ff5a 	bl	80025ac <SPI_WaitFlagStateUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d016      	beq.n	800272c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f043 0220 	orr.w	r2, r3, #32
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e00f      	b.n	800272e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3b01      	subs	r3, #1
 8002718:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002724:	2b80      	cmp	r3, #128	; 0x80
 8002726:	d0f2      	beq.n	800270e <SPI_EndRxTxTransaction+0x52>
 8002728:	e000      	b.n	800272c <SPI_EndRxTxTransaction+0x70>
        break;
 800272a:	bf00      	nop
  }

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000000 	.word	0x20000000
 800273c:	165e9f81 	.word	0x165e9f81

08002740 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e03f      	b.n	80027d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fd36 	bl	80011d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2224      	movs	r2, #36	; 0x24
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002782:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f829 	bl	80027dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002798:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695a      	ldr	r2, [r3, #20]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68da      	ldr	r2, [r3, #12]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e0:	b0c0      	sub	sp, #256	; 0x100
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80027f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f8:	68d9      	ldr	r1, [r3, #12]
 80027fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	ea40 0301 	orr.w	r3, r0, r1
 8002804:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	431a      	orrs	r2, r3
 8002814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	431a      	orrs	r2, r3
 800281c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002834:	f021 010c 	bic.w	r1, r1, #12
 8002838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002842:	430b      	orrs	r3, r1
 8002844:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002856:	6999      	ldr	r1, [r3, #24]
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	ea40 0301 	orr.w	r3, r0, r1
 8002862:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	4b8f      	ldr	r3, [pc, #572]	; (8002aa8 <UART_SetConfig+0x2cc>)
 800286c:	429a      	cmp	r2, r3
 800286e:	d005      	beq.n	800287c <UART_SetConfig+0xa0>
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4b8d      	ldr	r3, [pc, #564]	; (8002aac <UART_SetConfig+0x2d0>)
 8002878:	429a      	cmp	r2, r3
 800287a:	d104      	bne.n	8002886 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800287c:	f7ff fcbc 	bl	80021f8 <HAL_RCC_GetPCLK2Freq>
 8002880:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002884:	e003      	b.n	800288e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002886:	f7ff fca3 	bl	80021d0 <HAL_RCC_GetPCLK1Freq>
 800288a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800288e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002898:	f040 810c 	bne.w	8002ab4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800289c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028a0:	2200      	movs	r2, #0
 80028a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80028aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80028ae:	4622      	mov	r2, r4
 80028b0:	462b      	mov	r3, r5
 80028b2:	1891      	adds	r1, r2, r2
 80028b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80028b6:	415b      	adcs	r3, r3
 80028b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028be:	4621      	mov	r1, r4
 80028c0:	eb12 0801 	adds.w	r8, r2, r1
 80028c4:	4629      	mov	r1, r5
 80028c6:	eb43 0901 	adc.w	r9, r3, r1
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028de:	4690      	mov	r8, r2
 80028e0:	4699      	mov	r9, r3
 80028e2:	4623      	mov	r3, r4
 80028e4:	eb18 0303 	adds.w	r3, r8, r3
 80028e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028ec:	462b      	mov	r3, r5
 80028ee:	eb49 0303 	adc.w	r3, r9, r3
 80028f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002902:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002906:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800290a:	460b      	mov	r3, r1
 800290c:	18db      	adds	r3, r3, r3
 800290e:	653b      	str	r3, [r7, #80]	; 0x50
 8002910:	4613      	mov	r3, r2
 8002912:	eb42 0303 	adc.w	r3, r2, r3
 8002916:	657b      	str	r3, [r7, #84]	; 0x54
 8002918:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800291c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002920:	f7fd fc58 	bl	80001d4 <__aeabi_uldivmod>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4b61      	ldr	r3, [pc, #388]	; (8002ab0 <UART_SetConfig+0x2d4>)
 800292a:	fba3 2302 	umull	r2, r3, r3, r2
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	011c      	lsls	r4, r3, #4
 8002932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002936:	2200      	movs	r2, #0
 8002938:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800293c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002940:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002944:	4642      	mov	r2, r8
 8002946:	464b      	mov	r3, r9
 8002948:	1891      	adds	r1, r2, r2
 800294a:	64b9      	str	r1, [r7, #72]	; 0x48
 800294c:	415b      	adcs	r3, r3
 800294e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002950:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002954:	4641      	mov	r1, r8
 8002956:	eb12 0a01 	adds.w	sl, r2, r1
 800295a:	4649      	mov	r1, r9
 800295c:	eb43 0b01 	adc.w	fp, r3, r1
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800296c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002974:	4692      	mov	sl, r2
 8002976:	469b      	mov	fp, r3
 8002978:	4643      	mov	r3, r8
 800297a:	eb1a 0303 	adds.w	r3, sl, r3
 800297e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002982:	464b      	mov	r3, r9
 8002984:	eb4b 0303 	adc.w	r3, fp, r3
 8002988:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002998:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800299c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80029a0:	460b      	mov	r3, r1
 80029a2:	18db      	adds	r3, r3, r3
 80029a4:	643b      	str	r3, [r7, #64]	; 0x40
 80029a6:	4613      	mov	r3, r2
 80029a8:	eb42 0303 	adc.w	r3, r2, r3
 80029ac:	647b      	str	r3, [r7, #68]	; 0x44
 80029ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80029b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80029b6:	f7fd fc0d 	bl	80001d4 <__aeabi_uldivmod>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4611      	mov	r1, r2
 80029c0:	4b3b      	ldr	r3, [pc, #236]	; (8002ab0 <UART_SetConfig+0x2d4>)
 80029c2:	fba3 2301 	umull	r2, r3, r3, r1
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2264      	movs	r2, #100	; 0x64
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
 80029ce:	1acb      	subs	r3, r1, r3
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80029d6:	4b36      	ldr	r3, [pc, #216]	; (8002ab0 <UART_SetConfig+0x2d4>)
 80029d8:	fba3 2302 	umull	r2, r3, r3, r2
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029e4:	441c      	add	r4, r3
 80029e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029ea:	2200      	movs	r2, #0
 80029ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80029f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80029f8:	4642      	mov	r2, r8
 80029fa:	464b      	mov	r3, r9
 80029fc:	1891      	adds	r1, r2, r2
 80029fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a00:	415b      	adcs	r3, r3
 8002a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a08:	4641      	mov	r1, r8
 8002a0a:	1851      	adds	r1, r2, r1
 8002a0c:	6339      	str	r1, [r7, #48]	; 0x30
 8002a0e:	4649      	mov	r1, r9
 8002a10:	414b      	adcs	r3, r1
 8002a12:	637b      	str	r3, [r7, #52]	; 0x34
 8002a14:	f04f 0200 	mov.w	r2, #0
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a20:	4659      	mov	r1, fp
 8002a22:	00cb      	lsls	r3, r1, #3
 8002a24:	4651      	mov	r1, sl
 8002a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a2a:	4651      	mov	r1, sl
 8002a2c:	00ca      	lsls	r2, r1, #3
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	4603      	mov	r3, r0
 8002a34:	4642      	mov	r2, r8
 8002a36:	189b      	adds	r3, r3, r2
 8002a38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a3c:	464b      	mov	r3, r9
 8002a3e:	460a      	mov	r2, r1
 8002a40:	eb42 0303 	adc.w	r3, r2, r3
 8002a44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002a58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	18db      	adds	r3, r3, r3
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a62:	4613      	mov	r3, r2
 8002a64:	eb42 0303 	adc.w	r3, r2, r3
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002a72:	f7fd fbaf 	bl	80001d4 <__aeabi_uldivmod>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <UART_SetConfig+0x2d4>)
 8002a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	2164      	movs	r1, #100	; 0x64
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	3332      	adds	r3, #50	; 0x32
 8002a8e:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <UART_SetConfig+0x2d4>)
 8002a90:	fba2 2303 	umull	r2, r3, r2, r3
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	f003 0207 	and.w	r2, r3, #7
 8002a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4422      	add	r2, r4
 8002aa2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002aa4:	e106      	b.n	8002cb4 <UART_SetConfig+0x4d8>
 8002aa6:	bf00      	nop
 8002aa8:	40011000 	.word	0x40011000
 8002aac:	40011400 	.word	0x40011400
 8002ab0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002abe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002ac2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002ac6:	4642      	mov	r2, r8
 8002ac8:	464b      	mov	r3, r9
 8002aca:	1891      	adds	r1, r2, r2
 8002acc:	6239      	str	r1, [r7, #32]
 8002ace:	415b      	adcs	r3, r3
 8002ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ad6:	4641      	mov	r1, r8
 8002ad8:	1854      	adds	r4, r2, r1
 8002ada:	4649      	mov	r1, r9
 8002adc:	eb43 0501 	adc.w	r5, r3, r1
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	00eb      	lsls	r3, r5, #3
 8002aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aee:	00e2      	lsls	r2, r4, #3
 8002af0:	4614      	mov	r4, r2
 8002af2:	461d      	mov	r5, r3
 8002af4:	4643      	mov	r3, r8
 8002af6:	18e3      	adds	r3, r4, r3
 8002af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002afc:	464b      	mov	r3, r9
 8002afe:	eb45 0303 	adc.w	r3, r5, r3
 8002b02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b22:	4629      	mov	r1, r5
 8002b24:	008b      	lsls	r3, r1, #2
 8002b26:	4621      	mov	r1, r4
 8002b28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	008a      	lsls	r2, r1, #2
 8002b30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b34:	f7fd fb4e 	bl	80001d4 <__aeabi_uldivmod>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4b60      	ldr	r3, [pc, #384]	; (8002cc0 <UART_SetConfig+0x4e4>)
 8002b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	011c      	lsls	r4, r3, #4
 8002b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002b50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002b54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002b58:	4642      	mov	r2, r8
 8002b5a:	464b      	mov	r3, r9
 8002b5c:	1891      	adds	r1, r2, r2
 8002b5e:	61b9      	str	r1, [r7, #24]
 8002b60:	415b      	adcs	r3, r3
 8002b62:	61fb      	str	r3, [r7, #28]
 8002b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b68:	4641      	mov	r1, r8
 8002b6a:	1851      	adds	r1, r2, r1
 8002b6c:	6139      	str	r1, [r7, #16]
 8002b6e:	4649      	mov	r1, r9
 8002b70:	414b      	adcs	r3, r1
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f04f 0300 	mov.w	r3, #0
 8002b7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b80:	4659      	mov	r1, fp
 8002b82:	00cb      	lsls	r3, r1, #3
 8002b84:	4651      	mov	r1, sl
 8002b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b8a:	4651      	mov	r1, sl
 8002b8c:	00ca      	lsls	r2, r1, #3
 8002b8e:	4610      	mov	r0, r2
 8002b90:	4619      	mov	r1, r3
 8002b92:	4603      	mov	r3, r0
 8002b94:	4642      	mov	r2, r8
 8002b96:	189b      	adds	r3, r3, r2
 8002b98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b9c:	464b      	mov	r3, r9
 8002b9e:	460a      	mov	r2, r1
 8002ba0:	eb42 0303 	adc.w	r3, r2, r3
 8002ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002bc0:	4649      	mov	r1, r9
 8002bc2:	008b      	lsls	r3, r1, #2
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bca:	4641      	mov	r1, r8
 8002bcc:	008a      	lsls	r2, r1, #2
 8002bce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002bd2:	f7fd faff 	bl	80001d4 <__aeabi_uldivmod>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <UART_SetConfig+0x4e4>)
 8002bde:	fba3 2301 	umull	r2, r3, r3, r1
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	2264      	movs	r2, #100	; 0x64
 8002be6:	fb02 f303 	mul.w	r3, r2, r3
 8002bea:	1acb      	subs	r3, r1, r3
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	3332      	adds	r3, #50	; 0x32
 8002bf0:	4a33      	ldr	r2, [pc, #204]	; (8002cc0 <UART_SetConfig+0x4e4>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bfc:	441c      	add	r4, r3
 8002bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c02:	2200      	movs	r2, #0
 8002c04:	673b      	str	r3, [r7, #112]	; 0x70
 8002c06:	677a      	str	r2, [r7, #116]	; 0x74
 8002c08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c0c:	4642      	mov	r2, r8
 8002c0e:	464b      	mov	r3, r9
 8002c10:	1891      	adds	r1, r2, r2
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	415b      	adcs	r3, r3
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	1851      	adds	r1, r2, r1
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	4649      	mov	r1, r9
 8002c24:	414b      	adcs	r3, r1
 8002c26:	607b      	str	r3, [r7, #4]
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c34:	4659      	mov	r1, fp
 8002c36:	00cb      	lsls	r3, r1, #3
 8002c38:	4651      	mov	r1, sl
 8002c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c3e:	4651      	mov	r1, sl
 8002c40:	00ca      	lsls	r2, r1, #3
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	4603      	mov	r3, r0
 8002c48:	4642      	mov	r2, r8
 8002c4a:	189b      	adds	r3, r3, r2
 8002c4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c4e:	464b      	mov	r3, r9
 8002c50:	460a      	mov	r2, r1
 8002c52:	eb42 0303 	adc.w	r3, r2, r3
 8002c56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	663b      	str	r3, [r7, #96]	; 0x60
 8002c62:	667a      	str	r2, [r7, #100]	; 0x64
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002c70:	4649      	mov	r1, r9
 8002c72:	008b      	lsls	r3, r1, #2
 8002c74:	4641      	mov	r1, r8
 8002c76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c7a:	4641      	mov	r1, r8
 8002c7c:	008a      	lsls	r2, r1, #2
 8002c7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002c82:	f7fd faa7 	bl	80001d4 <__aeabi_uldivmod>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <UART_SetConfig+0x4e4>)
 8002c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	2164      	movs	r1, #100	; 0x64
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	3332      	adds	r3, #50	; 0x32
 8002c9e:	4a08      	ldr	r2, [pc, #32]	; (8002cc0 <UART_SetConfig+0x4e4>)
 8002ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca4:	095b      	lsrs	r3, r3, #5
 8002ca6:	f003 020f 	and.w	r2, r3, #15
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4422      	add	r2, r4
 8002cb2:	609a      	str	r2, [r3, #8]
}
 8002cb4:	bf00      	nop
 8002cb6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cc0:	51eb851f 	.word	0x51eb851f

08002cc4 <memset>:
 8002cc4:	4402      	add	r2, r0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d100      	bne.n	8002cce <memset+0xa>
 8002ccc:	4770      	bx	lr
 8002cce:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd2:	e7f9      	b.n	8002cc8 <memset+0x4>

08002cd4 <__libc_init_array>:
 8002cd4:	b570      	push	{r4, r5, r6, lr}
 8002cd6:	4d0d      	ldr	r5, [pc, #52]	; (8002d0c <__libc_init_array+0x38>)
 8002cd8:	4c0d      	ldr	r4, [pc, #52]	; (8002d10 <__libc_init_array+0x3c>)
 8002cda:	1b64      	subs	r4, r4, r5
 8002cdc:	10a4      	asrs	r4, r4, #2
 8002cde:	2600      	movs	r6, #0
 8002ce0:	42a6      	cmp	r6, r4
 8002ce2:	d109      	bne.n	8002cf8 <__libc_init_array+0x24>
 8002ce4:	4d0b      	ldr	r5, [pc, #44]	; (8002d14 <__libc_init_array+0x40>)
 8002ce6:	4c0c      	ldr	r4, [pc, #48]	; (8002d18 <__libc_init_array+0x44>)
 8002ce8:	f000 f818 	bl	8002d1c <_init>
 8002cec:	1b64      	subs	r4, r4, r5
 8002cee:	10a4      	asrs	r4, r4, #2
 8002cf0:	2600      	movs	r6, #0
 8002cf2:	42a6      	cmp	r6, r4
 8002cf4:	d105      	bne.n	8002d02 <__libc_init_array+0x2e>
 8002cf6:	bd70      	pop	{r4, r5, r6, pc}
 8002cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cfc:	4798      	blx	r3
 8002cfe:	3601      	adds	r6, #1
 8002d00:	e7ee      	b.n	8002ce0 <__libc_init_array+0xc>
 8002d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d06:	4798      	blx	r3
 8002d08:	3601      	adds	r6, #1
 8002d0a:	e7f2      	b.n	8002cf2 <__libc_init_array+0x1e>
 8002d0c:	0800c864 	.word	0x0800c864
 8002d10:	0800c864 	.word	0x0800c864
 8002d14:	0800c864 	.word	0x0800c864
 8002d18:	0800c868 	.word	0x0800c868

08002d1c <_init>:
 8002d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1e:	bf00      	nop
 8002d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d22:	bc08      	pop	{r3}
 8002d24:	469e      	mov	lr, r3
 8002d26:	4770      	bx	lr

08002d28 <_fini>:
 8002d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2a:	bf00      	nop
 8002d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2e:	bc08      	pop	{r3}
 8002d30:	469e      	mov	lr, r3
 8002d32:	4770      	bx	lr
