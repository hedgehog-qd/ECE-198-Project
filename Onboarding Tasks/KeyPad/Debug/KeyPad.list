
KeyPad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d20  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009b14  08002eb4  08002eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9c8  0800c9c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9c8  0800c9c8  0001c9c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9d0  0800c9d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9d0  0800c9d0  0001c9d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9d4  0800c9d4  0001c9d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800c9d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  0800c9e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  0800c9e4  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009f0b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c8e  00000000  00000000  00029f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008f8  00000000  00000000  0002bc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006dd  00000000  00000000  0002c510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000146fd  00000000  00000000  0002cbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c6a2  00000000  00000000  000412ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000834d6  00000000  00000000  0004d98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002354  00000000  00000000  000d0e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d31b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002e9c 	.word	0x08002e9c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002e9c 	.word	0x08002e9c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	; 0x28
 80004d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]
 80004e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	2300      	movs	r3, #0
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	4b4f      	ldr	r3, [pc, #316]	; (8000628 <MX_GPIO_Init+0x158>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	4a4e      	ldr	r2, [pc, #312]	; (8000628 <MX_GPIO_Init+0x158>)
 80004f0:	f043 0304 	orr.w	r3, r3, #4
 80004f4:	6313      	str	r3, [r2, #48]	; 0x30
 80004f6:	4b4c      	ldr	r3, [pc, #304]	; (8000628 <MX_GPIO_Init+0x158>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	f003 0304 	and.w	r3, r3, #4
 80004fe:	613b      	str	r3, [r7, #16]
 8000500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	4b48      	ldr	r3, [pc, #288]	; (8000628 <MX_GPIO_Init+0x158>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a47      	ldr	r2, [pc, #284]	; (8000628 <MX_GPIO_Init+0x158>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b45      	ldr	r3, [pc, #276]	; (8000628 <MX_GPIO_Init+0x158>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	4b41      	ldr	r3, [pc, #260]	; (8000628 <MX_GPIO_Init+0x158>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a40      	ldr	r2, [pc, #256]	; (8000628 <MX_GPIO_Init+0x158>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b3e      	ldr	r3, [pc, #248]	; (8000628 <MX_GPIO_Init+0x158>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	4b3a      	ldr	r3, [pc, #232]	; (8000628 <MX_GPIO_Init+0x158>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	4a39      	ldr	r2, [pc, #228]	; (8000628 <MX_GPIO_Init+0x158>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6313      	str	r3, [r2, #48]	; 0x30
 800054a:	4b37      	ldr	r3, [pc, #220]	; (8000628 <MX_GPIO_Init+0x158>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2142      	movs	r1, #66	; 0x42
 800055a:	4834      	ldr	r0, [pc, #208]	; (800062c <MX_GPIO_Init+0x15c>)
 800055c:	f001 fa6e 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 519b 	mov.w	r1, #4960	; 0x1360
 8000566:	4832      	ldr	r0, [pc, #200]	; (8000630 <MX_GPIO_Init+0x160>)
 8000568:	f001 fa68 	bl	8001a3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_RS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 8000572:	4830      	ldr	r0, [pc, #192]	; (8000634 <MX_GPIO_Init+0x164>)
 8000574:	f001 fa62 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000578:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800057c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800057e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4619      	mov	r1, r3
 800058e:	4827      	ldr	r0, [pc, #156]	; (800062c <MX_GPIO_Init+0x15c>)
 8000590:	f001 f8b8 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_8;
 8000594:	f240 1325 	movw	r3, #293	; 0x125
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4619      	mov	r1, r3
 80005a8:	4820      	ldr	r0, [pc, #128]	; (800062c <MX_GPIO_Init+0x15c>)
 80005aa:	f001 f8ab 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80005ae:	2342      	movs	r3, #66	; 0x42
 80005b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	4819      	ldr	r0, [pc, #100]	; (800062c <MX_GPIO_Init+0x15c>)
 80005c6:	f001 f89d 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA8 PA9
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
 80005ca:	f44f 539b 	mov.w	r3, #4960	; 0x1360
 80005ce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2300      	movs	r3, #0
 80005da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	4619      	mov	r1, r3
 80005e2:	4813      	ldr	r0, [pc, #76]	; (8000630 <MX_GPIO_Init+0x160>)
 80005e4:	f001 f88e 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_RS_Pin|LCD_CS_Pin;
 80005e8:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	480c      	ldr	r0, [pc, #48]	; (8000634 <MX_GPIO_Init+0x164>)
 8000602:	f001 f87f 	bl	8001704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000606:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	4619      	mov	r1, r3
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_GPIO_Init+0x160>)
 800061c:	f001 f872 	bl	8001704 <HAL_GPIO_Init>

}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	; 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40023800 	.word	0x40023800
 800062c:	40020800 	.word	0x40020800
 8000630:	40020000 	.word	0x40020000
 8000634:	40020400 	.word	0x40020400

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fee5 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f8df 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f7ff ff43 	bl	80004d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064a:	f000 fe43 	bl	80012d4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800064e:	f000 f94b 	bl	80008e8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000652:	f000 f9ff 	bl	8000a54 <ST7735_Init>
  	  ST7735_FillScreen(ST7735_BLACK);
 8000656:	2000      	movs	r0, #0
 8000658:	f000 fcc6 	bl	8000fe8 <ST7735_FillScreen>
  	  ST7735_DrawImage(0,160,120,160,gImage_lzy);
 800065c:	4b66      	ldr	r3, [pc, #408]	; (80007f8 <main+0x1c0>)
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	23a0      	movs	r3, #160	; 0xa0
 8000662:	2278      	movs	r2, #120	; 0x78
 8000664:	21a0      	movs	r1, #160	; 0xa0
 8000666:	2000      	movs	r0, #0
 8000668:	f000 fcd0 	bl	800100c <ST7735_DrawImage>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  int a = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
		//a *= 10;
		//a += read_key_int();
		//char A;
		//sprintf(A, "%d", a);
		//ST7735_DrawCharS(10, 40, A, ST7735_BLACK, ST7735_GREEN,3);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2102      	movs	r1, #2
 8000674:	4861      	ldr	r0, [pc, #388]	; (80007fc <main+0x1c4>)
 8000676:	f001 f9e1 	bl	8001a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000680:	485f      	ldr	r0, [pc, #380]	; (8000800 <main+0x1c8>)
 8000682:	f001 f9db 	bl	8001a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	485c      	ldr	r0, [pc, #368]	; (8000800 <main+0x1c8>)
 800068e:	f001 f9d5 	bl	8001a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000698:	4859      	ldr	r0, [pc, #356]	; (8000800 <main+0x1c8>)
 800069a:	f001 f9cf 	bl	8001a3c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800069e:	2001      	movs	r0, #1
 80006a0:	f000 ff26 	bl	80014f0 <HAL_Delay>

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)){
 80006a4:	2104      	movs	r1, #4
 80006a6:	4855      	ldr	r0, [pc, #340]	; (80007fc <main+0x1c4>)
 80006a8:	f001 f9b0 	bl	8001a0c <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d00a      	beq.n	80006c8 <main+0x90>
			ST7735_DrawCharS(10, 10, '1', ST7735_BLACK, ST7735_GREEN,4);
 80006b2:	2304      	movs	r3, #4
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	2300      	movs	r3, #0
 80006be:	2231      	movs	r2, #49	; 0x31
 80006c0:	210a      	movs	r1, #10
 80006c2:	200a      	movs	r0, #10
 80006c4:	f000 fb4c 	bl	8000d60 <ST7735_DrawCharS>

		}
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)){
 80006c8:	2101      	movs	r1, #1
 80006ca:	484c      	ldr	r0, [pc, #304]	; (80007fc <main+0x1c4>)
 80006cc:	f001 f99e 	bl	8001a0c <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00a      	beq.n	80006ec <main+0xb4>

			ST7735_DrawCharS(10, 10, '2', ST7735_BLACK, ST7735_GREEN,4);
 80006d6:	2304      	movs	r3, #4
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2300      	movs	r3, #0
 80006e2:	2232      	movs	r2, #50	; 0x32
 80006e4:	210a      	movs	r1, #10
 80006e6:	200a      	movs	r0, #10
 80006e8:	f000 fb3a 	bl	8000d60 <ST7735_DrawCharS>

		}
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)){
 80006ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f0:	4843      	ldr	r0, [pc, #268]	; (8000800 <main+0x1c8>)
 80006f2:	f001 f98b 	bl	8001a0c <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00a      	beq.n	8000712 <main+0xda>

			ST7735_DrawCharS(10, 10, '3', ST7735_BLACK, ST7735_GREEN,4);
 80006fc:	2304      	movs	r3, #4
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2300      	movs	r3, #0
 8000708:	2233      	movs	r2, #51	; 0x33
 800070a:	210a      	movs	r1, #10
 800070c:	200a      	movs	r0, #10
 800070e:	f000 fb27 	bl	8000d60 <ST7735_DrawCharS>

		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2104      	movs	r1, #4
 8000716:	4839      	ldr	r0, [pc, #228]	; (80007fc <main+0x1c4>)
 8000718:	f001 f990 	bl	8001a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	2101      	movs	r1, #1
 8000720:	4836      	ldr	r0, [pc, #216]	; (80007fc <main+0x1c4>)
 8000722:	f001 f98b 	bl	8001a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800072c:	4834      	ldr	r0, [pc, #208]	; (8000800 <main+0x1c8>)
 800072e:	f001 f985 	bl	8001a3c <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2102      	movs	r1, #2
 8000736:	4831      	ldr	r0, [pc, #196]	; (80007fc <main+0x1c4>)
 8000738:	f001 f980 	bl	8001a3c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000742:	482f      	ldr	r0, [pc, #188]	; (8000800 <main+0x1c8>)
 8000744:	f001 f97a 	bl	8001a3c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	482c      	ldr	r0, [pc, #176]	; (8000800 <main+0x1c8>)
 8000750:	f001 f974 	bl	8001a3c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800075a:	4829      	ldr	r0, [pc, #164]	; (8000800 <main+0x1c8>)
 800075c:	f001 f96e 	bl	8001a3c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f000 fec5 	bl	80014f0 <HAL_Delay>

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)){
 8000766:	2104      	movs	r1, #4
 8000768:	4824      	ldr	r0, [pc, #144]	; (80007fc <main+0x1c4>)
 800076a:	f001 f94f 	bl	8001a0c <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00a      	beq.n	800078a <main+0x152>
					ST7735_DrawCharS(10, 10, '4', ST7735_BLACK, ST7735_GREEN,4);
 8000774:	2304      	movs	r3, #4
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2300      	movs	r3, #0
 8000780:	2234      	movs	r2, #52	; 0x34
 8000782:	210a      	movs	r1, #10
 8000784:	200a      	movs	r0, #10
 8000786:	f000 faeb 	bl	8000d60 <ST7735_DrawCharS>

				}
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)){
 800078a:	2101      	movs	r1, #1
 800078c:	481b      	ldr	r0, [pc, #108]	; (80007fc <main+0x1c4>)
 800078e:	f001 f93d 	bl	8001a0c <HAL_GPIO_ReadPin>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d00a      	beq.n	80007ae <main+0x176>

					ST7735_DrawCharS(10, 10, '5', ST7735_BLACK, ST7735_GREEN,4);
 8000798:	2304      	movs	r3, #4
 800079a:	9301      	str	r3, [sp, #4]
 800079c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	2300      	movs	r3, #0
 80007a4:	2235      	movs	r2, #53	; 0x35
 80007a6:	210a      	movs	r1, #10
 80007a8:	200a      	movs	r0, #10
 80007aa:	f000 fad9 	bl	8000d60 <ST7735_DrawCharS>

				}
				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11)){
 80007ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b2:	4813      	ldr	r0, [pc, #76]	; (8000800 <main+0x1c8>)
 80007b4:	f001 f92a 	bl	8001a0c <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00a      	beq.n	80007d4 <main+0x19c>

					ST7735_DrawCharS(10, 10, '6', ST7735_BLACK, ST7735_GREEN,4);
 80007be:	2304      	movs	r3, #4
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2300      	movs	r3, #0
 80007ca:	2236      	movs	r2, #54	; 0x36
 80007cc:	210a      	movs	r1, #10
 80007ce:	200a      	movs	r0, #10
 80007d0:	f000 fac6 	bl	8000d60 <ST7735_DrawCharS>

				}

				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2104      	movs	r1, #4
 80007d8:	4808      	ldr	r0, [pc, #32]	; (80007fc <main+0x1c4>)
 80007da:	f001 f92f 	bl	8001a3c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2101      	movs	r1, #1
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <main+0x1c4>)
 80007e4:	f001 f92a 	bl	8001a3c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <main+0x1c8>)
 80007f0:	f001 f924 	bl	8001a3c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80007f4:	e73c      	b.n	8000670 <main+0x38>
 80007f6:	bf00      	nop
 80007f8:	08002eb4 	.word	0x08002eb4
 80007fc:	40020800 	.word	0x40020800
 8000800:	40020000 	.word	0x40020000

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	; 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	2230      	movs	r2, #48	; 0x30
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fb16 	bl	8002e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <SystemClock_Config+0xd0>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	4a28      	ldr	r2, [pc, #160]	; (80008d4 <SystemClock_Config+0xd0>)
 8000832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000836:	6413      	str	r3, [r2, #64]	; 0x40
 8000838:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <SystemClock_Config+0xd0>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <SystemClock_Config+0xd4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000850:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <SystemClock_Config+0xd4>)
 8000852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <SystemClock_Config+0xd4>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000864:	2302      	movs	r3, #2
 8000866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000868:	2301      	movs	r3, #1
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800086c:	2310      	movs	r3, #16
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000870:	2302      	movs	r3, #2
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000874:	2300      	movs	r3, #0
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000878:	2310      	movs	r3, #16
 800087a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800087c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000880:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000882:	2304      	movs	r3, #4
 8000884:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000886:	2307      	movs	r3, #7
 8000888:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	4618      	mov	r0, r3
 8000890:	f001 f8ee 	bl	8001a70 <HAL_RCC_OscConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800089a:	f000 f81f 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	230f      	movs	r3, #15
 80008a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2302      	movs	r3, #2
 80008a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2102      	movs	r1, #2
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 fb50 	bl	8001f60 <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008c6:	f000 f809 	bl	80008dc <Error_Handler>
  }
}
 80008ca:	bf00      	nop
 80008cc:	3750      	adds	r7, #80	; 0x50
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40007000 	.word	0x40007000

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <Error_Handler+0x8>
	...

080008e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_SPI1_Init+0x64>)
 80008ee:	4a18      	ldr	r2, [pc, #96]	; (8000950 <MX_SPI1_Init+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008f2:	4b16      	ldr	r3, [pc, #88]	; (800094c <MX_SPI1_Init+0x64>)
 80008f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008fa:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_SPI1_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <MX_SPI1_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_SPI1_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_SPI1_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_SPI1_Init+0x64>)
 8000914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000918:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_SPI1_Init+0x64>)
 800091c:	2220      	movs	r2, #32
 800091e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <MX_SPI1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_SPI1_Init+0x64>)
 8000934:	220a      	movs	r2, #10
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <MX_SPI1_Init+0x64>)
 800093a:	f001 fd31 	bl	80023a0 <HAL_SPI_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000944:	f7ff ffca 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000028 	.word	0x20000028
 8000950:	40013000 	.word	0x40013000

08000954 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <HAL_SPI_MspInit+0x84>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d12b      	bne.n	80009ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <HAL_SPI_MspInit+0x88>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a17      	ldr	r2, [pc, #92]	; (80009dc <HAL_SPI_MspInit+0x88>)
 8000980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_SPI_MspInit+0x88>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_SPI_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a10      	ldr	r2, [pc, #64]	; (80009dc <HAL_SPI_MspInit+0x88>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_SPI_MspInit+0x88>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80009ae:	2328      	movs	r3, #40	; 0x28
 80009b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009be:	2305      	movs	r3, #5
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <HAL_SPI_MspInit+0x8c>)
 80009ca:	f000 fe9b 	bl	8001704 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	; 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40013000 	.word	0x40013000
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020400 	.word	0x40020400

080009e4 <ST7735_SetAddressWindow>:
int32_t Ymax,Ymin,X;        // X goes from 0 to 127
int32_t Yrange; //YrangeDiv2;
int TimeIndex;
uint16_t PlotBGColor;
 
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4604      	mov	r4, r0
 80009ec:	4608      	mov	r0, r1
 80009ee:	4611      	mov	r1, r2
 80009f0:	461a      	mov	r2, r3
 80009f2:	4623      	mov	r3, r4
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	4603      	mov	r3, r0
 80009f8:	71bb      	strb	r3, [r7, #6]
 80009fa:	460b      	mov	r3, r1
 80009fc:	717b      	strb	r3, [r7, #5]
 80009fe:	4613      	mov	r3, r2
 8000a00:	713b      	strb	r3, [r7, #4]
    lcd7735_sendCmd(ST7735_CASET); // Column addr set
 8000a02:	202a      	movs	r0, #42	; 0x2a
 8000a04:	f000 fbc4 	bl	8001190 <lcd7735_sendCmd>
		lcd7735_sendData(0x00);            // XS15 ~ XS8
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f000 fbd7 	bl	80011bc <lcd7735_sendData>
		lcd7735_sendData(x0+ST7735_XSTART);     // XSTART       XS7 ~ XS0
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fbd3 	bl	80011bc <lcd7735_sendData>
		lcd7735_sendData(0x00);            // XE15 ~ XE8
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 fbd0 	bl	80011bc <lcd7735_sendData>
		lcd7735_sendData(x1+ST7735_XSTART);     // XEND         XE7 ~ XE0
 8000a1c:	797b      	ldrb	r3, [r7, #5]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fbcc 	bl	80011bc <lcd7735_sendData>
 
		lcd7735_sendCmd(ST7735_RASET); // Row addr set
 8000a24:	202b      	movs	r0, #43	; 0x2b
 8000a26:	f000 fbb3 	bl	8001190 <lcd7735_sendCmd>
		lcd7735_sendData(0x00);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f000 fbc6 	bl	80011bc <lcd7735_sendData>
		lcd7735_sendData(y0+ST7735_YSTART);     // YSTART
 8000a30:	79bb      	ldrb	r3, [r7, #6]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fbc2 	bl	80011bc <lcd7735_sendData>
		lcd7735_sendData(0x00);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f000 fbbf 	bl	80011bc <lcd7735_sendData>
		lcd7735_sendData(y1+ST7735_YSTART);     // YEND
 8000a3e:	793b      	ldrb	r3, [r7, #4]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fbbb 	bl	80011bc <lcd7735_sendData>
	
		lcd7735_sendCmd(ST7735_RAMWR); 
 8000a46:	202c      	movs	r0, #44	; 0x2c
 8000a48:	f000 fba2 	bl	8001190 <lcd7735_sendCmd>
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd90      	pop	{r4, r7, pc}

08000a54 <ST7735_Init>:
void ST7735_Init() {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
    //ST7735_Select();
	  LCD_CS0;
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a5e:	4810      	ldr	r0, [pc, #64]	; (8000aa0 <ST7735_Init+0x4c>)
 8000a60:	f000 ffec 	bl	8001a3c <HAL_GPIO_WritePin>
    //ST7735_Reset();
	  LCD_RST0;
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <ST7735_Init+0x4c>)
 8000a6c:	f000 ffe6 	bl	8001a3c <HAL_GPIO_WritePin>
		HAL_Delay(7);
 8000a70:	2007      	movs	r0, #7
 8000a72:	f000 fd3d 	bl	80014f0 <HAL_Delay>
		LCD_RST1;
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <ST7735_Init+0x4c>)
 8000a7e:	f000 ffdd 	bl	8001a3c <HAL_GPIO_WritePin>
	
    //ST7735_ExecuteCommandList(init_cmds1);
		ST7735_Init_Command1();
 8000a82:	f000 f80f 	bl	8000aa4 <ST7735_Init_Command1>
    //ST7735_ExecuteCommandList(init_cmds2);
		ST7735_Init_Command2();
 8000a86:	f000 f893 	bl	8000bb0 <ST7735_Init_Command2>
    //ST7735_ExecuteCommandList(init_cmds3);
		ST7735_Init_Command3();
 8000a8a:	f000 f8b3 	bl	8000bf4 <ST7735_Init_Command3>
	
    //ST7735_Unselect();
		LCD_CS1;		
 8000a8e:	2201      	movs	r2, #1
 8000a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a94:	4802      	ldr	r0, [pc, #8]	; (8000aa0 <ST7735_Init+0x4c>)
 8000a96:	f000 ffd1 	bl	8001a3c <HAL_GPIO_WritePin>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <ST7735_Init_Command1>:
 
void ST7735_Init_Command1(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_SWRESET);		//  1: Software reset
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f000 fb71 	bl	8001190 <lcd7735_sendCmd>
	HAL_Delay(150);
 8000aae:	2096      	movs	r0, #150	; 0x96
 8000ab0:	f000 fd1e 	bl	80014f0 <HAL_Delay>
	lcd7735_sendCmd(ST7735_SLPOUT);			//  2: Out of sleep mode
 8000ab4:	2011      	movs	r0, #17
 8000ab6:	f000 fb6b 	bl	8001190 <lcd7735_sendCmd>
	HAL_Delay(500);
 8000aba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000abe:	f000 fd17 	bl	80014f0 <HAL_Delay>
	lcd7735_sendCmd(ST7735_FRMCTR1);		//  3: Frame rate ctrl - normal mode
 8000ac2:	20b1      	movs	r0, #177	; 0xb1
 8000ac4:	f000 fb64 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f000 fb77 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000ace:	202c      	movs	r0, #44	; 0x2c
 8000ad0:	f000 fb74 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000ad4:	202d      	movs	r0, #45	; 0x2d
 8000ad6:	f000 fb71 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR2);		//  4: Frame rate control - idle mode
 8000ada:	20b2      	movs	r0, #178	; 0xb2
 8000adc:	f000 fb58 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//  Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f000 fb6b 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000ae6:	202c      	movs	r0, #44	; 0x2c
 8000ae8:	f000 fb68 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000aec:	202d      	movs	r0, #45	; 0x2d
 8000aee:	f000 fb65 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR3);		//  5: Frame rate ctrl - partial mode
 8000af2:	20b3      	movs	r0, #179	; 0xb3
 8000af4:	f000 fb4c 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//     Dot inversion mode
 8000af8:	2001      	movs	r0, #1
 8000afa:	f000 fb5f 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000afe:	202c      	movs	r0, #44	; 0x2c
 8000b00:	f000 fb5c 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000b04:	202d      	movs	r0, #45	; 0x2d
 8000b06:	f000 fb59 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x01);							//     Line inversion mode
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f000 fb56 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000b10:	202c      	movs	r0, #44	; 0x2c
 8000b12:	f000 fb53 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000b16:	202d      	movs	r0, #45	; 0x2d
 8000b18:	f000 fb50 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_INVCTR);			//  6: Display inversion ctrl
 8000b1c:	20b4      	movs	r0, #180	; 0xb4
 8000b1e:	f000 fb37 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(0x07);							//     No inversion
 8000b22:	2007      	movs	r0, #7
 8000b24:	f000 fb4a 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR1);			//  7: Power control
 8000b28:	20c0      	movs	r0, #192	; 0xc0
 8000b2a:	f000 fb31 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(0xA2);
 8000b2e:	20a2      	movs	r0, #162	; 0xa2
 8000b30:	f000 fb44 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x02);							//     -4.6V
 8000b34:	2002      	movs	r0, #2
 8000b36:	f000 fb41 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x84);							//     AUTO mode
 8000b3a:	2084      	movs	r0, #132	; 0x84
 8000b3c:	f000 fb3e 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR2);			//  8: Power control
 8000b40:	20c1      	movs	r0, #193	; 0xc1
 8000b42:	f000 fb25 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(0xC5);							//     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 8000b46:	20c5      	movs	r0, #197	; 0xc5
 8000b48:	f000 fb38 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR3);			//  9: Power control
 8000b4c:	20c2      	movs	r0, #194	; 0xc2
 8000b4e:	f000 fb1f 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(0x0A);							//     Opamp current small
 8000b52:	200a      	movs	r0, #10
 8000b54:	f000 fb32 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     Boost frequency
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f000 fb2f 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR4);			// 10: Power control
 8000b5e:	20c3      	movs	r0, #195	; 0xc3
 8000b60:	f000 fb16 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);							//     BCLK/2, Opamp current small & Medium low
 8000b64:	208a      	movs	r0, #138	; 0x8a
 8000b66:	f000 fb29 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2A);
 8000b6a:	202a      	movs	r0, #42	; 0x2a
 8000b6c:	f000 fb26 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR5);			// 11: Power control
 8000b70:	20c4      	movs	r0, #196	; 0xc4
 8000b72:	f000 fb0d 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);
 8000b76:	208a      	movs	r0, #138	; 0x8a
 8000b78:	f000 fb20 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0xEE);
 8000b7c:	20ee      	movs	r0, #238	; 0xee
 8000b7e:	f000 fb1d 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_VMCTR1);			// 12: Power control
 8000b82:	20c5      	movs	r0, #197	; 0xc5
 8000b84:	f000 fb04 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(0x0E);
 8000b88:	200e      	movs	r0, #14
 8000b8a:	f000 fb17 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_INVOFF);			// 13: Don't invert display
 8000b8e:	2020      	movs	r0, #32
 8000b90:	f000 fafe 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendCmd(ST7735_MADCTL);			// 14: Memory access control (directions)
 8000b94:	2036      	movs	r0, #54	; 0x36
 8000b96:	f000 fafb 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(ST7735_ROTATION);	//     row addr/col addr, bottom to top refresh
 8000b9a:	20c0      	movs	r0, #192	; 0xc0
 8000b9c:	f000 fb0e 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_COLMOD);			// 15: set color mode
 8000ba0:	203a      	movs	r0, #58	; 0x3a
 8000ba2:	f000 faf5 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(0x05);							//     16-bit color
 8000ba6:	2005      	movs	r0, #5
 8000ba8:	f000 fb08 	bl	80011bc <lcd7735_sendData>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <ST7735_Init_Command2>:
 
void ST7735_Init_Command2(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_CASET);			//  1: Column addr set
 8000bb4:	202a      	movs	r0, #42	; 0x2a
 8000bb6:	f000 faeb 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f000 fafe 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 fafb 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f000 faf8 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 8000bcc:	207f      	movs	r0, #127	; 0x7f
 8000bce:	f000 faf5 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_RASET);			//  2: Row addr set
 8000bd2:	202b      	movs	r0, #43	; 0x2b
 8000bd4:	f000 fadc 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f000 faef 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000bde:	2000      	movs	r0, #0
 8000be0:	f000 faec 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 fae9 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 8000bea:	207f      	movs	r0, #127	; 0x7f
 8000bec:	f000 fae6 	bl	80011bc <lcd7735_sendData>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <ST7735_Init_Command3>:
 
void ST7735_Init_Command3(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_GMCTRP1);  //  1: Magical unicorn dust
 8000bf8:	20e0      	movs	r0, #224	; 0xe0
 8000bfa:	f000 fac9 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(0x02);
 8000bfe:	2002      	movs	r0, #2
 8000c00:	f000 fadc 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x1C);
 8000c04:	201c      	movs	r0, #28
 8000c06:	f000 fad9 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8000c0a:	2007      	movs	r0, #7
 8000c0c:	f000 fad6 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x12);
 8000c10:	2012      	movs	r0, #18
 8000c12:	f000 fad3 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x37);
 8000c16:	2037      	movs	r0, #55	; 0x37
 8000c18:	f000 fad0 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x32);
 8000c1c:	2032      	movs	r0, #50	; 0x32
 8000c1e:	f000 facd 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000c22:	2029      	movs	r0, #41	; 0x29
 8000c24:	f000 faca 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000c28:	202d      	movs	r0, #45	; 0x2d
 8000c2a:	f000 fac7 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000c2e:	2029      	movs	r0, #41	; 0x29
 8000c30:	f000 fac4 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x25);
 8000c34:	2025      	movs	r0, #37	; 0x25
 8000c36:	f000 fac1 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2B);
 8000c3a:	202b      	movs	r0, #43	; 0x2b
 8000c3c:	f000 fabe 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x39);
 8000c40:	2039      	movs	r0, #57	; 0x39
 8000c42:	f000 fabb 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 fab8 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x01);
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	f000 fab5 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x03);
 8000c52:	2003      	movs	r0, #3
 8000c54:	f000 fab2 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x10);
 8000c58:	2010      	movs	r0, #16
 8000c5a:	f000 faaf 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_GMCTRN1);  //  2: Sparkles and rainbows
 8000c5e:	20e1      	movs	r0, #225	; 0xe1
 8000c60:	f000 fa96 	bl	8001190 <lcd7735_sendCmd>
	lcd7735_sendData(0x03);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 faa9 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x1D);
 8000c6a:	201d      	movs	r0, #29
 8000c6c:	f000 faa6 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8000c70:	2007      	movs	r0, #7
 8000c72:	f000 faa3 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x06);
 8000c76:	2006      	movs	r0, #6
 8000c78:	f000 faa0 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000c7c:	202e      	movs	r0, #46	; 0x2e
 8000c7e:	f000 fa9d 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000c82:	202c      	movs	r0, #44	; 0x2c
 8000c84:	f000 fa9a 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000c88:	2029      	movs	r0, #41	; 0x29
 8000c8a:	f000 fa97 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000c8e:	202d      	movs	r0, #45	; 0x2d
 8000c90:	f000 fa94 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000c94:	202e      	movs	r0, #46	; 0x2e
 8000c96:	f000 fa91 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000c9a:	202e      	movs	r0, #46	; 0x2e
 8000c9c:	f000 fa8e 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x37);
 8000ca0:	2037      	movs	r0, #55	; 0x37
 8000ca2:	f000 fa8b 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x3F);
 8000ca6:	203f      	movs	r0, #63	; 0x3f
 8000ca8:	f000 fa88 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000cac:	2000      	movs	r0, #0
 8000cae:	f000 fa85 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 fa82 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x02);
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f000 fa7f 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendData(0x10);
 8000cbe:	2010      	movs	r0, #16
 8000cc0:	f000 fa7c 	bl	80011bc <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_NORON);
 8000cc4:	2013      	movs	r0, #19
 8000cc6:	f000 fa63 	bl	8001190 <lcd7735_sendCmd>
	HAL_Delay(10);
 8000cca:	200a      	movs	r0, #10
 8000ccc:	f000 fc10 	bl	80014f0 <HAL_Delay>
	lcd7735_sendCmd(ST7735_DISPON);
 8000cd0:	2029      	movs	r0, #41	; 0x29
 8000cd2:	f000 fa5d 	bl	8001190 <lcd7735_sendCmd>
	HAL_Delay(100);
 8000cd6:	2064      	movs	r0, #100	; 0x64
 8000cd8:	f000 fc0a 	bl	80014f0 <HAL_Delay>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <ST7735_DrawPixel>:
    TimeIndex = 0;
  }
  ST7735_DrawFastVLine(TimeIndex + 11, 17, 100, PlotBGColor);
}

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	80fb      	strh	r3, [r7, #6]
 8000cea:	460b      	mov	r3, r1
 8000cec:	80bb      	strh	r3, [r7, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cf6:	d82d      	bhi.n	8000d54 <ST7735_DrawPixel+0x74>
 8000cf8:	88bb      	ldrh	r3, [r7, #4]
 8000cfa:	2b9f      	cmp	r3, #159	; 0x9f
 8000cfc:	d82a      	bhi.n	8000d54 <ST7735_DrawPixel+0x74>
        return;
 
    LCD_CS0;
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d04:	4815      	ldr	r0, [pc, #84]	; (8000d5c <ST7735_DrawPixel+0x7c>)
 8000d06:	f000 fe99 	bl	8001a3c <HAL_GPIO_WritePin>
 
    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	b2d8      	uxtb	r0, r3
 8000d0e:	88bb      	ldrh	r3, [r7, #4]
 8000d10:	b2d9      	uxtb	r1, r3
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	3301      	adds	r3, #1
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	88bb      	ldrh	r3, [r7, #4]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	3301      	adds	r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	f7ff fe5f 	bl	80009e4 <ST7735_SetAddressWindow>
    uint8_t data[2];
		data[0] = color >> 8;
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	733b      	strb	r3, [r7, #12]
		data[1] = color & 0xFF;
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	737b      	strb	r3, [r7, #13]
		lcd7735_sendData(data[0]);
 8000d36:	7b3b      	ldrb	r3, [r7, #12]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 fa3f 	bl	80011bc <lcd7735_sendData>
		lcd7735_sendData(data[1]);
 8000d3e:	7b7b      	ldrb	r3, [r7, #13]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fa3b 	bl	80011bc <lcd7735_sendData>
 
    LCD_CS1;  //unselect
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <ST7735_DrawPixel+0x7c>)
 8000d4e:	f000 fe75 	bl	8001a3c <HAL_GPIO_WritePin>
 8000d52:	e000      	b.n	8000d56 <ST7735_DrawPixel+0x76>
        return;
 8000d54:	bf00      	nop
}
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40020400 	.word	0x40020400

08000d60 <ST7735_DrawCharS>:
    if(x>20) return count;  // number of characters printed
    count++;
  }
  return count;  // number of characters printed
}
void ST7735_DrawCharS(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8000d60:	b590      	push	{r4, r7, lr}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af02      	add	r7, sp, #8
 8000d66:	4604      	mov	r4, r0
 8000d68:	4608      	mov	r0, r1
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4623      	mov	r3, r4
 8000d70:	80fb      	strh	r3, [r7, #6]
 8000d72:	4603      	mov	r3, r0
 8000d74:	80bb      	strh	r3, [r7, #4]
 8000d76:	460b      	mov	r3, r1
 8000d78:	70fb      	strb	r3, [r7, #3]
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	803b      	strh	r3, [r7, #0]
  uint8_t line; 
  int32_t i, j;
  if((x >= ST7735_WIDTH)            || 
 8000d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d82:	2b7f      	cmp	r3, #127	; 0x7f
 8000d84:	f300 80b3 	bgt.w	8000eee <ST7735_DrawCharS+0x18e>
 8000d88:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d8c:	2b9f      	cmp	r3, #159	; 0x9f
 8000d8e:	f300 80ae 	bgt.w	8000eee <ST7735_DrawCharS+0x18e>
     (y >= ST7735_HEIGHT)           || 
     ((x + 5 * size - 1) < 0) || 
 8000d92:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000d96:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	440b      	add	r3, r1
     (y >= ST7735_HEIGHT)           || 
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f340 80a3 	ble.w	8000eee <ST7735_DrawCharS+0x18e>
     ((y + 8 * size - 1) < 0))   
 8000da8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000dac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	4413      	add	r3, r2
     ((x + 5 * size - 1) < 0) || 
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f340 809a 	ble.w	8000eee <ST7735_DrawCharS+0x18e>
    return;
 
  for (i=0; i<6; i++ ) {
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	e091      	b.n	8000ee4 <ST7735_DrawCharS+0x184>
    if (i == 5)
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	2b05      	cmp	r3, #5
 8000dc4:	d102      	bne.n	8000dcc <ST7735_DrawCharS+0x6c>
      line = 0x0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	75fb      	strb	r3, [r7, #23]
 8000dca:	e008      	b.n	8000dde <ST7735_DrawCharS+0x7e>
    else
      line = Font[(c*5)+i];
 8000dcc:	78fa      	ldrb	r2, [r7, #3]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	441a      	add	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a47      	ldr	r2, [pc, #284]	; (8000ef8 <ST7735_DrawCharS+0x198>)
 8000dda:	5cd3      	ldrb	r3, [r2, r3]
 8000ddc:	75fb      	strb	r3, [r7, #23]
    for (j = 0; j<8; j++) {
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	e079      	b.n	8000ed8 <ST7735_DrawCharS+0x178>
      if (line & 0x1) {
 8000de4:	7dfb      	ldrb	r3, [r7, #23]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d034      	beq.n	8000e58 <ST7735_DrawCharS+0xf8>
        if (size == 1) 
 8000dee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d10e      	bne.n	8000e14 <ST7735_DrawCharS+0xb4>
          ST7735_DrawPixel(x+i, y+j, textColor);
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b298      	uxth	r0, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	88bb      	ldrh	r3, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	883a      	ldrh	r2, [r7, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f7ff ff67 	bl	8000ce0 <ST7735_DrawPixel>
 8000e12:	e05b      	b.n	8000ecc <ST7735_DrawCharS+0x16c>
        else {  
          ST7735_FillRectangle(x+(i*size), y+(j*size), size, size, textColor);
 8000e14:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	fb12 f303 	smulbb	r3, r2, r3
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	4413      	add	r3, r2
 8000e28:	b298      	uxth	r0, r3
 8000e2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	fb12 f303 	smulbb	r3, r2, r3
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	88bb      	ldrh	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	b299      	uxth	r1, r3
 8000e40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e4a:	b29c      	uxth	r4, r3
 8000e4c:	883b      	ldrh	r3, [r7, #0]
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	4623      	mov	r3, r4
 8000e52:	f000 f853 	bl	8000efc <ST7735_FillRectangle>
 8000e56:	e039      	b.n	8000ecc <ST7735_DrawCharS+0x16c>
        }
      } else if (bgColor != textColor) {
 8000e58:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8000e5c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	d033      	beq.n	8000ecc <ST7735_DrawCharS+0x16c>
        if (size == 1) // default size
 8000e64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d10e      	bne.n	8000e8a <ST7735_DrawCharS+0x12a>
          ST7735_DrawPixel(x+i, y+j, bgColor);
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	4413      	add	r3, r2
 8000e74:	b298      	uxth	r0, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	88bb      	ldrh	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000e82:	4619      	mov	r1, r3
 8000e84:	f7ff ff2c 	bl	8000ce0 <ST7735_DrawPixel>
 8000e88:	e020      	b.n	8000ecc <ST7735_DrawCharS+0x16c>
        else {  // big size
         ST7735_FillRectangle(x+i*size, y+j*size, size, size, bgColor);
 8000e8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	fb12 f303 	smulbb	r3, r2, r3
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b298      	uxth	r0, r3
 8000ea0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	fb12 f303 	smulbb	r3, r2, r3
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b299      	uxth	r1, r3
 8000eb6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ec0:	b29c      	uxth	r4, r3
 8000ec2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000ec4:	9300      	str	r3, [sp, #0]
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	f000 f818 	bl	8000efc <ST7735_FillRectangle>
        }
      }
      line >>= 1;
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
 8000ece:	085b      	lsrs	r3, r3, #1
 8000ed0:	75fb      	strb	r3, [r7, #23]
    for (j = 0; j<8; j++) {
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b07      	cmp	r3, #7
 8000edc:	dd82      	ble.n	8000de4 <ST7735_DrawCharS+0x84>
  for (i=0; i<6; i++ ) {
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	2b05      	cmp	r3, #5
 8000ee8:	f77f af6a 	ble.w	8000dc0 <ST7735_DrawCharS+0x60>
 8000eec:	e000      	b.n	8000ef0 <ST7735_DrawCharS+0x190>
    return;
 8000eee:	bf00      	nop
    }
  }
}
 8000ef0:	371c      	adds	r7, #28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd90      	pop	{r4, r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	0800c4b4 	.word	0x0800c4b4

08000efc <ST7735_FillRectangle>:
    lcd7735_sendData(lo);
  }
	LCD_CS1;
}
	
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4604      	mov	r4, r0
 8000f04:	4608      	mov	r0, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4623      	mov	r3, r4
 8000f0c:	80fb      	strh	r3, [r7, #6]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80bb      	strh	r3, [r7, #4]
 8000f12:	460b      	mov	r3, r1
 8000f14:	807b      	strh	r3, [r7, #2]
 8000f16:	4613      	mov	r3, r2
 8000f18:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f1e:	d85c      	bhi.n	8000fda <ST7735_FillRectangle+0xde>
 8000f20:	88bb      	ldrh	r3, [r7, #4]
 8000f22:	2b9f      	cmp	r3, #159	; 0x9f
 8000f24:	d859      	bhi.n	8000fda <ST7735_FillRectangle+0xde>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000f26:	88fa      	ldrh	r2, [r7, #6]
 8000f28:	887b      	ldrh	r3, [r7, #2]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	2b80      	cmp	r3, #128	; 0x80
 8000f2e:	dd03      	ble.n	8000f38 <ST7735_FillRectangle+0x3c>
 8000f30:	88fb      	ldrh	r3, [r7, #6]
 8000f32:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000f36:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000f38:	88ba      	ldrh	r2, [r7, #4]
 8000f3a:	883b      	ldrh	r3, [r7, #0]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	2ba0      	cmp	r3, #160	; 0xa0
 8000f40:	dd03      	ble.n	8000f4a <ST7735_FillRectangle+0x4e>
 8000f42:	88bb      	ldrh	r3, [r7, #4]
 8000f44:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8000f48:	803b      	strh	r3, [r7, #0]
 
    LCD_CS0;
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f50:	4824      	ldr	r0, [pc, #144]	; (8000fe4 <ST7735_FillRectangle+0xe8>)
 8000f52:	f000 fd73 	bl	8001a3c <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	b2d8      	uxtb	r0, r3
 8000f5a:	88bb      	ldrh	r3, [r7, #4]
 8000f5c:	b2d9      	uxtb	r1, r3
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	887b      	ldrh	r3, [r7, #2]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	4413      	add	r3, r2
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	b2dc      	uxtb	r4, r3
 8000f6e:	88bb      	ldrh	r3, [r7, #4]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	883b      	ldrh	r3, [r7, #0]
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4413      	add	r3, r2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	4622      	mov	r2, r4
 8000f80:	f7ff fd30 	bl	80009e4 <ST7735_SetAddressWindow>
    LCD_DC1;
 8000f84:	2201      	movs	r2, #1
 8000f86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8a:	4816      	ldr	r0, [pc, #88]	; (8000fe4 <ST7735_FillRectangle+0xe8>)
 8000f8c:	f000 fd56 	bl	8001a3c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000f90:	883b      	ldrh	r3, [r7, #0]
 8000f92:	80bb      	strh	r3, [r7, #4]
 8000f94:	e017      	b.n	8000fc6 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {            
 8000f96:	887b      	ldrh	r3, [r7, #2]
 8000f98:	80fb      	strh	r3, [r7, #6]
 8000f9a:	e00e      	b.n	8000fba <ST7735_FillRectangle+0xbe>
					lcd7735_sendData(color>>8);
 8000f9c:	8b3b      	ldrh	r3, [r7, #24]
 8000f9e:	0a1b      	lsrs	r3, r3, #8
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 f909 	bl	80011bc <lcd7735_sendData>
					lcd7735_sendData(color);
 8000faa:	8b3b      	ldrh	r3, [r7, #24]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f904 	bl	80011bc <lcd7735_sendData>
        for(x = w; x > 0; x--) {            
 8000fb4:	88fb      	ldrh	r3, [r7, #6]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	80fb      	strh	r3, [r7, #6]
 8000fba:	88fb      	ldrh	r3, [r7, #6]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1ed      	bne.n	8000f9c <ST7735_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8000fc0:	88bb      	ldrh	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	80bb      	strh	r3, [r7, #4]
 8000fc6:	88bb      	ldrh	r3, [r7, #4]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1e4      	bne.n	8000f96 <ST7735_FillRectangle+0x9a>
        }
    }
		
		LCD_CS1;  //Unselect
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd2:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <ST7735_FillRectangle+0xe8>)
 8000fd4:	f000 fd32 	bl	8001a3c <HAL_GPIO_WritePin>
 8000fd8:	e000      	b.n	8000fdc <ST7735_FillRectangle+0xe0>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000fda:	bf00      	nop
}
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd90      	pop	{r4, r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40020400 	.word	0x40020400

08000fe8 <ST7735_FillScreen>:
void ST7735_FillScreen(uint16_t color) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	23a0      	movs	r3, #160	; 0xa0
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f7ff ff7d 	bl	8000efc <ST7735_FillRectangle>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <ST7735_DrawImage>:
void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	4604      	mov	r4, r0
 8001014:	4608      	mov	r0, r1
 8001016:	4611      	mov	r1, r2
 8001018:	461a      	mov	r2, r3
 800101a:	4623      	mov	r3, r4
 800101c:	80fb      	strh	r3, [r7, #6]
 800101e:	4603      	mov	r3, r0
 8001020:	80bb      	strh	r3, [r7, #4]
 8001022:	460b      	mov	r3, r1
 8001024:	807b      	strh	r3, [r7, #2]
 8001026:	4613      	mov	r3, r2
 8001028:	803b      	strh	r3, [r7, #0]
int16_t skipC = 0;                      
 800102a:	2300      	movs	r3, #0
 800102c:	82fb      	strh	r3, [r7, #22]
  int16_t originalWidth = w;              
 800102e:	887b      	ldrh	r3, [r7, #2]
 8001030:	81fb      	strh	r3, [r7, #14]
  int i = w*(h - 1);
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	883a      	ldrh	r2, [r7, #0]
 8001036:	3a01      	subs	r2, #1
 8001038:	fb02 f303 	mul.w	r3, r2, r3
 800103c:	613b      	str	r3, [r7, #16]
 
  if((x >= ST7735_WIDTH) || ((y - h + 1) >= ST7735_HEIGHT) || ((x + w) <= 0) || (y < 0)){
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	2b7f      	cmp	r3, #127	; 0x7f
 8001042:	f200 809c 	bhi.w	800117e <ST7735_DrawImage+0x172>
 8001046:	88ba      	ldrh	r2, [r7, #4]
 8001048:	883b      	ldrh	r3, [r7, #0]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b9e      	cmp	r3, #158	; 0x9e
 800104e:	f300 8096 	bgt.w	800117e <ST7735_DrawImage+0x172>
 8001052:	88fa      	ldrh	r2, [r7, #6]
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	4413      	add	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	f340 8090 	ble.w	800117e <ST7735_DrawImage+0x172>
    return;                             
  }
  if((w > ST7735_WIDTH) || (h > ST7735_HEIGHT)){    
 800105e:	887b      	ldrh	r3, [r7, #2]
 8001060:	2b80      	cmp	r3, #128	; 0x80
 8001062:	f200 808e 	bhi.w	8001182 <ST7735_DrawImage+0x176>
 8001066:	883b      	ldrh	r3, [r7, #0]
 8001068:	2ba0      	cmp	r3, #160	; 0xa0
 800106a:	f200 808a 	bhi.w	8001182 <ST7735_DrawImage+0x176>
   
    return;
  }
  if((x + w - 1) >= ST7735_WIDTH){            
 800106e:	88fa      	ldrh	r2, [r7, #6]
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	4413      	add	r3, r2
 8001074:	2b80      	cmp	r3, #128	; 0x80
 8001076:	dd0a      	ble.n	800108e <ST7735_DrawImage+0x82>
    skipC = (x + w) - ST7735_WIDTH;           
 8001078:	88fa      	ldrh	r2, [r7, #6]
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	4413      	add	r3, r2
 800107e:	b29b      	uxth	r3, r3
 8001080:	3b80      	subs	r3, #128	; 0x80
 8001082:	b29b      	uxth	r3, r3
 8001084:	82fb      	strh	r3, [r7, #22]
    w = ST7735_WIDTH - x;
 8001086:	88fb      	ldrh	r3, [r7, #6]
 8001088:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800108c:	807b      	strh	r3, [r7, #2]
  }
  if((y - h + 1) < 0){                  
 800108e:	88ba      	ldrh	r2, [r7, #4]
 8001090:	883b      	ldrh	r3, [r7, #0]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001098:	da0d      	bge.n	80010b6 <ST7735_DrawImage+0xaa>
    i = i - (h - y - 1)*originalWidth;  
 800109a:	883a      	ldrh	r2, [r7, #0]
 800109c:	88bb      	ldrh	r3, [r7, #4]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	3b01      	subs	r3, #1
 80010a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80010a6:	fb02 f303 	mul.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	613b      	str	r3, [r7, #16]
    h = y + 1;
 80010b0:	88bb      	ldrh	r3, [r7, #4]
 80010b2:	3301      	adds	r3, #1
 80010b4:	803b      	strh	r3, [r7, #0]
    w = w + x;
    skipC = -1*x;                       
    i = i - x;                          
    x = 0;
  }
  if(y >= ST7735_HEIGHT){                     
 80010b6:	88bb      	ldrh	r3, [r7, #4]
 80010b8:	2b9f      	cmp	r3, #159	; 0x9f
 80010ba:	d907      	bls.n	80010cc <ST7735_DrawImage+0xc0>
    h = h - (y - ST7735_HEIGHT + 1);
 80010bc:	883a      	ldrh	r2, [r7, #0]
 80010be:	88bb      	ldrh	r3, [r7, #4]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	339f      	adds	r3, #159	; 0x9f
 80010c6:	803b      	strh	r3, [r7, #0]
    y = ST7735_HEIGHT - 1;
 80010c8:	239f      	movs	r3, #159	; 0x9f
 80010ca:	80bb      	strh	r3, [r7, #4]
  }
	
	LCD_CS0;  //Select
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d2:	482e      	ldr	r0, [pc, #184]	; (800118c <ST7735_DrawImage+0x180>)
 80010d4:	f000 fcb2 	bl	8001a3c <HAL_GPIO_WritePin>
 
  ST7735_SetAddressWindow(x, y-h+1, x+w-1, y);
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	b2d8      	uxtb	r0, r3
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	883b      	ldrh	r3, [r7, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2d9      	uxtb	r1, r3
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4413      	add	r3, r2
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	3b01      	subs	r3, #1
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	88bb      	ldrh	r3, [r7, #4]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f7ff fc70 	bl	80009e4 <ST7735_SetAddressWindow>
 
  for(y=0; y<h; y=y+1){
 8001104:	2300      	movs	r3, #0
 8001106:	80bb      	strh	r3, [r7, #4]
 8001108:	e02e      	b.n	8001168 <ST7735_DrawImage+0x15c>
    for(x=0; x<w; x=x+1){
 800110a:	2300      	movs	r3, #0
 800110c:	80fb      	strh	r3, [r7, #6]
 800110e:	e019      	b.n	8001144 <ST7735_DrawImage+0x138>
                                        
      lcd7735_sendData((uint8_t)(data[i] >> 8));
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001116:	4413      	add	r3, r2
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	b29b      	uxth	r3, r3
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f000 f84b 	bl	80011bc <lcd7735_sendData>
                                        
      lcd7735_sendData((uint8_t)data[i]);
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800112c:	4413      	add	r3, r2
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f842 	bl	80011bc <lcd7735_sendData>
      i = i + 1;                       
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	3301      	adds	r3, #1
 800113c:	613b      	str	r3, [r7, #16]
    for(x=0; x<w; x=x+1){
 800113e:	88fb      	ldrh	r3, [r7, #6]
 8001140:	3301      	adds	r3, #1
 8001142:	80fb      	strh	r3, [r7, #6]
 8001144:	88fa      	ldrh	r2, [r7, #6]
 8001146:	887b      	ldrh	r3, [r7, #2]
 8001148:	429a      	cmp	r2, r3
 800114a:	d3e1      	bcc.n	8001110 <ST7735_DrawImage+0x104>
    }
    i = i + skipC;
 800114c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4413      	add	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
    i = i - 2*originalWidth;
 8001156:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	613b      	str	r3, [r7, #16]
  for(y=0; y<h; y=y+1){
 8001162:	88bb      	ldrh	r3, [r7, #4]
 8001164:	3301      	adds	r3, #1
 8001166:	80bb      	strh	r3, [r7, #4]
 8001168:	88ba      	ldrh	r2, [r7, #4]
 800116a:	883b      	ldrh	r3, [r7, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d3cc      	bcc.n	800110a <ST7735_DrawImage+0xfe>
  }
	LCD_CS1;  //Unselect
 8001170:	2201      	movs	r2, #1
 8001172:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <ST7735_DrawImage+0x180>)
 8001178:	f000 fc60 	bl	8001a3c <HAL_GPIO_WritePin>
 800117c:	e002      	b.n	8001184 <ST7735_DrawImage+0x178>
    return;                             
 800117e:	bf00      	nop
 8001180:	e000      	b.n	8001184 <ST7735_DrawImage+0x178>
    return;
 8001182:	bf00      	nop
}
 8001184:	371c      	adds	r7, #28
 8001186:	46bd      	mov	sp, r7
 8001188:	bd90      	pop	{r4, r7, pc}
 800118a:	bf00      	nop
 800118c:	40020400 	.word	0x40020400

08001190 <lcd7735_sendCmd>:
  //ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
	lcd7735_sendCmd(invert ? ST7735_INVON : ST7735_INVOFF);
  LCD_CS1;  //Unselect
}
 
void lcd7735_sendCmd(uint8_t cmd) {  //uint8_t       //unsigned char
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
   LCD_DC0; //Set DC low
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <lcd7735_sendCmd+0x28>)
 80011a2:	f000 fc4b 	bl	8001a3c <HAL_GPIO_WritePin>
   lcd7735_senddata(cmd);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f81d 	bl	80011e8 <lcd7735_senddata>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40020400 	.word	0x40020400

080011bc <lcd7735_sendData>:
 
 
void lcd7735_sendData(uint8_t data) {  //uint8_t      //unsigned char
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
   LCD_DC1;//Set DC HIGH
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011cc:	4805      	ldr	r0, [pc, #20]	; (80011e4 <lcd7735_sendData+0x28>)
 80011ce:	f000 fc35 	bl	8001a3c <HAL_GPIO_WritePin>
   lcd7735_senddata(data);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 f807 	bl	80011e8 <lcd7735_senddata>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40020400 	.word	0x40020400

080011e8 <lcd7735_senddata>:
 
void lcd7735_senddata(uint8_t data) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, &data,sizeof(data),0x1);
 80011f2:	1df9      	adds	r1, r7, #7
 80011f4:	2301      	movs	r3, #1
 80011f6:	2201      	movs	r2, #1
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <lcd7735_senddata+0x20>)
 80011fa:	f001 f95a 	bl	80024b2 <HAL_SPI_Transmit>
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000028 	.word	0x20000028

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_MspInit+0x4c>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <HAL_MspInit+0x4c>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_MspInit+0x4c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_MspInit+0x4c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <HAL_MspInit+0x4c>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800124a:	2007      	movs	r0, #7
 800124c:	f000 fa26 	bl	800169c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a8:	f000 f902 	bl	80014b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <SystemInit+0x20>)
 80012b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <SystemInit+0x20>)
 80012bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_USART2_UART_Init+0x50>)
 80012dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 80012fa:	220c      	movs	r2, #12
 80012fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_USART2_UART_Init+0x4c>)
 800130c:	f001 fad8 	bl	80028c0 <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001316:	f7ff fae1 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000080 	.word	0x20000080
 8001324:	40004400 	.word	0x40004400

08001328 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_UART_MspInit+0x84>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12b      	bne.n	80013a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <HAL_UART_MspInit+0x88>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_UART_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <HAL_UART_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001382:	230c      	movs	r3, #12
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001392:	2307      	movs	r3, #7
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	; (80013b4 <HAL_UART_MspInit+0x8c>)
 800139e:	f000 f9b1 	bl	8001704 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40004400 	.word	0x40004400
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000

080013b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013bc:	480d      	ldr	r0, [pc, #52]	; (80013f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013be:	490e      	ldr	r1, [pc, #56]	; (80013f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c4:	e002      	b.n	80013cc <LoopCopyDataInit>

080013c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ca:	3304      	adds	r3, #4

080013cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d0:	d3f9      	bcc.n	80013c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013d4:	4c0b      	ldr	r4, [pc, #44]	; (8001404 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d8:	e001      	b.n	80013de <LoopFillZerobss>

080013da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013dc:	3204      	adds	r2, #4

080013de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e0:	d3fb      	bcc.n	80013da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013e2:	f7ff ff65 	bl	80012b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013e6:	f001 fd35 	bl	8002e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ea:	f7ff f925 	bl	8000638 <main>
  bx  lr    
 80013ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013fc:	0800c9d8 	.word	0x0800c9d8
  ldr r2, =_sbss
 8001400:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001404:	200000c8 	.word	0x200000c8

08001408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC_IRQHandler>
	...

0800140c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001410:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0d      	ldr	r2, [pc, #52]	; (800144c <HAL_Init+0x40>)
 8001416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0a      	ldr	r2, [pc, #40]	; (800144c <HAL_Init+0x40>)
 8001422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001426:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_Init+0x40>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_Init+0x40>)
 800142e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 f931 	bl	800169c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143a:	2000      	movs	r0, #0
 800143c:	f000 f808 	bl	8001450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001440:	f7ff fee4 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023c00 	.word	0x40023c00

08001450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <HAL_InitTick+0x54>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x58>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001466:	fbb3 f3f1 	udiv	r3, r3, r1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f000 f93b 	bl	80016ea <HAL_SYSTICK_Config>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e00e      	b.n	800149c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b0f      	cmp	r3, #15
 8001482:	d80a      	bhi.n	800149a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001484:	2200      	movs	r2, #0
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f000 f911 	bl	80016b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <HAL_InitTick+0x5c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000000 	.word	0x20000000
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000004 	.word	0x20000004

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000008 	.word	0x20000008
 80014d4:	200000c4 	.word	0x200000c4

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	200000c4 	.word	0x200000c4

080014f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff ffee 	bl	80014d8 <HAL_GetTick>
 80014fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d005      	beq.n	8001516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_Delay+0x44>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001516:	bf00      	nop
 8001518:	f7ff ffde 	bl	80014d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8f7      	bhi.n	8001518 <HAL_Delay+0x28>
  {
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000008 	.word	0x20000008

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156a:	4a04      	ldr	r2, [pc, #16]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60d3      	str	r3, [r2, #12]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	6039      	str	r1, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	db0a      	blt.n	80015c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	490c      	ldr	r1, [pc, #48]	; (80015e8 <__NVIC_SetPriority+0x4c>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	0112      	lsls	r2, r2, #4
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	440b      	add	r3, r1
 80015c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c4:	e00a      	b.n	80015dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4908      	ldr	r1, [pc, #32]	; (80015ec <__NVIC_SetPriority+0x50>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	f003 030f 	and.w	r3, r3, #15
 80015d2:	3b04      	subs	r3, #4
 80015d4:	0112      	lsls	r2, r2, #4
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	440b      	add	r3, r1
 80015da:	761a      	strb	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000e100 	.word	0xe000e100
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f1c3 0307 	rsb	r3, r3, #7
 800160a:	2b04      	cmp	r3, #4
 800160c:	bf28      	it	cs
 800160e:	2304      	movcs	r3, #4
 8001610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3304      	adds	r3, #4
 8001616:	2b06      	cmp	r3, #6
 8001618:	d902      	bls.n	8001620 <NVIC_EncodePriority+0x30>
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3b03      	subs	r3, #3
 800161e:	e000      	b.n	8001622 <NVIC_EncodePriority+0x32>
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001624:	f04f 32ff 	mov.w	r2, #4294967295
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43da      	mvns	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001638:	f04f 31ff 	mov.w	r1, #4294967295
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa01 f303 	lsl.w	r3, r1, r3
 8001642:	43d9      	mvns	r1, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001648:	4313      	orrs	r3, r2
         );
}
 800164a:	4618      	mov	r0, r3
 800164c:	3724      	adds	r7, #36	; 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3b01      	subs	r3, #1
 8001664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001668:	d301      	bcc.n	800166e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <SysTick_Config+0x40>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001676:	210f      	movs	r1, #15
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f7ff ff8e 	bl	800159c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <SysTick_Config+0x40>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001686:	4b04      	ldr	r3, [pc, #16]	; (8001698 <SysTick_Config+0x40>)
 8001688:	2207      	movs	r2, #7
 800168a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	e000e010 	.word	0xe000e010

0800169c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ff47 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4603      	mov	r3, r0
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
 80016be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c4:	f7ff ff5c 	bl	8001580 <__NVIC_GetPriorityGrouping>
 80016c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	6978      	ldr	r0, [r7, #20]
 80016d0:	f7ff ff8e 	bl	80015f0 <NVIC_EncodePriority>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff5d 	bl	800159c <__NVIC_SetPriority>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffb0 	bl	8001658 <SysTick_Config>
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001704:	b480      	push	{r7}
 8001706:	b089      	sub	sp, #36	; 0x24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	e159      	b.n	80019d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001720:	2201      	movs	r2, #1
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	429a      	cmp	r2, r3
 800173a:	f040 8148 	bne.w	80019ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b01      	cmp	r3, #1
 8001748:	d005      	beq.n	8001756 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001752:	2b02      	cmp	r3, #2
 8001754:	d130      	bne.n	80017b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	2203      	movs	r2, #3
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800178c:	2201      	movs	r2, #1
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	091b      	lsrs	r3, r3, #4
 80017a2:	f003 0201 	and.w	r2, r3, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d017      	beq.n	80017f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	2203      	movs	r2, #3
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4013      	ands	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0303 	and.w	r3, r3, #3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d123      	bne.n	8001848 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	08da      	lsrs	r2, r3, #3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3208      	adds	r2, #8
 8001808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800180c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	08da      	lsrs	r2, r3, #3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3208      	adds	r2, #8
 8001842:	69b9      	ldr	r1, [r7, #24]
 8001844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0203 	and.w	r2, r3, #3
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 80a2 	beq.w	80019ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	4b57      	ldr	r3, [pc, #348]	; (80019ec <HAL_GPIO_Init+0x2e8>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	4a56      	ldr	r2, [pc, #344]	; (80019ec <HAL_GPIO_Init+0x2e8>)
 8001894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001898:	6453      	str	r3, [r2, #68]	; 0x44
 800189a:	4b54      	ldr	r3, [pc, #336]	; (80019ec <HAL_GPIO_Init+0x2e8>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018a6:	4a52      	ldr	r2, [pc, #328]	; (80019f0 <HAL_GPIO_Init+0x2ec>)
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	3302      	adds	r3, #2
 80018ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	220f      	movs	r2, #15
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a49      	ldr	r2, [pc, #292]	; (80019f4 <HAL_GPIO_Init+0x2f0>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d019      	beq.n	8001906 <HAL_GPIO_Init+0x202>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a48      	ldr	r2, [pc, #288]	; (80019f8 <HAL_GPIO_Init+0x2f4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0x1fe>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a47      	ldr	r2, [pc, #284]	; (80019fc <HAL_GPIO_Init+0x2f8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x1fa>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a46      	ldr	r2, [pc, #280]	; (8001a00 <HAL_GPIO_Init+0x2fc>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x1f6>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a45      	ldr	r2, [pc, #276]	; (8001a04 <HAL_GPIO_Init+0x300>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x1f2>
 80018f2:	2304      	movs	r3, #4
 80018f4:	e008      	b.n	8001908 <HAL_GPIO_Init+0x204>
 80018f6:	2307      	movs	r3, #7
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x204>
 80018fa:	2303      	movs	r3, #3
 80018fc:	e004      	b.n	8001908 <HAL_GPIO_Init+0x204>
 80018fe:	2302      	movs	r3, #2
 8001900:	e002      	b.n	8001908 <HAL_GPIO_Init+0x204>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_GPIO_Init+0x204>
 8001906:	2300      	movs	r3, #0
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	f002 0203 	and.w	r2, r2, #3
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	4093      	lsls	r3, r2
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001918:	4935      	ldr	r1, [pc, #212]	; (80019f0 <HAL_GPIO_Init+0x2ec>)
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001926:	4b38      	ldr	r3, [pc, #224]	; (8001a08 <HAL_GPIO_Init+0x304>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800194a:	4a2f      	ldr	r2, [pc, #188]	; (8001a08 <HAL_GPIO_Init+0x304>)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001950:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_GPIO_Init+0x304>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001974:	4a24      	ldr	r2, [pc, #144]	; (8001a08 <HAL_GPIO_Init+0x304>)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800197a:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <HAL_GPIO_Init+0x304>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	43db      	mvns	r3, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4013      	ands	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800199e:	4a1a      	ldr	r2, [pc, #104]	; (8001a08 <HAL_GPIO_Init+0x304>)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_GPIO_Init+0x304>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c8:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <HAL_GPIO_Init+0x304>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3301      	adds	r3, #1
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b0f      	cmp	r3, #15
 80019d8:	f67f aea2 	bls.w	8001720 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3724      	adds	r7, #36	; 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40013800 	.word	0x40013800
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40020400 	.word	0x40020400
 80019fc:	40020800 	.word	0x40020800
 8001a00:	40020c00 	.word	0x40020c00
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40013c00 	.word	0x40013c00

08001a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	887b      	ldrh	r3, [r7, #2]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d002      	beq.n	8001a2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
 8001a28:	e001      	b.n	8001a2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a58:	e003      	b.n	8001a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	041a      	lsls	r2, r3, #16
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	619a      	str	r2, [r3, #24]
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
	...

08001a70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e267      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d075      	beq.n	8001b7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a8e:	4b88      	ldr	r3, [pc, #544]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 030c 	and.w	r3, r3, #12
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d00c      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a9a:	4b85      	ldr	r3, [pc, #532]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d112      	bne.n	8001acc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa6:	4b82      	ldr	r3, [pc, #520]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ab2:	d10b      	bne.n	8001acc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	4b7e      	ldr	r3, [pc, #504]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d05b      	beq.n	8001b78 <HAL_RCC_OscConfig+0x108>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d157      	bne.n	8001b78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e242      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ad4:	d106      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x74>
 8001ad6:	4b76      	ldr	r3, [pc, #472]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a75      	ldr	r2, [pc, #468]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e01d      	b.n	8001b20 <HAL_RCC_OscConfig+0xb0>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x98>
 8001aee:	4b70      	ldr	r3, [pc, #448]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a6f      	ldr	r2, [pc, #444]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	4b6d      	ldr	r3, [pc, #436]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a6c      	ldr	r2, [pc, #432]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	e00b      	b.n	8001b20 <HAL_RCC_OscConfig+0xb0>
 8001b08:	4b69      	ldr	r3, [pc, #420]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a68      	ldr	r2, [pc, #416]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b66      	ldr	r3, [pc, #408]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a65      	ldr	r2, [pc, #404]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d013      	beq.n	8001b50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7ff fcd6 	bl	80014d8 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b30:	f7ff fcd2 	bl	80014d8 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b64      	cmp	r3, #100	; 0x64
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e207      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	4b5b      	ldr	r3, [pc, #364]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0xc0>
 8001b4e:	e014      	b.n	8001b7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff fcc2 	bl	80014d8 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b58:	f7ff fcbe 	bl	80014d8 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b64      	cmp	r3, #100	; 0x64
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e1f3      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	4b51      	ldr	r3, [pc, #324]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0xe8>
 8001b76:	e000      	b.n	8001b7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d063      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b86:	4b4a      	ldr	r3, [pc, #296]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d00b      	beq.n	8001baa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b92:	4b47      	ldr	r3, [pc, #284]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d11c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9e:	4b44      	ldr	r3, [pc, #272]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d116      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001baa:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d005      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x152>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e1c7      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc2:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4937      	ldr	r1, [pc, #220]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd6:	e03a      	b.n	8001c4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d020      	beq.n	8001c22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001be0:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <HAL_RCC_OscConfig+0x244>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be6:	f7ff fc77 	bl	80014d8 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bee:	f7ff fc73 	bl	80014d8 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e1a8      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c00:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c0c:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4925      	ldr	r1, [pc, #148]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]
 8001c20:	e015      	b.n	8001c4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_RCC_OscConfig+0x244>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c28:	f7ff fc56 	bl	80014d8 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c30:	f7ff fc52 	bl	80014d8 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e187      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c42:	4b1b      	ldr	r3, [pc, #108]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d036      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d016      	beq.n	8001c90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_RCC_OscConfig+0x248>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c68:	f7ff fc36 	bl	80014d8 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c70:	f7ff fc32 	bl	80014d8 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e167      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_OscConfig+0x240>)
 8001c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x200>
 8001c8e:	e01b      	b.n	8001cc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_RCC_OscConfig+0x248>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c96:	f7ff fc1f 	bl	80014d8 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9c:	e00e      	b.n	8001cbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c9e:	f7ff fc1b 	bl	80014d8 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d907      	bls.n	8001cbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e150      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	42470000 	.word	0x42470000
 8001cb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbc:	4b88      	ldr	r3, [pc, #544]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1ea      	bne.n	8001c9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 8097 	beq.w	8001e04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b81      	ldr	r3, [pc, #516]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10f      	bne.n	8001d06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	4b7d      	ldr	r3, [pc, #500]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	4a7c      	ldr	r2, [pc, #496]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	4b7a      	ldr	r3, [pc, #488]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d02:	2301      	movs	r3, #1
 8001d04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d06:	4b77      	ldr	r3, [pc, #476]	; (8001ee4 <HAL_RCC_OscConfig+0x474>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d118      	bne.n	8001d44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d12:	4b74      	ldr	r3, [pc, #464]	; (8001ee4 <HAL_RCC_OscConfig+0x474>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a73      	ldr	r2, [pc, #460]	; (8001ee4 <HAL_RCC_OscConfig+0x474>)
 8001d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1e:	f7ff fbdb 	bl	80014d8 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d26:	f7ff fbd7 	bl	80014d8 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e10c      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	4b6a      	ldr	r3, [pc, #424]	; (8001ee4 <HAL_RCC_OscConfig+0x474>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x2ea>
 8001d4c:	4b64      	ldr	r3, [pc, #400]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d50:	4a63      	ldr	r2, [pc, #396]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6713      	str	r3, [r2, #112]	; 0x70
 8001d58:	e01c      	b.n	8001d94 <HAL_RCC_OscConfig+0x324>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b05      	cmp	r3, #5
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x30c>
 8001d62:	4b5f      	ldr	r3, [pc, #380]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d66:	4a5e      	ldr	r2, [pc, #376]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6e:	4b5c      	ldr	r3, [pc, #368]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d72:	4a5b      	ldr	r2, [pc, #364]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6713      	str	r3, [r2, #112]	; 0x70
 8001d7a:	e00b      	b.n	8001d94 <HAL_RCC_OscConfig+0x324>
 8001d7c:	4b58      	ldr	r3, [pc, #352]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d80:	4a57      	ldr	r2, [pc, #348]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001d82:	f023 0301 	bic.w	r3, r3, #1
 8001d86:	6713      	str	r3, [r2, #112]	; 0x70
 8001d88:	4b55      	ldr	r3, [pc, #340]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8c:	4a54      	ldr	r2, [pc, #336]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001d8e:	f023 0304 	bic.w	r3, r3, #4
 8001d92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d015      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9c:	f7ff fb9c 	bl	80014d8 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da4:	f7ff fb98 	bl	80014d8 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e0cb      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dba:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0ee      	beq.n	8001da4 <HAL_RCC_OscConfig+0x334>
 8001dc6:	e014      	b.n	8001df2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc8:	f7ff fb86 	bl	80014d8 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fb82 	bl	80014d8 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e0b5      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de6:	4b3e      	ldr	r3, [pc, #248]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1ee      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001df2:	7dfb      	ldrb	r3, [r7, #23]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d105      	bne.n	8001e04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df8:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	4a38      	ldr	r2, [pc, #224]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80a1 	beq.w	8001f50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e0e:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d05c      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d141      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e22:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <HAL_RCC_OscConfig+0x478>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fb56 	bl	80014d8 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e30:	f7ff fb52 	bl	80014d8 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e087      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e42:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69da      	ldr	r2, [r3, #28]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	019b      	lsls	r3, r3, #6
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e64:	085b      	lsrs	r3, r3, #1
 8001e66:	3b01      	subs	r3, #1
 8001e68:	041b      	lsls	r3, r3, #16
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	061b      	lsls	r3, r3, #24
 8001e72:	491b      	ldr	r1, [pc, #108]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e78:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_RCC_OscConfig+0x478>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fb2b 	bl	80014d8 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e86:	f7ff fb27 	bl	80014d8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e05c      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x416>
 8001ea4:	e054      	b.n	8001f50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_RCC_OscConfig+0x478>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fb14 	bl	80014d8 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7ff fb10 	bl	80014d8 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e045      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec6:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x444>
 8001ed2:	e03d      	b.n	8001f50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e038      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40007000 	.word	0x40007000
 8001ee8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_RCC_OscConfig+0x4ec>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d028      	beq.n	8001f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d121      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d11a      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d111      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	085b      	lsrs	r3, r3, #1
 8001f34:	3b01      	subs	r3, #1
 8001f36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d107      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d001      	beq.n	8001f50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40023800 	.word	0x40023800

08001f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0cc      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f74:	4b68      	ldr	r3, [pc, #416]	; (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d90c      	bls.n	8001f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b65      	ldr	r3, [pc, #404]	; (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8a:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0307 	and.w	r3, r3, #7
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d001      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0b8      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d020      	beq.n	8001fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d005      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fb4:	4b59      	ldr	r3, [pc, #356]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	4a58      	ldr	r2, [pc, #352]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0308 	and.w	r3, r3, #8
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fcc:	4b53      	ldr	r3, [pc, #332]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4a52      	ldr	r2, [pc, #328]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b50      	ldr	r3, [pc, #320]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	494d      	ldr	r1, [pc, #308]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d044      	beq.n	8002080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffe:	4b47      	ldr	r3, [pc, #284]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d119      	bne.n	800203e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e07f      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d003      	beq.n	800201e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201a:	2b03      	cmp	r3, #3
 800201c:	d107      	bne.n	800202e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201e:	4b3f      	ldr	r3, [pc, #252]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d109      	bne.n	800203e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e06f      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202e:	4b3b      	ldr	r3, [pc, #236]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e067      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800203e:	4b37      	ldr	r3, [pc, #220]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f023 0203 	bic.w	r2, r3, #3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4934      	ldr	r1, [pc, #208]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	4313      	orrs	r3, r2
 800204e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002050:	f7ff fa42 	bl	80014d8 <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002056:	e00a      	b.n	800206e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002058:	f7ff fa3e 	bl	80014d8 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	; 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e04f      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	4b2b      	ldr	r3, [pc, #172]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 020c 	and.w	r2, r3, #12
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	429a      	cmp	r2, r3
 800207e:	d1eb      	bne.n	8002058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002080:	4b25      	ldr	r3, [pc, #148]	; (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	683a      	ldr	r2, [r7, #0]
 800208a:	429a      	cmp	r2, r3
 800208c:	d20c      	bcs.n	80020a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208e:	4b22      	ldr	r3, [pc, #136]	; (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCC_ClockConfig+0x1b8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e032      	b.n	800210e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d008      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	4916      	ldr	r1, [pc, #88]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	490e      	ldr	r1, [pc, #56]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020e6:	f000 f821 	bl	800212c <HAL_RCC_GetSysClockFreq>
 80020ea:	4602      	mov	r2, r0
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	490a      	ldr	r1, [pc, #40]	; (8002120 <HAL_RCC_ClockConfig+0x1c0>)
 80020f8:	5ccb      	ldrb	r3, [r1, r3]
 80020fa:	fa22 f303 	lsr.w	r3, r2, r3
 80020fe:	4a09      	ldr	r2, [pc, #36]	; (8002124 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff f9a2 	bl	8001450 <HAL_InitTick>

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023c00 	.word	0x40023c00
 800211c:	40023800 	.word	0x40023800
 8002120:	0800c9b0 	.word	0x0800c9b0
 8002124:	20000000 	.word	0x20000000
 8002128:	20000004 	.word	0x20000004

0800212c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800212c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002130:	b094      	sub	sp, #80	; 0x50
 8002132:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	647b      	str	r3, [r7, #68]	; 0x44
 8002138:	2300      	movs	r3, #0
 800213a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800213c:	2300      	movs	r3, #0
 800213e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002144:	4b79      	ldr	r3, [pc, #484]	; (800232c <HAL_RCC_GetSysClockFreq+0x200>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b08      	cmp	r3, #8
 800214e:	d00d      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x40>
 8002150:	2b08      	cmp	r3, #8
 8002152:	f200 80e1 	bhi.w	8002318 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x34>
 800215a:	2b04      	cmp	r3, #4
 800215c:	d003      	beq.n	8002166 <HAL_RCC_GetSysClockFreq+0x3a>
 800215e:	e0db      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002160:	4b73      	ldr	r3, [pc, #460]	; (8002330 <HAL_RCC_GetSysClockFreq+0x204>)
 8002162:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002164:	e0db      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002166:	4b73      	ldr	r3, [pc, #460]	; (8002334 <HAL_RCC_GetSysClockFreq+0x208>)
 8002168:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800216a:	e0d8      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800216c:	4b6f      	ldr	r3, [pc, #444]	; (800232c <HAL_RCC_GetSysClockFreq+0x200>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002174:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002176:	4b6d      	ldr	r3, [pc, #436]	; (800232c <HAL_RCC_GetSysClockFreq+0x200>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d063      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002182:	4b6a      	ldr	r3, [pc, #424]	; (800232c <HAL_RCC_GetSysClockFreq+0x200>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	099b      	lsrs	r3, r3, #6
 8002188:	2200      	movs	r2, #0
 800218a:	63bb      	str	r3, [r7, #56]	; 0x38
 800218c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800218e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
 8002196:	2300      	movs	r3, #0
 8002198:	637b      	str	r3, [r7, #52]	; 0x34
 800219a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800219e:	4622      	mov	r2, r4
 80021a0:	462b      	mov	r3, r5
 80021a2:	f04f 0000 	mov.w	r0, #0
 80021a6:	f04f 0100 	mov.w	r1, #0
 80021aa:	0159      	lsls	r1, r3, #5
 80021ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021b0:	0150      	lsls	r0, r2, #5
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4621      	mov	r1, r4
 80021b8:	1a51      	subs	r1, r2, r1
 80021ba:	6139      	str	r1, [r7, #16]
 80021bc:	4629      	mov	r1, r5
 80021be:	eb63 0301 	sbc.w	r3, r3, r1
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021d0:	4659      	mov	r1, fp
 80021d2:	018b      	lsls	r3, r1, #6
 80021d4:	4651      	mov	r1, sl
 80021d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021da:	4651      	mov	r1, sl
 80021dc:	018a      	lsls	r2, r1, #6
 80021de:	4651      	mov	r1, sl
 80021e0:	ebb2 0801 	subs.w	r8, r2, r1
 80021e4:	4659      	mov	r1, fp
 80021e6:	eb63 0901 	sbc.w	r9, r3, r1
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021fe:	4690      	mov	r8, r2
 8002200:	4699      	mov	r9, r3
 8002202:	4623      	mov	r3, r4
 8002204:	eb18 0303 	adds.w	r3, r8, r3
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	462b      	mov	r3, r5
 800220c:	eb49 0303 	adc.w	r3, r9, r3
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800221e:	4629      	mov	r1, r5
 8002220:	024b      	lsls	r3, r1, #9
 8002222:	4621      	mov	r1, r4
 8002224:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002228:	4621      	mov	r1, r4
 800222a:	024a      	lsls	r2, r1, #9
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002232:	2200      	movs	r2, #0
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
 8002236:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002238:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800223c:	f7fd ffca 	bl	80001d4 <__aeabi_uldivmod>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4613      	mov	r3, r2
 8002246:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002248:	e058      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800224a:	4b38      	ldr	r3, [pc, #224]	; (800232c <HAL_RCC_GetSysClockFreq+0x200>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	099b      	lsrs	r3, r3, #6
 8002250:	2200      	movs	r2, #0
 8002252:	4618      	mov	r0, r3
 8002254:	4611      	mov	r1, r2
 8002256:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800225a:	623b      	str	r3, [r7, #32]
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
 8002260:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002264:	4642      	mov	r2, r8
 8002266:	464b      	mov	r3, r9
 8002268:	f04f 0000 	mov.w	r0, #0
 800226c:	f04f 0100 	mov.w	r1, #0
 8002270:	0159      	lsls	r1, r3, #5
 8002272:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002276:	0150      	lsls	r0, r2, #5
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4641      	mov	r1, r8
 800227e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002282:	4649      	mov	r1, r9
 8002284:	eb63 0b01 	sbc.w	fp, r3, r1
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002294:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002298:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800229c:	ebb2 040a 	subs.w	r4, r2, sl
 80022a0:	eb63 050b 	sbc.w	r5, r3, fp
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	00eb      	lsls	r3, r5, #3
 80022ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022b2:	00e2      	lsls	r2, r4, #3
 80022b4:	4614      	mov	r4, r2
 80022b6:	461d      	mov	r5, r3
 80022b8:	4643      	mov	r3, r8
 80022ba:	18e3      	adds	r3, r4, r3
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	464b      	mov	r3, r9
 80022c0:	eb45 0303 	adc.w	r3, r5, r3
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022d2:	4629      	mov	r1, r5
 80022d4:	028b      	lsls	r3, r1, #10
 80022d6:	4621      	mov	r1, r4
 80022d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022dc:	4621      	mov	r1, r4
 80022de:	028a      	lsls	r2, r1, #10
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022e6:	2200      	movs	r2, #0
 80022e8:	61bb      	str	r3, [r7, #24]
 80022ea:	61fa      	str	r2, [r7, #28]
 80022ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022f0:	f7fd ff70 	bl	80001d4 <__aeabi_uldivmod>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4613      	mov	r3, r2
 80022fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_RCC_GetSysClockFreq+0x200>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	3301      	adds	r3, #1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800230c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800230e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002310:	fbb2 f3f3 	udiv	r3, r2, r3
 8002314:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002316:	e002      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002318:	4b05      	ldr	r3, [pc, #20]	; (8002330 <HAL_RCC_GetSysClockFreq+0x204>)
 800231a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800231c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800231e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002320:	4618      	mov	r0, r3
 8002322:	3750      	adds	r7, #80	; 0x50
 8002324:	46bd      	mov	sp, r7
 8002326:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800
 8002330:	00f42400 	.word	0x00f42400
 8002334:	007a1200 	.word	0x007a1200

08002338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_RCC_GetHCLKFreq+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000000 	.word	0x20000000

08002350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002354:	f7ff fff0 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	0a9b      	lsrs	r3, r3, #10
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4903      	ldr	r1, [pc, #12]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40023800 	.word	0x40023800
 8002374:	0800c9c0 	.word	0x0800c9c0

08002378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800237c:	f7ff ffdc 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002380:	4602      	mov	r2, r0
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	0b5b      	lsrs	r3, r3, #13
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	4903      	ldr	r1, [pc, #12]	; (800239c <HAL_RCC_GetPCLK2Freq+0x24>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40023800 	.word	0x40023800
 800239c:	0800c9c0 	.word	0x0800c9c0

080023a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e07b      	b.n	80024aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d108      	bne.n	80023cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023c2:	d009      	beq.n	80023d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	61da      	str	r2, [r3, #28]
 80023ca:	e005      	b.n	80023d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7fe faae 	bl	8000954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800240e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	431a      	orrs	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	699b      	ldr	r3, [r3, #24]
 8002444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245c:	ea42 0103 	orr.w	r1, r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	f003 0104 	and.w	r1, r3, #4
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	f003 0210 	and.w	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002498:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b088      	sub	sp, #32
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	603b      	str	r3, [r7, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_SPI_Transmit+0x22>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e126      	b.n	8002722 <HAL_SPI_Transmit+0x270>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024dc:	f7fe fffc 	bl	80014d8 <HAL_GetTick>
 80024e0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d002      	beq.n	80024f8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
 80024f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80024f6:	e10b      	b.n	8002710 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <HAL_SPI_Transmit+0x52>
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002508:	e102      	b.n	8002710 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2203      	movs	r2, #3
 800250e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	88fa      	ldrh	r2, [r7, #6]
 8002522:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	88fa      	ldrh	r2, [r7, #6]
 8002528:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002550:	d10f      	bne.n	8002572 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002560:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002570:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257c:	2b40      	cmp	r3, #64	; 0x40
 800257e:	d007      	beq.n	8002590 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800258e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002598:	d14b      	bne.n	8002632 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d002      	beq.n	80025a8 <HAL_SPI_Transmit+0xf6>
 80025a2:	8afb      	ldrh	r3, [r7, #22]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d13e      	bne.n	8002626 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	881a      	ldrh	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	1c9a      	adds	r2, r3, #2
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025cc:	e02b      	b.n	8002626 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d112      	bne.n	8002602 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	881a      	ldrh	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	1c9a      	adds	r2, r3, #2
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002600:	e011      	b.n	8002626 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002602:	f7fe ff69 	bl	80014d8 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d803      	bhi.n	800261a <HAL_SPI_Transmit+0x168>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002618:	d102      	bne.n	8002620 <HAL_SPI_Transmit+0x16e>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002624:	e074      	b.n	8002710 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ce      	bne.n	80025ce <HAL_SPI_Transmit+0x11c>
 8002630:	e04c      	b.n	80026cc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_SPI_Transmit+0x18e>
 800263a:	8afb      	ldrh	r3, [r7, #22]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d140      	bne.n	80026c2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	330c      	adds	r3, #12
 800264a:	7812      	ldrb	r2, [r2, #0]
 800264c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002666:	e02c      	b.n	80026c2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b02      	cmp	r3, #2
 8002674:	d113      	bne.n	800269e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	330c      	adds	r3, #12
 8002680:	7812      	ldrb	r2, [r2, #0]
 8002682:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	86da      	strh	r2, [r3, #54]	; 0x36
 800269c:	e011      	b.n	80026c2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800269e:	f7fe ff1b 	bl	80014d8 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d803      	bhi.n	80026b6 <HAL_SPI_Transmit+0x204>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d102      	bne.n	80026bc <HAL_SPI_Transmit+0x20a>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80026c0:	e026      	b.n	8002710 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1cd      	bne.n	8002668 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	6839      	ldr	r1, [r7, #0]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f8b3 	bl	800283c <SPI_EndRxTxTransaction>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d002      	beq.n	80026e2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10a      	bne.n	8002700 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	77fb      	strb	r3, [r7, #31]
 800270c:	e000      	b.n	8002710 <HAL_SPI_Transmit+0x25e>
  }

error:
 800270e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002720:	7ffb      	ldrb	r3, [r7, #31]
}
 8002722:	4618      	mov	r0, r3
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	4613      	mov	r3, r2
 800273a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800273c:	f7fe fecc 	bl	80014d8 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	4413      	add	r3, r2
 800274a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800274c:	f7fe fec4 	bl	80014d8 <HAL_GetTick>
 8002750:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002752:	4b39      	ldr	r3, [pc, #228]	; (8002838 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	015b      	lsls	r3, r3, #5
 8002758:	0d1b      	lsrs	r3, r3, #20
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	fb02 f303 	mul.w	r3, r2, r3
 8002760:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002762:	e054      	b.n	800280e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276a:	d050      	beq.n	800280e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800276c:	f7fe feb4 	bl	80014d8 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	429a      	cmp	r2, r3
 800277a:	d902      	bls.n	8002782 <SPI_WaitFlagStateUntilTimeout+0x56>
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d13d      	bne.n	80027fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002790:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800279a:	d111      	bne.n	80027c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027a4:	d004      	beq.n	80027b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ae:	d107      	bne.n	80027c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027c8:	d10f      	bne.n	80027ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e017      	b.n	800282e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	3b01      	subs	r3, #1
 800280c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4013      	ands	r3, r2
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	429a      	cmp	r2, r3
 800281c:	bf0c      	ite	eq
 800281e:	2301      	moveq	r3, #1
 8002820:	2300      	movne	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	429a      	cmp	r2, r3
 800282a:	d19b      	bne.n	8002764 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000000 	.word	0x20000000

0800283c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002848:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <SPI_EndRxTxTransaction+0x7c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <SPI_EndRxTxTransaction+0x80>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0d5b      	lsrs	r3, r3, #21
 8002854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002858:	fb02 f303 	mul.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002866:	d112      	bne.n	800288e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2200      	movs	r2, #0
 8002870:	2180      	movs	r1, #128	; 0x80
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f7ff ff5a 	bl	800272c <SPI_WaitFlagStateUntilTimeout>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d016      	beq.n	80028ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	f043 0220 	orr.w	r2, r3, #32
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e00f      	b.n	80028ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	3b01      	subs	r3, #1
 8002898:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b80      	cmp	r3, #128	; 0x80
 80028a6:	d0f2      	beq.n	800288e <SPI_EndRxTxTransaction+0x52>
 80028a8:	e000      	b.n	80028ac <SPI_EndRxTxTransaction+0x70>
        break;
 80028aa:	bf00      	nop
  }

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000000 	.word	0x20000000
 80028bc:	165e9f81 	.word	0x165e9f81

080028c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e03f      	b.n	8002952 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d106      	bne.n	80028ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fe fd1e 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2224      	movs	r2, #36	; 0x24
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f829 	bl	800295c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	691a      	ldr	r2, [r3, #16]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2220      	movs	r2, #32
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
	...

0800295c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800295c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002960:	b0c0      	sub	sp, #256	; 0x100
 8002962:	af00      	add	r7, sp, #0
 8002964:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002978:	68d9      	ldr	r1, [r3, #12]
 800297a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	ea40 0301 	orr.w	r3, r0, r1
 8002984:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	431a      	orrs	r2, r3
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	431a      	orrs	r2, r3
 800299c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80029b4:	f021 010c 	bic.w	r1, r1, #12
 80029b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80029c2:	430b      	orrs	r3, r1
 80029c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80029d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029d6:	6999      	ldr	r1, [r3, #24]
 80029d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	ea40 0301 	orr.w	r3, r0, r1
 80029e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b8f      	ldr	r3, [pc, #572]	; (8002c28 <UART_SetConfig+0x2cc>)
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d005      	beq.n	80029fc <UART_SetConfig+0xa0>
 80029f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	4b8d      	ldr	r3, [pc, #564]	; (8002c2c <UART_SetConfig+0x2d0>)
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d104      	bne.n	8002a06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029fc:	f7ff fcbc 	bl	8002378 <HAL_RCC_GetPCLK2Freq>
 8002a00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002a04:	e003      	b.n	8002a0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a06:	f7ff fca3 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 8002a0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a18:	f040 810c 	bne.w	8002c34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a20:	2200      	movs	r2, #0
 8002a22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002a26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002a2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002a2e:	4622      	mov	r2, r4
 8002a30:	462b      	mov	r3, r5
 8002a32:	1891      	adds	r1, r2, r2
 8002a34:	65b9      	str	r1, [r7, #88]	; 0x58
 8002a36:	415b      	adcs	r3, r3
 8002a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002a3e:	4621      	mov	r1, r4
 8002a40:	eb12 0801 	adds.w	r8, r2, r1
 8002a44:	4629      	mov	r1, r5
 8002a46:	eb43 0901 	adc.w	r9, r3, r1
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a5e:	4690      	mov	r8, r2
 8002a60:	4699      	mov	r9, r3
 8002a62:	4623      	mov	r3, r4
 8002a64:	eb18 0303 	adds.w	r3, r8, r3
 8002a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a6c:	462b      	mov	r3, r5
 8002a6e:	eb49 0303 	adc.w	r3, r9, r3
 8002a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	18db      	adds	r3, r3, r3
 8002a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8002a90:	4613      	mov	r3, r2
 8002a92:	eb42 0303 	adc.w	r3, r2, r3
 8002a96:	657b      	str	r3, [r7, #84]	; 0x54
 8002a98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002aa0:	f7fd fb98 	bl	80001d4 <__aeabi_uldivmod>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4b61      	ldr	r3, [pc, #388]	; (8002c30 <UART_SetConfig+0x2d4>)
 8002aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	011c      	lsls	r4, r3, #4
 8002ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002abc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ac0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ac4:	4642      	mov	r2, r8
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	1891      	adds	r1, r2, r2
 8002aca:	64b9      	str	r1, [r7, #72]	; 0x48
 8002acc:	415b      	adcs	r3, r3
 8002ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ad4:	4641      	mov	r1, r8
 8002ad6:	eb12 0a01 	adds.w	sl, r2, r1
 8002ada:	4649      	mov	r1, r9
 8002adc:	eb43 0b01 	adc.w	fp, r3, r1
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002aec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002af4:	4692      	mov	sl, r2
 8002af6:	469b      	mov	fp, r3
 8002af8:	4643      	mov	r3, r8
 8002afa:	eb1a 0303 	adds.w	r3, sl, r3
 8002afe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b02:	464b      	mov	r3, r9
 8002b04:	eb4b 0303 	adc.w	r3, fp, r3
 8002b08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002b1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002b20:	460b      	mov	r3, r1
 8002b22:	18db      	adds	r3, r3, r3
 8002b24:	643b      	str	r3, [r7, #64]	; 0x40
 8002b26:	4613      	mov	r3, r2
 8002b28:	eb42 0303 	adc.w	r3, r2, r3
 8002b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002b2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002b36:	f7fd fb4d 	bl	80001d4 <__aeabi_uldivmod>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4b3b      	ldr	r3, [pc, #236]	; (8002c30 <UART_SetConfig+0x2d4>)
 8002b42:	fba3 2301 	umull	r2, r3, r3, r1
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	2264      	movs	r2, #100	; 0x64
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	1acb      	subs	r3, r1, r3
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002b56:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <UART_SetConfig+0x2d4>)
 8002b58:	fba3 2302 	umull	r2, r3, r3, r2
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b64:	441c      	add	r4, r3
 8002b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b78:	4642      	mov	r2, r8
 8002b7a:	464b      	mov	r3, r9
 8002b7c:	1891      	adds	r1, r2, r2
 8002b7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b80:	415b      	adcs	r3, r3
 8002b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b88:	4641      	mov	r1, r8
 8002b8a:	1851      	adds	r1, r2, r1
 8002b8c:	6339      	str	r1, [r7, #48]	; 0x30
 8002b8e:	4649      	mov	r1, r9
 8002b90:	414b      	adcs	r3, r1
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002ba0:	4659      	mov	r1, fp
 8002ba2:	00cb      	lsls	r3, r1, #3
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002baa:	4651      	mov	r1, sl
 8002bac:	00ca      	lsls	r2, r1, #3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	189b      	adds	r3, r3, r2
 8002bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002bbc:	464b      	mov	r3, r9
 8002bbe:	460a      	mov	r2, r1
 8002bc0:	eb42 0303 	adc.w	r3, r2, r3
 8002bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002bd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002bdc:	460b      	mov	r3, r1
 8002bde:	18db      	adds	r3, r3, r3
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002be2:	4613      	mov	r3, r2
 8002be4:	eb42 0303 	adc.w	r3, r2, r3
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002bf2:	f7fd faef 	bl	80001d4 <__aeabi_uldivmod>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <UART_SetConfig+0x2d4>)
 8002bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	2164      	movs	r1, #100	; 0x64
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	3332      	adds	r3, #50	; 0x32
 8002c0e:	4a08      	ldr	r2, [pc, #32]	; (8002c30 <UART_SetConfig+0x2d4>)
 8002c10:	fba2 2303 	umull	r2, r3, r2, r3
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	f003 0207 	and.w	r2, r3, #7
 8002c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4422      	add	r2, r4
 8002c22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c24:	e106      	b.n	8002e34 <UART_SetConfig+0x4d8>
 8002c26:	bf00      	nop
 8002c28:	40011000 	.word	0x40011000
 8002c2c:	40011400 	.word	0x40011400
 8002c30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002c3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002c42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002c46:	4642      	mov	r2, r8
 8002c48:	464b      	mov	r3, r9
 8002c4a:	1891      	adds	r1, r2, r2
 8002c4c:	6239      	str	r1, [r7, #32]
 8002c4e:	415b      	adcs	r3, r3
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
 8002c52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c56:	4641      	mov	r1, r8
 8002c58:	1854      	adds	r4, r2, r1
 8002c5a:	4649      	mov	r1, r9
 8002c5c:	eb43 0501 	adc.w	r5, r3, r1
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	f04f 0300 	mov.w	r3, #0
 8002c68:	00eb      	lsls	r3, r5, #3
 8002c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c6e:	00e2      	lsls	r2, r4, #3
 8002c70:	4614      	mov	r4, r2
 8002c72:	461d      	mov	r5, r3
 8002c74:	4643      	mov	r3, r8
 8002c76:	18e3      	adds	r3, r4, r3
 8002c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c7c:	464b      	mov	r3, r9
 8002c7e:	eb45 0303 	adc.w	r3, r5, r3
 8002c82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002ca2:	4629      	mov	r1, r5
 8002ca4:	008b      	lsls	r3, r1, #2
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cac:	4621      	mov	r1, r4
 8002cae:	008a      	lsls	r2, r1, #2
 8002cb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002cb4:	f7fd fa8e 	bl	80001d4 <__aeabi_uldivmod>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4b60      	ldr	r3, [pc, #384]	; (8002e40 <UART_SetConfig+0x4e4>)
 8002cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	011c      	lsls	r4, r3, #4
 8002cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002cd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002cd8:	4642      	mov	r2, r8
 8002cda:	464b      	mov	r3, r9
 8002cdc:	1891      	adds	r1, r2, r2
 8002cde:	61b9      	str	r1, [r7, #24]
 8002ce0:	415b      	adcs	r3, r3
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce8:	4641      	mov	r1, r8
 8002cea:	1851      	adds	r1, r2, r1
 8002cec:	6139      	str	r1, [r7, #16]
 8002cee:	4649      	mov	r1, r9
 8002cf0:	414b      	adcs	r3, r1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d00:	4659      	mov	r1, fp
 8002d02:	00cb      	lsls	r3, r1, #3
 8002d04:	4651      	mov	r1, sl
 8002d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d0a:	4651      	mov	r1, sl
 8002d0c:	00ca      	lsls	r2, r1, #3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	4619      	mov	r1, r3
 8002d12:	4603      	mov	r3, r0
 8002d14:	4642      	mov	r2, r8
 8002d16:	189b      	adds	r3, r3, r2
 8002d18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d1c:	464b      	mov	r3, r9
 8002d1e:	460a      	mov	r2, r1
 8002d20:	eb42 0303 	adc.w	r3, r2, r3
 8002d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002d40:	4649      	mov	r1, r9
 8002d42:	008b      	lsls	r3, r1, #2
 8002d44:	4641      	mov	r1, r8
 8002d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d4a:	4641      	mov	r1, r8
 8002d4c:	008a      	lsls	r2, r1, #2
 8002d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002d52:	f7fd fa3f 	bl	80001d4 <__aeabi_uldivmod>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4b38      	ldr	r3, [pc, #224]	; (8002e40 <UART_SetConfig+0x4e4>)
 8002d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	2264      	movs	r2, #100	; 0x64
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	1acb      	subs	r3, r1, r3
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	3332      	adds	r3, #50	; 0x32
 8002d70:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <UART_SetConfig+0x4e4>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d7c:	441c      	add	r4, r3
 8002d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d82:	2200      	movs	r2, #0
 8002d84:	673b      	str	r3, [r7, #112]	; 0x70
 8002d86:	677a      	str	r2, [r7, #116]	; 0x74
 8002d88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	464b      	mov	r3, r9
 8002d90:	1891      	adds	r1, r2, r2
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	415b      	adcs	r3, r3
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d9c:	4641      	mov	r1, r8
 8002d9e:	1851      	adds	r1, r2, r1
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	4649      	mov	r1, r9
 8002da4:	414b      	adcs	r3, r1
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f04f 0300 	mov.w	r3, #0
 8002db0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002db4:	4659      	mov	r1, fp
 8002db6:	00cb      	lsls	r3, r1, #3
 8002db8:	4651      	mov	r1, sl
 8002dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dbe:	4651      	mov	r1, sl
 8002dc0:	00ca      	lsls	r2, r1, #3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4642      	mov	r2, r8
 8002dca:	189b      	adds	r3, r3, r2
 8002dcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dce:	464b      	mov	r3, r9
 8002dd0:	460a      	mov	r2, r1
 8002dd2:	eb42 0303 	adc.w	r3, r2, r3
 8002dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	663b      	str	r3, [r7, #96]	; 0x60
 8002de2:	667a      	str	r2, [r7, #100]	; 0x64
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002df0:	4649      	mov	r1, r9
 8002df2:	008b      	lsls	r3, r1, #2
 8002df4:	4641      	mov	r1, r8
 8002df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002dfa:	4641      	mov	r1, r8
 8002dfc:	008a      	lsls	r2, r1, #2
 8002dfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002e02:	f7fd f9e7 	bl	80001d4 <__aeabi_uldivmod>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <UART_SetConfig+0x4e4>)
 8002e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	2164      	movs	r1, #100	; 0x64
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	3332      	adds	r3, #50	; 0x32
 8002e1e:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <UART_SetConfig+0x4e4>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	f003 020f 	and.w	r2, r3, #15
 8002e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4422      	add	r2, r4
 8002e32:	609a      	str	r2, [r3, #8]
}
 8002e34:	bf00      	nop
 8002e36:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e40:	51eb851f 	.word	0x51eb851f

08002e44 <memset>:
 8002e44:	4402      	add	r2, r0
 8002e46:	4603      	mov	r3, r0
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <memset+0xa>
 8002e4c:	4770      	bx	lr
 8002e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e52:	e7f9      	b.n	8002e48 <memset+0x4>

08002e54 <__libc_init_array>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	4d0d      	ldr	r5, [pc, #52]	; (8002e8c <__libc_init_array+0x38>)
 8002e58:	4c0d      	ldr	r4, [pc, #52]	; (8002e90 <__libc_init_array+0x3c>)
 8002e5a:	1b64      	subs	r4, r4, r5
 8002e5c:	10a4      	asrs	r4, r4, #2
 8002e5e:	2600      	movs	r6, #0
 8002e60:	42a6      	cmp	r6, r4
 8002e62:	d109      	bne.n	8002e78 <__libc_init_array+0x24>
 8002e64:	4d0b      	ldr	r5, [pc, #44]	; (8002e94 <__libc_init_array+0x40>)
 8002e66:	4c0c      	ldr	r4, [pc, #48]	; (8002e98 <__libc_init_array+0x44>)
 8002e68:	f000 f818 	bl	8002e9c <_init>
 8002e6c:	1b64      	subs	r4, r4, r5
 8002e6e:	10a4      	asrs	r4, r4, #2
 8002e70:	2600      	movs	r6, #0
 8002e72:	42a6      	cmp	r6, r4
 8002e74:	d105      	bne.n	8002e82 <__libc_init_array+0x2e>
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
 8002e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e7c:	4798      	blx	r3
 8002e7e:	3601      	adds	r6, #1
 8002e80:	e7ee      	b.n	8002e60 <__libc_init_array+0xc>
 8002e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e86:	4798      	blx	r3
 8002e88:	3601      	adds	r6, #1
 8002e8a:	e7f2      	b.n	8002e72 <__libc_init_array+0x1e>
 8002e8c:	0800c9d0 	.word	0x0800c9d0
 8002e90:	0800c9d0 	.word	0x0800c9d0
 8002e94:	0800c9d0 	.word	0x0800c9d0
 8002e98:	0800c9d4 	.word	0x0800c9d4

08002e9c <_init>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	bf00      	nop
 8002ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea2:	bc08      	pop	{r3}
 8002ea4:	469e      	mov	lr, r3
 8002ea6:	4770      	bx	lr

08002ea8 <_fini>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	bf00      	nop
 8002eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eae:	bc08      	pop	{r3}
 8002eb0:	469e      	mov	lr, r3
 8002eb2:	4770      	bx	lr
