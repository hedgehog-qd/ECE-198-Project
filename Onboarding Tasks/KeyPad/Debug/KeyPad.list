
KeyPad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f8c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009b24  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc44  0800cc44  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc44  0800cc44  0001cc44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc4c  0800cc4c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc4c  0800cc4c  0001cc4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc50  0800cc50  0001cc50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800cc54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000002c  0800cc80  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  0800cc80  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a34f  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e4e  00000000  00000000  0002a3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002c240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000704  00000000  00000000  0002cb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014d6d  00000000  00000000  0002d274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d0c8  00000000  00000000  00041fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00083644  00000000  00000000  0004f0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023f4  00000000  00000000  000d26f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000d4ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003108 	.word	0x08003108

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	08003108 	.word	0x08003108

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <KeyPad_Init>:

KeyPad_t	KeyPad;

//#############################################################################################
void	KeyPad_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b086      	sub	sp, #24
 80004d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 80004d6:	4b2a      	ldr	r3, [pc, #168]	; (8000580 <KeyPad_Init+0xb0>)
 80004d8:	2204      	movs	r2, #4
 80004da:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 80004dc:	4b28      	ldr	r3, [pc, #160]	; (8000580 <KeyPad_Init+0xb0>)
 80004de:	2204      	movs	r2, #4
 80004e0:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	75fb      	strb	r3, [r7, #23]
 80004e6:	e022      	b.n	800052e <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	2301      	movs	r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
    gpio.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	60bb      	str	r3, [r7, #8]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 80004f4:	7dfb      	ldrb	r3, [r7, #23]
 80004f6:	4a23      	ldr	r2, [pc, #140]	; (8000584 <KeyPad_Init+0xb4>)
 80004f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004fc:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 80004fe:	7dfb      	ldrb	r3, [r7, #23]
 8000500:	4a21      	ldr	r2, [pc, #132]	; (8000588 <KeyPad_Init+0xb8>)
 8000502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000506:	463a      	mov	r2, r7
 8000508:	4611      	mov	r1, r2
 800050a:	4618      	mov	r0, r3
 800050c:	f001 fa30 	bl	8001970 <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000510:	7dfb      	ldrb	r3, [r7, #23]
 8000512:	4a1d      	ldr	r2, [pc, #116]	; (8000588 <KeyPad_Init+0xb8>)
 8000514:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000518:	7dfb      	ldrb	r3, [r7, #23]
 800051a:	4a1a      	ldr	r2, [pc, #104]	; (8000584 <KeyPad_Init+0xb4>)
 800051c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000520:	2201      	movs	r2, #1
 8000522:	4619      	mov	r1, r3
 8000524:	f001 fbc0 	bl	8001ca8 <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 8000528:	7dfb      	ldrb	r3, [r7, #23]
 800052a:	3301      	adds	r3, #1
 800052c:	75fb      	strb	r3, [r7, #23]
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <KeyPad_Init+0xb0>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	7dfa      	ldrb	r2, [r7, #23]
 8000534:	429a      	cmp	r2, r3
 8000536:	d3d7      	bcc.n	80004e8 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 8000538:	2300      	movs	r3, #0
 800053a:	75bb      	strb	r3, [r7, #22]
 800053c:	e016      	b.n	800056c <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
    gpio.Pull = GPIO_PULLUP;
 8000542:	2301      	movs	r3, #1
 8000544:	60bb      	str	r3, [r7, #8]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000546:	2300      	movs	r3, #0
 8000548:	60fb      	str	r3, [r7, #12]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 800054a:	7dbb      	ldrb	r3, [r7, #22]
 800054c:	4a0f      	ldr	r2, [pc, #60]	; (800058c <KeyPad_Init+0xbc>)
 800054e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000552:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);		
 8000554:	7dbb      	ldrb	r3, [r7, #22]
 8000556:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <KeyPad_Init+0xc0>)
 8000558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800055c:	463a      	mov	r2, r7
 800055e:	4611      	mov	r1, r2
 8000560:	4618      	mov	r0, r3
 8000562:	f001 fa05 	bl	8001970 <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 8000566:	7dbb      	ldrb	r3, [r7, #22]
 8000568:	3301      	adds	r3, #1
 800056a:	75bb      	strb	r3, [r7, #22]
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <KeyPad_Init+0xb0>)
 800056e:	785b      	ldrb	r3, [r3, #1]
 8000570:	7dba      	ldrb	r2, [r7, #22]
 8000572:	429a      	cmp	r2, r3
 8000574:	d3e3      	bcc.n	800053e <KeyPad_Init+0x6e>
  }
}
 8000576:	bf00      	nop
 8000578:	bf00      	nop
 800057a:	3718      	adds	r7, #24
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000048 	.word	0x20000048
 8000584:	08003120 	.word	0x08003120
 8000588:	20000000 	.word	0x20000000
 800058c:	08003128 	.word	0x08003128
 8000590:	20000010 	.word	0x20000010

08000594 <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 800059a:	2300      	movs	r3, #0
 800059c:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 800059e:	2300      	movs	r3, #0
 80005a0:	71fb      	strb	r3, [r7, #7]
 80005a2:	e07e      	b.n	80006a2 <KeyPad_Scan+0x10e>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 80005a4:	2300      	movs	r3, #0
 80005a6:	71bb      	strb	r3, [r7, #6]
 80005a8:	e00e      	b.n	80005c8 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	4a42      	ldr	r2, [pc, #264]	; (80006b8 <KeyPad_Scan+0x124>)
 80005ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005b2:	79bb      	ldrb	r3, [r7, #6]
 80005b4:	4a41      	ldr	r2, [pc, #260]	; (80006bc <KeyPad_Scan+0x128>)
 80005b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ba:	2201      	movs	r2, #1
 80005bc:	4619      	mov	r1, r3
 80005be:	f001 fb73 	bl	8001ca8 <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	3301      	adds	r3, #1
 80005c6:	71bb      	strb	r3, [r7, #6]
 80005c8:	4b3d      	ldr	r3, [pc, #244]	; (80006c0 <KeyPad_Scan+0x12c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	79ba      	ldrb	r2, [r7, #6]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d3eb      	bcc.n	80005aa <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	4a38      	ldr	r2, [pc, #224]	; (80006b8 <KeyPad_Scan+0x124>)
 80005d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	4a37      	ldr	r2, [pc, #220]	; (80006bc <KeyPad_Scan+0x128>)
 80005de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e2:	2200      	movs	r2, #0
 80005e4:	4619      	mov	r1, r3
 80005e6:	f001 fb5f 	bl	8001ca8 <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 80005ea:	2005      	movs	r0, #5
 80005ec:	f001 f8b6 	bl	800175c <HAL_Delay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	717b      	strb	r3, [r7, #5]
 80005f4:	e04d      	b.n	8000692 <KeyPad_Scan+0xfe>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 80005f6:	797b      	ldrb	r3, [r7, #5]
 80005f8:	4a32      	ldr	r2, [pc, #200]	; (80006c4 <KeyPad_Scan+0x130>)
 80005fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005fe:	797b      	ldrb	r3, [r7, #5]
 8000600:	4931      	ldr	r1, [pc, #196]	; (80006c8 <KeyPad_Scan+0x134>)
 8000602:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000606:	4619      	mov	r1, r3
 8000608:	4610      	mov	r0, r2
 800060a:	f001 fb35 	bl	8001c78 <HAL_GPIO_ReadPin>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d13b      	bne.n	800068c <KeyPad_Scan+0xf8>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000614:	2014      	movs	r0, #20
 8000616:	f001 f8a1 	bl	800175c <HAL_Delay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 800061a:	797b      	ldrb	r3, [r7, #5]
 800061c:	4a29      	ldr	r2, [pc, #164]	; (80006c4 <KeyPad_Scan+0x130>)
 800061e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000622:	797b      	ldrb	r3, [r7, #5]
 8000624:	4928      	ldr	r1, [pc, #160]	; (80006c8 <KeyPad_Scan+0x134>)
 8000626:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800062a:	4619      	mov	r1, r3
 800062c:	4610      	mov	r0, r2
 800062e:	f001 fb23 	bl	8001c78 <HAL_GPIO_ReadPin>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d129      	bne.n	800068c <KeyPad_Scan+0xf8>
        {
          key |= 1<<c;					
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	2201      	movs	r2, #1
 800063c:	fa02 f303 	lsl.w	r3, r2, r3
 8000640:	b21a      	sxth	r2, r3
 8000642:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000646:	4313      	orrs	r3, r2
 8000648:	b21b      	sxth	r3, r3
 800064a:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 800064c:	797b      	ldrb	r3, [r7, #5]
 800064e:	3308      	adds	r3, #8
 8000650:	2201      	movs	r2, #1
 8000652:	fa02 f303 	lsl.w	r3, r2, r3
 8000656:	b21a      	sxth	r2, r3
 8000658:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800065c:	4313      	orrs	r3, r2
 800065e:	b21b      	sxth	r3, r3
 8000660:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000662:	e002      	b.n	800066a <KeyPad_Scan+0xd6>
            _KEYPAD_DELAY(5);
 8000664:	2005      	movs	r0, #5
 8000666:	f001 f879 	bl	800175c <HAL_Delay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 800066a:	797b      	ldrb	r3, [r7, #5]
 800066c:	4a15      	ldr	r2, [pc, #84]	; (80006c4 <KeyPad_Scan+0x130>)
 800066e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000672:	797b      	ldrb	r3, [r7, #5]
 8000674:	4914      	ldr	r1, [pc, #80]	; (80006c8 <KeyPad_Scan+0x134>)
 8000676:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800067a:	4619      	mov	r1, r3
 800067c:	4610      	mov	r0, r2
 800067e:	f001 fafb 	bl	8001c78 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0ed      	beq.n	8000664 <KeyPad_Scan+0xd0>
          return key;
 8000688:	887b      	ldrh	r3, [r7, #2]
 800068a:	e011      	b.n	80006b0 <KeyPad_Scan+0x11c>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 800068c:	797b      	ldrb	r3, [r7, #5]
 800068e:	3301      	adds	r3, #1
 8000690:	717b      	strb	r3, [r7, #5]
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <KeyPad_Scan+0x12c>)
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	797a      	ldrb	r2, [r7, #5]
 8000698:	429a      	cmp	r2, r3
 800069a:	d3ac      	bcc.n	80005f6 <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	3301      	adds	r3, #1
 80006a0:	71fb      	strb	r3, [r7, #7]
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <KeyPad_Scan+0x12c>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	79fa      	ldrb	r2, [r7, #7]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	f4ff af7b 	bcc.w	80005a4 <KeyPad_Scan+0x10>
        }
      }			
    }		
  }
  return key;
 80006ae:	887b      	ldrh	r3, [r7, #2]
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000000 	.word	0x20000000
 80006bc:	08003120 	.word	0x08003120
 80006c0:	20000048 	.word	0x20000048
 80006c4:	20000010 	.word	0x20000010
 80006c8:	08003128 	.word	0x08003128

080006cc <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{	
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 80006d4:	e00e      	b.n	80006f4 <KeyPad_WaitForKey+0x28>
  {
    keyRead = KeyPad_Scan();
 80006d6:	f7ff ff5d 	bl	8000594 <KeyPad_Scan>
 80006da:	4603      	mov	r3, r0
 80006dc:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 80006de:	897b      	ldrh	r3, [r7, #10]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d004      	beq.n	80006ee <KeyPad_WaitForKey+0x22>
		{
			KeyPad.LastKey = keyRead;
 80006e4:	4a16      	ldr	r2, [pc, #88]	; (8000740 <KeyPad_WaitForKey+0x74>)
 80006e6:	897b      	ldrh	r3, [r7, #10]
 80006e8:	8053      	strh	r3, [r2, #2]
			return keyRead;	
 80006ea:	897b      	ldrh	r3, [r7, #10]
 80006ec:	e024      	b.n	8000738 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);	
 80006ee:	2014      	movs	r0, #20
 80006f0:	f001 f834 	bl	800175c <HAL_Delay>
  while(Timeout_ms==0)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d0ed      	beq.n	80006d6 <KeyPad_WaitForKey+0xa>
	}
	uint32_t	StartTime = HAL_GetTick();
 80006fa:	f001 f823 	bl	8001744 <HAL_GetTick>
 80006fe:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 8000700:	e00e      	b.n	8000720 <KeyPad_WaitForKey+0x54>
	{
		keyRead = KeyPad_Scan();
 8000702:	f7ff ff47 	bl	8000594 <KeyPad_Scan>
 8000706:	4603      	mov	r3, r0
 8000708:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 800070a:	897b      	ldrh	r3, [r7, #10]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d004      	beq.n	800071a <KeyPad_WaitForKey+0x4e>
		{
			KeyPad.LastKey = keyRead;
 8000710:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <KeyPad_WaitForKey+0x74>)
 8000712:	897b      	ldrh	r3, [r7, #10]
 8000714:	8053      	strh	r3, [r2, #2]
			return keyRead;	
 8000716:	897b      	ldrh	r3, [r7, #10]
 8000718:	e00e      	b.n	8000738 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);	
 800071a:	2014      	movs	r0, #20
 800071c:	f001 f81e 	bl	800175c <HAL_Delay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 8000720:	f001 f810 	bl	8001744 <HAL_GetTick>
 8000724:	4602      	mov	r2, r0
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	429a      	cmp	r2, r3
 800072e:	d8e8      	bhi.n	8000702 <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey=0;
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <KeyPad_WaitForKey+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	805a      	strh	r2, [r3, #2]
	return 0;
 8000736:	2300      	movs	r3, #0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000048 	.word	0x20000048

08000744 <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f7ff ffbd 	bl	80006cc <KeyPad_WaitForKey>
 8000752:	4603      	mov	r3, r0
 8000754:	f640 0208 	movw	r2, #2056	; 0x808
 8000758:	4293      	cmp	r3, r2
 800075a:	f300 809f 	bgt.w	800089c <KeyPad_WaitForKeyGetChar+0x158>
 800075e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000762:	dc1a      	bgt.n	800079a <KeyPad_WaitForKeyGetChar+0x56>
 8000764:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000768:	f300 8098 	bgt.w	800089c <KeyPad_WaitForKeyGetChar+0x158>
 800076c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000770:	dc2a      	bgt.n	80007c8 <KeyPad_WaitForKeyGetChar+0x84>
 8000772:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8000776:	f300 8091 	bgt.w	800089c <KeyPad_WaitForKeyGetChar+0x158>
 800077a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800077e:	dc3b      	bgt.n	80007f8 <KeyPad_WaitForKeyGetChar+0xb4>
 8000780:	2b00      	cmp	r3, #0
 8000782:	d069      	beq.n	8000858 <KeyPad_WaitForKeyGetChar+0x114>
 8000784:	2b00      	cmp	r3, #0
 8000786:	f2c0 8089 	blt.w	800089c <KeyPad_WaitForKeyGetChar+0x158>
 800078a:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800078e:	f300 8085 	bgt.w	800089c <KeyPad_WaitForKeyGetChar+0x158>
 8000792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000796:	dc47      	bgt.n	8000828 <KeyPad_WaitForKeyGetChar+0xe4>
 8000798:	e080      	b.n	800089c <KeyPad_WaitForKeyGetChar+0x158>
 800079a:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 800079e:	2b07      	cmp	r3, #7
 80007a0:	d87c      	bhi.n	800089c <KeyPad_WaitForKeyGetChar+0x158>
 80007a2:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <KeyPad_WaitForKeyGetChar+0x64>)
 80007a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a8:	08000869 	.word	0x08000869
 80007ac:	08000879 	.word	0x08000879
 80007b0:	0800089d 	.word	0x0800089d
 80007b4:	08000889 	.word	0x08000889
 80007b8:	0800089d 	.word	0x0800089d
 80007bc:	0800089d 	.word	0x0800089d
 80007c0:	0800089d 	.word	0x0800089d
 80007c4:	08000899 	.word	0x08000899
 80007c8:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80007cc:	2b07      	cmp	r3, #7
 80007ce:	d865      	bhi.n	800089c <KeyPad_WaitForKeyGetChar+0x158>
 80007d0:	a201      	add	r2, pc, #4	; (adr r2, 80007d8 <KeyPad_WaitForKeyGetChar+0x94>)
 80007d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d6:	bf00      	nop
 80007d8:	08000865 	.word	0x08000865
 80007dc:	08000875 	.word	0x08000875
 80007e0:	0800089d 	.word	0x0800089d
 80007e4:	08000885 	.word	0x08000885
 80007e8:	0800089d 	.word	0x0800089d
 80007ec:	0800089d 	.word	0x0800089d
 80007f0:	0800089d 	.word	0x0800089d
 80007f4:	08000895 	.word	0x08000895
 80007f8:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80007fc:	2b07      	cmp	r3, #7
 80007fe:	d84d      	bhi.n	800089c <KeyPad_WaitForKeyGetChar+0x158>
 8000800:	a201      	add	r2, pc, #4	; (adr r2, 8000808 <KeyPad_WaitForKeyGetChar+0xc4>)
 8000802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000806:	bf00      	nop
 8000808:	08000861 	.word	0x08000861
 800080c:	08000871 	.word	0x08000871
 8000810:	0800089d 	.word	0x0800089d
 8000814:	08000881 	.word	0x08000881
 8000818:	0800089d 	.word	0x0800089d
 800081c:	0800089d 	.word	0x0800089d
 8000820:	0800089d 	.word	0x0800089d
 8000824:	08000891 	.word	0x08000891
 8000828:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800082c:	2b07      	cmp	r3, #7
 800082e:	d835      	bhi.n	800089c <KeyPad_WaitForKeyGetChar+0x158>
 8000830:	a201      	add	r2, pc, #4	; (adr r2, 8000838 <KeyPad_WaitForKeyGetChar+0xf4>)
 8000832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000836:	bf00      	nop
 8000838:	0800085d 	.word	0x0800085d
 800083c:	0800086d 	.word	0x0800086d
 8000840:	0800089d 	.word	0x0800089d
 8000844:	0800087d 	.word	0x0800087d
 8000848:	0800089d 	.word	0x0800089d
 800084c:	0800089d 	.word	0x0800089d
 8000850:	0800089d 	.word	0x0800089d
 8000854:	0800088d 	.word	0x0800088d
  {
    case 0x0000:
      return 0;
 8000858:	2300      	movs	r3, #0
 800085a:	e020      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0101:
			return '1';
 800085c:	2331      	movs	r3, #49	; 0x31
 800085e:	e01e      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0201:
			return '2';
 8000860:	2332      	movs	r3, #50	; 0x32
 8000862:	e01c      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0401:
			return '3';
 8000864:	2333      	movs	r3, #51	; 0x33
 8000866:	e01a      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0801:
			return 'A';
 8000868:	2341      	movs	r3, #65	; 0x41
 800086a:	e018      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0102:
			return '4';
 800086c:	2334      	movs	r3, #52	; 0x34
 800086e:	e016      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0202:
			return '5';
 8000870:	2335      	movs	r3, #53	; 0x35
 8000872:	e014      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0402:
			return '6';
 8000874:	2336      	movs	r3, #54	; 0x36
 8000876:	e012      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0802:
			return 'B';
 8000878:	2342      	movs	r3, #66	; 0x42
 800087a:	e010      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0104:
			return '7';
 800087c:	2337      	movs	r3, #55	; 0x37
 800087e:	e00e      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0204:
			return '8';		
 8000880:	2338      	movs	r3, #56	; 0x38
 8000882:	e00c      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0404:
			return '9';
 8000884:	2339      	movs	r3, #57	; 0x39
 8000886:	e00a      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0804:
			return 'C';
 8000888:	2343      	movs	r3, #67	; 0x43
 800088a:	e008      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0108:
			return '*';				
 800088c:	232a      	movs	r3, #42	; 0x2a
 800088e:	e006      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0208:
			return '0';				
 8000890:	2330      	movs	r3, #48	; 0x30
 8000892:	e004      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0408:
			return '#';
 8000894:	2323      	movs	r3, #35	; 0x23
 8000896:	e002      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0808:
			return 'D';
 8000898:	2344      	movs	r3, #68	; 0x44
 800089a:	e000      	b.n	800089e <KeyPad_WaitForKeyGetChar+0x15a>
		
		default:
			return 0;		
 800089c:	2300      	movs	r3, #0
	}	
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop

080008a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <MX_GPIO_Init+0x158>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a4e      	ldr	r2, [pc, #312]	; (8000a00 <MX_GPIO_Init+0x158>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <MX_GPIO_Init+0x158>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b48      	ldr	r3, [pc, #288]	; (8000a00 <MX_GPIO_Init+0x158>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a47      	ldr	r2, [pc, #284]	; (8000a00 <MX_GPIO_Init+0x158>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b45      	ldr	r3, [pc, #276]	; (8000a00 <MX_GPIO_Init+0x158>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	4b41      	ldr	r3, [pc, #260]	; (8000a00 <MX_GPIO_Init+0x158>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a40      	ldr	r2, [pc, #256]	; (8000a00 <MX_GPIO_Init+0x158>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b3e      	ldr	r3, [pc, #248]	; (8000a00 <MX_GPIO_Init+0x158>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b3a      	ldr	r3, [pc, #232]	; (8000a00 <MX_GPIO_Init+0x158>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a39      	ldr	r2, [pc, #228]	; (8000a00 <MX_GPIO_Init+0x158>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <MX_GPIO_Init+0x158>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	2142      	movs	r1, #66	; 0x42
 8000932:	4834      	ldr	r0, [pc, #208]	; (8000a04 <MX_GPIO_Init+0x15c>)
 8000934:	f001 f9b8 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 519b 	mov.w	r1, #4960	; 0x1360
 800093e:	4832      	ldr	r0, [pc, #200]	; (8000a08 <MX_GPIO_Init+0x160>)
 8000940:	f001 f9b2 	bl	8001ca8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_RS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 800094a:	4830      	ldr	r0, [pc, #192]	; (8000a0c <MX_GPIO_Init+0x164>)
 800094c:	f001 f9ac 	bl	8001ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000950:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000956:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4827      	ldr	r0, [pc, #156]	; (8000a04 <MX_GPIO_Init+0x15c>)
 8000968:	f001 f802 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC5 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_8;
 800096c:	f240 1325 	movw	r3, #293	; 0x125
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	4820      	ldr	r0, [pc, #128]	; (8000a04 <MX_GPIO_Init+0x15c>)
 8000982:	f000 fff5 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8000986:	2342      	movs	r3, #66	; 0x42
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	4819      	ldr	r0, [pc, #100]	; (8000a04 <MX_GPIO_Init+0x15c>)
 800099e:	f000 ffe7 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA8 PA9
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
 80009a2:	f44f 539b 	mov.w	r3, #4960	; 0x1360
 80009a6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4813      	ldr	r0, [pc, #76]	; (8000a08 <MX_GPIO_Init+0x160>)
 80009bc:	f000 ffd8 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_RS_Pin|LCD_CS_Pin;
 80009c0:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80009c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	480c      	ldr	r0, [pc, #48]	; (8000a0c <MX_GPIO_Init+0x164>)
 80009da:	f000 ffc9 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_GPIO_Init+0x160>)
 80009f4:	f000 ffbc 	bl	8001970 <HAL_GPIO_Init>

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40020400 	.word	0x40020400

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a16:	f000 fe2f 	bl	8001678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1a:	f000 f829 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1e:	f7ff ff43 	bl	80008a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a22:	f000 fd8d 	bl	8001540 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000a26:	f000 f895 	bl	8000b54 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 8000a2a:	f000 f949 	bl	8000cc0 <ST7735_Init>
  	  ST7735_FillScreen(ST7735_BLACK);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 fc10 	bl	8001254 <ST7735_FillScreen>
  	  ST7735_DrawImage(0,160,120,160,gImage_lzy);
 8000a34:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <main+0x5c>)
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	23a0      	movs	r3, #160	; 0xa0
 8000a3a:	2278      	movs	r2, #120	; 0x78
 8000a3c:	21a0      	movs	r1, #160	; 0xa0
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 fc1a 	bl	8001278 <ST7735_DrawImage>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	KeyPad_Init();
 8000a44:	f7ff fd44 	bl	80004d0 <KeyPad_Init>

						HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
										HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
										HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
*/
	  ST7735_DrawCharS(10, 10, KeyPad_WaitForKeyGetChar(500), ST7735_BLACK, ST7735_GREEN,4);
 8000a48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a4c:	f7ff fe7a 	bl	8000744 <KeyPad_WaitForKeyGetChar>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	2304      	movs	r3, #4
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000a5c:	9300      	str	r3, [sp, #0]
 8000a5e:	2300      	movs	r3, #0
 8000a60:	210a      	movs	r1, #10
 8000a62:	200a      	movs	r0, #10
 8000a64:	f000 fab2 	bl	8000fcc <ST7735_DrawCharS>
 8000a68:	e7ee      	b.n	8000a48 <main+0x38>
 8000a6a:	bf00      	nop
 8000a6c:	08003130 	.word	0x08003130

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	; 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	; 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fb16 	bl	80030b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <SystemClock_Config+0xd0>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <SystemClock_Config+0xd0>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <SystemClock_Config+0xd0>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <SystemClock_Config+0xd4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000abc:	4a21      	ldr	r2, [pc, #132]	; (8000b44 <SystemClock_Config+0xd4>)
 8000abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <SystemClock_Config+0xd4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad8:	2310      	movs	r3, #16
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000adc:	2302      	movs	r3, #2
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ae8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000aec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aee:	2304      	movs	r3, #4
 8000af0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000af2:	2307      	movs	r3, #7
 8000af4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af6:	f107 0320 	add.w	r3, r7, #32
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 f8ee 	bl	8001cdc <HAL_RCC_OscConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b06:	f000 f81f 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2102      	movs	r1, #2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fb50 	bl	80021cc <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b32:	f000 f809 	bl	8000b48 <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	; 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <Error_Handler+0x8>
	...

08000b54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b5a:	4a18      	ldr	r2, [pc, #96]	; (8000bbc <MX_SPI1_Init+0x68>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b5e:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b88:	2220      	movs	r2, #32
 8000b8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000ba0:	220a      	movs	r2, #10
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_SPI1_Init+0x64>)
 8000ba6:	f001 fd31 	bl	800260c <HAL_SPI_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bb0:	f7ff ffca 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000004c 	.word	0x2000004c
 8000bbc:	40013000 	.word	0x40013000

08000bc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <HAL_SPI_MspInit+0x84>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d12b      	bne.n	8000c3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_SPI_MspInit+0x88>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <HAL_SPI_MspInit+0x88>)
 8000bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_SPI_MspInit+0x88>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_SPI_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a10      	ldr	r2, [pc, #64]	; (8000c48 <HAL_SPI_MspInit+0x88>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_SPI_MspInit+0x88>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000c1a:	2328      	movs	r3, #40	; 0x28
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2a:	2305      	movs	r3, #5
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <HAL_SPI_MspInit+0x8c>)
 8000c36:	f000 fe9b 	bl	8001970 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	; 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40013000 	.word	0x40013000
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40020400 	.word	0x40020400

08000c50 <ST7735_SetAddressWindow>:
int32_t Ymax,Ymin,X;        // X goes from 0 to 127
int32_t Yrange; //YrangeDiv2;
int TimeIndex;
uint16_t PlotBGColor;
 
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4604      	mov	r4, r0
 8000c58:	4608      	mov	r0, r1
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4623      	mov	r3, r4
 8000c60:	71fb      	strb	r3, [r7, #7]
 8000c62:	4603      	mov	r3, r0
 8000c64:	71bb      	strb	r3, [r7, #6]
 8000c66:	460b      	mov	r3, r1
 8000c68:	717b      	strb	r3, [r7, #5]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	713b      	strb	r3, [r7, #4]
    lcd7735_sendCmd(ST7735_CASET); // Column addr set
 8000c6e:	202a      	movs	r0, #42	; 0x2a
 8000c70:	f000 fbc4 	bl	80013fc <lcd7735_sendCmd>
		lcd7735_sendData(0x00);            // XS15 ~ XS8
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 fbd7 	bl	8001428 <lcd7735_sendData>
		lcd7735_sendData(x0+ST7735_XSTART);     // XSTART       XS7 ~ XS0
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fbd3 	bl	8001428 <lcd7735_sendData>
		lcd7735_sendData(0x00);            // XE15 ~ XE8
 8000c82:	2000      	movs	r0, #0
 8000c84:	f000 fbd0 	bl	8001428 <lcd7735_sendData>
		lcd7735_sendData(x1+ST7735_XSTART);     // XEND         XE7 ~ XE0
 8000c88:	797b      	ldrb	r3, [r7, #5]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fbcc 	bl	8001428 <lcd7735_sendData>
 
		lcd7735_sendCmd(ST7735_RASET); // Row addr set
 8000c90:	202b      	movs	r0, #43	; 0x2b
 8000c92:	f000 fbb3 	bl	80013fc <lcd7735_sendCmd>
		lcd7735_sendData(0x00);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 fbc6 	bl	8001428 <lcd7735_sendData>
		lcd7735_sendData(y0+ST7735_YSTART);     // YSTART
 8000c9c:	79bb      	ldrb	r3, [r7, #6]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 fbc2 	bl	8001428 <lcd7735_sendData>
		lcd7735_sendData(0x00);
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f000 fbbf 	bl	8001428 <lcd7735_sendData>
		lcd7735_sendData(y1+ST7735_YSTART);     // YEND
 8000caa:	793b      	ldrb	r3, [r7, #4]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 fbbb 	bl	8001428 <lcd7735_sendData>
	
		lcd7735_sendCmd(ST7735_RAMWR); 
 8000cb2:	202c      	movs	r0, #44	; 0x2c
 8000cb4:	f000 fba2 	bl	80013fc <lcd7735_sendCmd>
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd90      	pop	{r4, r7, pc}

08000cc0 <ST7735_Init>:
void ST7735_Init() {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
    //ST7735_Select();
	  LCD_CS0;
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cca:	4810      	ldr	r0, [pc, #64]	; (8000d0c <ST7735_Init+0x4c>)
 8000ccc:	f000 ffec 	bl	8001ca8 <HAL_GPIO_WritePin>
    //ST7735_Reset();
	  LCD_RST0;
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd6:	480d      	ldr	r0, [pc, #52]	; (8000d0c <ST7735_Init+0x4c>)
 8000cd8:	f000 ffe6 	bl	8001ca8 <HAL_GPIO_WritePin>
		HAL_Delay(7);
 8000cdc:	2007      	movs	r0, #7
 8000cde:	f000 fd3d 	bl	800175c <HAL_Delay>
		LCD_RST1;
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce8:	4808      	ldr	r0, [pc, #32]	; (8000d0c <ST7735_Init+0x4c>)
 8000cea:	f000 ffdd 	bl	8001ca8 <HAL_GPIO_WritePin>
	
    //ST7735_ExecuteCommandList(init_cmds1);
		ST7735_Init_Command1();
 8000cee:	f000 f80f 	bl	8000d10 <ST7735_Init_Command1>
    //ST7735_ExecuteCommandList(init_cmds2);
		ST7735_Init_Command2();
 8000cf2:	f000 f893 	bl	8000e1c <ST7735_Init_Command2>
    //ST7735_ExecuteCommandList(init_cmds3);
		ST7735_Init_Command3();
 8000cf6:	f000 f8b3 	bl	8000e60 <ST7735_Init_Command3>
	
    //ST7735_Unselect();
		LCD_CS1;		
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <ST7735_Init+0x4c>)
 8000d02:	f000 ffd1 	bl	8001ca8 <HAL_GPIO_WritePin>
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40020400 	.word	0x40020400

08000d10 <ST7735_Init_Command1>:
 
void ST7735_Init_Command1(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_SWRESET);		//  1: Software reset
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 fb71 	bl	80013fc <lcd7735_sendCmd>
	HAL_Delay(150);
 8000d1a:	2096      	movs	r0, #150	; 0x96
 8000d1c:	f000 fd1e 	bl	800175c <HAL_Delay>
	lcd7735_sendCmd(ST7735_SLPOUT);			//  2: Out of sleep mode
 8000d20:	2011      	movs	r0, #17
 8000d22:	f000 fb6b 	bl	80013fc <lcd7735_sendCmd>
	HAL_Delay(500);
 8000d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d2a:	f000 fd17 	bl	800175c <HAL_Delay>
	lcd7735_sendCmd(ST7735_FRMCTR1);		//  3: Frame rate ctrl - normal mode
 8000d2e:	20b1      	movs	r0, #177	; 0xb1
 8000d30:	f000 fb64 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8000d34:	2001      	movs	r0, #1
 8000d36:	f000 fb77 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000d3a:	202c      	movs	r0, #44	; 0x2c
 8000d3c:	f000 fb74 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000d40:	202d      	movs	r0, #45	; 0x2d
 8000d42:	f000 fb71 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR2);		//  4: Frame rate control - idle mode
 8000d46:	20b2      	movs	r0, #178	; 0xb2
 8000d48:	f000 fb58 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//  Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f000 fb6b 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000d52:	202c      	movs	r0, #44	; 0x2c
 8000d54:	f000 fb68 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000d58:	202d      	movs	r0, #45	; 0x2d
 8000d5a:	f000 fb65 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR3);		//  5: Frame rate ctrl - partial mode
 8000d5e:	20b3      	movs	r0, #179	; 0xb3
 8000d60:	f000 fb4c 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//     Dot inversion mode
 8000d64:	2001      	movs	r0, #1
 8000d66:	f000 fb5f 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000d6a:	202c      	movs	r0, #44	; 0x2c
 8000d6c:	f000 fb5c 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000d70:	202d      	movs	r0, #45	; 0x2d
 8000d72:	f000 fb59 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x01);							//     Line inversion mode
 8000d76:	2001      	movs	r0, #1
 8000d78:	f000 fb56 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000d7c:	202c      	movs	r0, #44	; 0x2c
 8000d7e:	f000 fb53 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000d82:	202d      	movs	r0, #45	; 0x2d
 8000d84:	f000 fb50 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_INVCTR);			//  6: Display inversion ctrl
 8000d88:	20b4      	movs	r0, #180	; 0xb4
 8000d8a:	f000 fb37 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(0x07);							//     No inversion
 8000d8e:	2007      	movs	r0, #7
 8000d90:	f000 fb4a 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR1);			//  7: Power control
 8000d94:	20c0      	movs	r0, #192	; 0xc0
 8000d96:	f000 fb31 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(0xA2);
 8000d9a:	20a2      	movs	r0, #162	; 0xa2
 8000d9c:	f000 fb44 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x02);							//     -4.6V
 8000da0:	2002      	movs	r0, #2
 8000da2:	f000 fb41 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x84);							//     AUTO mode
 8000da6:	2084      	movs	r0, #132	; 0x84
 8000da8:	f000 fb3e 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR2);			//  8: Power control
 8000dac:	20c1      	movs	r0, #193	; 0xc1
 8000dae:	f000 fb25 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(0xC5);							//     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 8000db2:	20c5      	movs	r0, #197	; 0xc5
 8000db4:	f000 fb38 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR3);			//  9: Power control
 8000db8:	20c2      	movs	r0, #194	; 0xc2
 8000dba:	f000 fb1f 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(0x0A);							//     Opamp current small
 8000dbe:	200a      	movs	r0, #10
 8000dc0:	f000 fb32 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     Boost frequency
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f000 fb2f 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR4);			// 10: Power control
 8000dca:	20c3      	movs	r0, #195	; 0xc3
 8000dcc:	f000 fb16 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);							//     BCLK/2, Opamp current small & Medium low
 8000dd0:	208a      	movs	r0, #138	; 0x8a
 8000dd2:	f000 fb29 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2A);
 8000dd6:	202a      	movs	r0, #42	; 0x2a
 8000dd8:	f000 fb26 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR5);			// 11: Power control
 8000ddc:	20c4      	movs	r0, #196	; 0xc4
 8000dde:	f000 fb0d 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);
 8000de2:	208a      	movs	r0, #138	; 0x8a
 8000de4:	f000 fb20 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0xEE);
 8000de8:	20ee      	movs	r0, #238	; 0xee
 8000dea:	f000 fb1d 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_VMCTR1);			// 12: Power control
 8000dee:	20c5      	movs	r0, #197	; 0xc5
 8000df0:	f000 fb04 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(0x0E);
 8000df4:	200e      	movs	r0, #14
 8000df6:	f000 fb17 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_INVOFF);			// 13: Don't invert display
 8000dfa:	2020      	movs	r0, #32
 8000dfc:	f000 fafe 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendCmd(ST7735_MADCTL);			// 14: Memory access control (directions)
 8000e00:	2036      	movs	r0, #54	; 0x36
 8000e02:	f000 fafb 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(ST7735_ROTATION);	//     row addr/col addr, bottom to top refresh
 8000e06:	20c0      	movs	r0, #192	; 0xc0
 8000e08:	f000 fb0e 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_COLMOD);			// 15: set color mode
 8000e0c:	203a      	movs	r0, #58	; 0x3a
 8000e0e:	f000 faf5 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(0x05);							//     16-bit color
 8000e12:	2005      	movs	r0, #5
 8000e14:	f000 fb08 	bl	8001428 <lcd7735_sendData>
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <ST7735_Init_Command2>:
 
void ST7735_Init_Command2(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_CASET);			//  1: Column addr set
 8000e20:	202a      	movs	r0, #42	; 0x2a
 8000e22:	f000 faeb 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 8000e26:	2000      	movs	r0, #0
 8000e28:	f000 fafe 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 fafb 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 faf8 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 8000e38:	207f      	movs	r0, #127	; 0x7f
 8000e3a:	f000 faf5 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_RASET);			//  2: Row addr set
 8000e3e:	202b      	movs	r0, #43	; 0x2b
 8000e40:	f000 fadc 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 faef 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	f000 faec 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 fae9 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 8000e56:	207f      	movs	r0, #127	; 0x7f
 8000e58:	f000 fae6 	bl	8001428 <lcd7735_sendData>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <ST7735_Init_Command3>:
 
void ST7735_Init_Command3(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_GMCTRP1);  //  1: Magical unicorn dust
 8000e64:	20e0      	movs	r0, #224	; 0xe0
 8000e66:	f000 fac9 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(0x02);
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f000 fadc 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x1C);
 8000e70:	201c      	movs	r0, #28
 8000e72:	f000 fad9 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8000e76:	2007      	movs	r0, #7
 8000e78:	f000 fad6 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x12);
 8000e7c:	2012      	movs	r0, #18
 8000e7e:	f000 fad3 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x37);
 8000e82:	2037      	movs	r0, #55	; 0x37
 8000e84:	f000 fad0 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x32);
 8000e88:	2032      	movs	r0, #50	; 0x32
 8000e8a:	f000 facd 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000e8e:	2029      	movs	r0, #41	; 0x29
 8000e90:	f000 faca 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000e94:	202d      	movs	r0, #45	; 0x2d
 8000e96:	f000 fac7 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000e9a:	2029      	movs	r0, #41	; 0x29
 8000e9c:	f000 fac4 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x25);
 8000ea0:	2025      	movs	r0, #37	; 0x25
 8000ea2:	f000 fac1 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2B);
 8000ea6:	202b      	movs	r0, #43	; 0x2b
 8000ea8:	f000 fabe 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x39);
 8000eac:	2039      	movs	r0, #57	; 0x39
 8000eae:	f000 fabb 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 fab8 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x01);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f000 fab5 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x03);
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f000 fab2 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x10);
 8000ec4:	2010      	movs	r0, #16
 8000ec6:	f000 faaf 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_GMCTRN1);  //  2: Sparkles and rainbows
 8000eca:	20e1      	movs	r0, #225	; 0xe1
 8000ecc:	f000 fa96 	bl	80013fc <lcd7735_sendCmd>
	lcd7735_sendData(0x03);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 faa9 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x1D);
 8000ed6:	201d      	movs	r0, #29
 8000ed8:	f000 faa6 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8000edc:	2007      	movs	r0, #7
 8000ede:	f000 faa3 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x06);
 8000ee2:	2006      	movs	r0, #6
 8000ee4:	f000 faa0 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000ee8:	202e      	movs	r0, #46	; 0x2e
 8000eea:	f000 fa9d 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8000eee:	202c      	movs	r0, #44	; 0x2c
 8000ef0:	f000 fa9a 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x29);
 8000ef4:	2029      	movs	r0, #41	; 0x29
 8000ef6:	f000 fa97 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8000efa:	202d      	movs	r0, #45	; 0x2d
 8000efc:	f000 fa94 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000f00:	202e      	movs	r0, #46	; 0x2e
 8000f02:	f000 fa91 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 8000f06:	202e      	movs	r0, #46	; 0x2e
 8000f08:	f000 fa8e 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x37);
 8000f0c:	2037      	movs	r0, #55	; 0x37
 8000f0e:	f000 fa8b 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x3F);
 8000f12:	203f      	movs	r0, #63	; 0x3f
 8000f14:	f000 fa88 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f000 fa85 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 fa82 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x02);
 8000f24:	2002      	movs	r0, #2
 8000f26:	f000 fa7f 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendData(0x10);
 8000f2a:	2010      	movs	r0, #16
 8000f2c:	f000 fa7c 	bl	8001428 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_NORON);
 8000f30:	2013      	movs	r0, #19
 8000f32:	f000 fa63 	bl	80013fc <lcd7735_sendCmd>
	HAL_Delay(10);
 8000f36:	200a      	movs	r0, #10
 8000f38:	f000 fc10 	bl	800175c <HAL_Delay>
	lcd7735_sendCmd(ST7735_DISPON);
 8000f3c:	2029      	movs	r0, #41	; 0x29
 8000f3e:	f000 fa5d 	bl	80013fc <lcd7735_sendCmd>
	HAL_Delay(100);
 8000f42:	2064      	movs	r0, #100	; 0x64
 8000f44:	f000 fc0a 	bl	800175c <HAL_Delay>
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <ST7735_DrawPixel>:
    TimeIndex = 0;
  }
  ST7735_DrawFastVLine(TimeIndex + 11, 17, 100, PlotBGColor);
}

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
 8000f56:	460b      	mov	r3, r1
 8000f58:	80bb      	strh	r3, [r7, #4]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	2b7f      	cmp	r3, #127	; 0x7f
 8000f62:	d82d      	bhi.n	8000fc0 <ST7735_DrawPixel+0x74>
 8000f64:	88bb      	ldrh	r3, [r7, #4]
 8000f66:	2b9f      	cmp	r3, #159	; 0x9f
 8000f68:	d82a      	bhi.n	8000fc0 <ST7735_DrawPixel+0x74>
        return;
 
    LCD_CS0;
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f70:	4815      	ldr	r0, [pc, #84]	; (8000fc8 <ST7735_DrawPixel+0x7c>)
 8000f72:	f000 fe99 	bl	8001ca8 <HAL_GPIO_WritePin>
 
    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	b2d8      	uxtb	r0, r3
 8000f7a:	88bb      	ldrh	r3, [r7, #4]
 8000f7c:	b2d9      	uxtb	r1, r3
 8000f7e:	88fb      	ldrh	r3, [r7, #6]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	3301      	adds	r3, #1
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	88bb      	ldrh	r3, [r7, #4]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f7ff fe5f 	bl	8000c50 <ST7735_SetAddressWindow>
    uint8_t data[2];
		data[0] = color >> 8;
 8000f92:	887b      	ldrh	r3, [r7, #2]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	733b      	strb	r3, [r7, #12]
		data[1] = color & 0xFF;
 8000f9c:	887b      	ldrh	r3, [r7, #2]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	737b      	strb	r3, [r7, #13]
		lcd7735_sendData(data[0]);
 8000fa2:	7b3b      	ldrb	r3, [r7, #12]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 fa3f 	bl	8001428 <lcd7735_sendData>
		lcd7735_sendData(data[1]);
 8000faa:	7b7b      	ldrb	r3, [r7, #13]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fa3b 	bl	8001428 <lcd7735_sendData>
 
    LCD_CS1;  //unselect
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <ST7735_DrawPixel+0x7c>)
 8000fba:	f000 fe75 	bl	8001ca8 <HAL_GPIO_WritePin>
 8000fbe:	e000      	b.n	8000fc2 <ST7735_DrawPixel+0x76>
        return;
 8000fc0:	bf00      	nop
}
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40020400 	.word	0x40020400

08000fcc <ST7735_DrawCharS>:
    if(x>20) return count;  // number of characters printed
    count++;
  }
  return count;  // number of characters printed
}
void ST7735_DrawCharS(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8000fcc:	b590      	push	{r4, r7, lr}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4623      	mov	r3, r4
 8000fdc:	80fb      	strh	r3, [r7, #6]
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80bb      	strh	r3, [r7, #4]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	70fb      	strb	r3, [r7, #3]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	803b      	strh	r3, [r7, #0]
  uint8_t line; 
  int32_t i, j;
  if((x >= ST7735_WIDTH)            || 
 8000fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fee:	2b7f      	cmp	r3, #127	; 0x7f
 8000ff0:	f300 80b3 	bgt.w	800115a <ST7735_DrawCharS+0x18e>
 8000ff4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ff8:	2b9f      	cmp	r3, #159	; 0x9f
 8000ffa:	f300 80ae 	bgt.w	800115a <ST7735_DrawCharS+0x18e>
     (y >= ST7735_HEIGHT)           || 
     ((x + 5 * size - 1) < 0) || 
 8000ffe:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001002:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001006:	4613      	mov	r3, r2
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	4413      	add	r3, r2
 800100c:	440b      	add	r3, r1
     (y >= ST7735_HEIGHT)           || 
 800100e:	2b00      	cmp	r3, #0
 8001010:	f340 80a3 	ble.w	800115a <ST7735_DrawCharS+0x18e>
     ((y + 8 * size - 1) < 0))   
 8001014:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001018:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4413      	add	r3, r2
     ((x + 5 * size - 1) < 0) || 
 8001020:	2b00      	cmp	r3, #0
 8001022:	f340 809a 	ble.w	800115a <ST7735_DrawCharS+0x18e>
    return;
 
  for (i=0; i<6; i++ ) {
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	e091      	b.n	8001150 <ST7735_DrawCharS+0x184>
    if (i == 5)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	2b05      	cmp	r3, #5
 8001030:	d102      	bne.n	8001038 <ST7735_DrawCharS+0x6c>
      line = 0x0;
 8001032:	2300      	movs	r3, #0
 8001034:	75fb      	strb	r3, [r7, #23]
 8001036:	e008      	b.n	800104a <ST7735_DrawCharS+0x7e>
    else
      line = Font[(c*5)+i];
 8001038:	78fa      	ldrb	r2, [r7, #3]
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	441a      	add	r2, r3
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4413      	add	r3, r2
 8001044:	4a47      	ldr	r2, [pc, #284]	; (8001164 <ST7735_DrawCharS+0x198>)
 8001046:	5cd3      	ldrb	r3, [r2, r3]
 8001048:	75fb      	strb	r3, [r7, #23]
    for (j = 0; j<8; j++) {
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	e079      	b.n	8001144 <ST7735_DrawCharS+0x178>
      if (line & 0x1) {
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	2b00      	cmp	r3, #0
 8001058:	d034      	beq.n	80010c4 <ST7735_DrawCharS+0xf8>
        if (size == 1) 
 800105a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800105e:	2b01      	cmp	r3, #1
 8001060:	d10e      	bne.n	8001080 <ST7735_DrawCharS+0xb4>
          ST7735_DrawPixel(x+i, y+j, textColor);
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	b29a      	uxth	r2, r3
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	4413      	add	r3, r2
 800106a:	b298      	uxth	r0, r3
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	b29a      	uxth	r2, r3
 8001070:	88bb      	ldrh	r3, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	b29b      	uxth	r3, r3
 8001076:	883a      	ldrh	r2, [r7, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff ff67 	bl	8000f4c <ST7735_DrawPixel>
 800107e:	e05b      	b.n	8001138 <ST7735_DrawCharS+0x16c>
        else {  
          ST7735_FillRectangle(x+(i*size), y+(j*size), size, size, textColor);
 8001080:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001084:	b29a      	uxth	r2, r3
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	b29b      	uxth	r3, r3
 800108a:	fb12 f303 	smulbb	r3, r2, r3
 800108e:	b29a      	uxth	r2, r3
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	4413      	add	r3, r2
 8001094:	b298      	uxth	r0, r3
 8001096:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800109a:	b29a      	uxth	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	fb12 f303 	smulbb	r3, r2, r3
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	b299      	uxth	r1, r3
 80010ac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010b6:	b29c      	uxth	r4, r3
 80010b8:	883b      	ldrh	r3, [r7, #0]
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	4623      	mov	r3, r4
 80010be:	f000 f853 	bl	8001168 <ST7735_FillRectangle>
 80010c2:	e039      	b.n	8001138 <ST7735_DrawCharS+0x16c>
        }
      } else if (bgColor != textColor) {
 80010c4:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80010c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d033      	beq.n	8001138 <ST7735_DrawCharS+0x16c>
        if (size == 1) // default size
 80010d0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d10e      	bne.n	80010f6 <ST7735_DrawCharS+0x12a>
          ST7735_DrawPixel(x+i, y+j, bgColor);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	b29a      	uxth	r2, r3
 80010dc:	88fb      	ldrh	r3, [r7, #6]
 80010de:	4413      	add	r3, r2
 80010e0:	b298      	uxth	r0, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	88bb      	ldrh	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff ff2c 	bl	8000f4c <ST7735_DrawPixel>
 80010f4:	e020      	b.n	8001138 <ST7735_DrawCharS+0x16c>
        else {  // big size
         ST7735_FillRectangle(x+i*size, y+j*size, size, size, bgColor);
 80010f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	fb12 f303 	smulbb	r3, r2, r3
 8001104:	b29a      	uxth	r2, r3
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	4413      	add	r3, r2
 800110a:	b298      	uxth	r0, r3
 800110c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001110:	b29a      	uxth	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	b29b      	uxth	r3, r3
 8001116:	fb12 f303 	smulbb	r3, r2, r3
 800111a:	b29a      	uxth	r2, r3
 800111c:	88bb      	ldrh	r3, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	b299      	uxth	r1, r3
 8001122:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001126:	b29a      	uxth	r2, r3
 8001128:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800112c:	b29c      	uxth	r4, r3
 800112e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	4623      	mov	r3, r4
 8001134:	f000 f818 	bl	8001168 <ST7735_FillRectangle>
        }
      }
      line >>= 1;
 8001138:	7dfb      	ldrb	r3, [r7, #23]
 800113a:	085b      	lsrs	r3, r3, #1
 800113c:	75fb      	strb	r3, [r7, #23]
    for (j = 0; j<8; j++) {
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3301      	adds	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b07      	cmp	r3, #7
 8001148:	dd82      	ble.n	8001050 <ST7735_DrawCharS+0x84>
  for (i=0; i<6; i++ ) {
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	3301      	adds	r3, #1
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	2b05      	cmp	r3, #5
 8001154:	f77f af6a 	ble.w	800102c <ST7735_DrawCharS+0x60>
 8001158:	e000      	b.n	800115c <ST7735_DrawCharS+0x190>
    return;
 800115a:	bf00      	nop
    }
  }
}
 800115c:	371c      	adds	r7, #28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd90      	pop	{r4, r7, pc}
 8001162:	bf00      	nop
 8001164:	0800c730 	.word	0x0800c730

08001168 <ST7735_FillRectangle>:
    lcd7735_sendData(lo);
  }
	LCD_CS1;
}
	
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4604      	mov	r4, r0
 8001170:	4608      	mov	r0, r1
 8001172:	4611      	mov	r1, r2
 8001174:	461a      	mov	r2, r3
 8001176:	4623      	mov	r3, r4
 8001178:	80fb      	strh	r3, [r7, #6]
 800117a:	4603      	mov	r3, r0
 800117c:	80bb      	strh	r3, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]
 8001182:	4613      	mov	r3, r2
 8001184:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	2b7f      	cmp	r3, #127	; 0x7f
 800118a:	d85c      	bhi.n	8001246 <ST7735_FillRectangle+0xde>
 800118c:	88bb      	ldrh	r3, [r7, #4]
 800118e:	2b9f      	cmp	r3, #159	; 0x9f
 8001190:	d859      	bhi.n	8001246 <ST7735_FillRectangle+0xde>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001192:	88fa      	ldrh	r2, [r7, #6]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	4413      	add	r3, r2
 8001198:	2b80      	cmp	r3, #128	; 0x80
 800119a:	dd03      	ble.n	80011a4 <ST7735_FillRectangle+0x3c>
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80011a2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80011a4:	88ba      	ldrh	r2, [r7, #4]
 80011a6:	883b      	ldrh	r3, [r7, #0]
 80011a8:	4413      	add	r3, r2
 80011aa:	2ba0      	cmp	r3, #160	; 0xa0
 80011ac:	dd03      	ble.n	80011b6 <ST7735_FillRectangle+0x4e>
 80011ae:	88bb      	ldrh	r3, [r7, #4]
 80011b0:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80011b4:	803b      	strh	r3, [r7, #0]
 
    LCD_CS0;
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011bc:	4824      	ldr	r0, [pc, #144]	; (8001250 <ST7735_FillRectangle+0xe8>)
 80011be:	f000 fd73 	bl	8001ca8 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	b2d8      	uxtb	r0, r3
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	b2d9      	uxtb	r1, r3
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	887b      	ldrh	r3, [r7, #2]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	3b01      	subs	r3, #1
 80011d8:	b2dc      	uxtb	r4, r3
 80011da:	88bb      	ldrh	r3, [r7, #4]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	883b      	ldrh	r3, [r7, #0]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	4413      	add	r3, r2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	3b01      	subs	r3, #1
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	4622      	mov	r2, r4
 80011ec:	f7ff fd30 	bl	8000c50 <ST7735_SetAddressWindow>
    LCD_DC1;
 80011f0:	2201      	movs	r2, #1
 80011f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f6:	4816      	ldr	r0, [pc, #88]	; (8001250 <ST7735_FillRectangle+0xe8>)
 80011f8:	f000 fd56 	bl	8001ca8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80011fc:	883b      	ldrh	r3, [r7, #0]
 80011fe:	80bb      	strh	r3, [r7, #4]
 8001200:	e017      	b.n	8001232 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {            
 8001202:	887b      	ldrh	r3, [r7, #2]
 8001204:	80fb      	strh	r3, [r7, #6]
 8001206:	e00e      	b.n	8001226 <ST7735_FillRectangle+0xbe>
					lcd7735_sendData(color>>8);
 8001208:	8b3b      	ldrh	r3, [r7, #24]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	b29b      	uxth	r3, r3
 800120e:	b2db      	uxtb	r3, r3
 8001210:	4618      	mov	r0, r3
 8001212:	f000 f909 	bl	8001428 <lcd7735_sendData>
					lcd7735_sendData(color);
 8001216:	8b3b      	ldrh	r3, [r7, #24]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f904 	bl	8001428 <lcd7735_sendData>
        for(x = w; x > 0; x--) {            
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	3b01      	subs	r3, #1
 8001224:	80fb      	strh	r3, [r7, #6]
 8001226:	88fb      	ldrh	r3, [r7, #6]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1ed      	bne.n	8001208 <ST7735_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	80bb      	strh	r3, [r7, #4]
 8001232:	88bb      	ldrh	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1e4      	bne.n	8001202 <ST7735_FillRectangle+0x9a>
        }
    }
		
		LCD_CS1;  //Unselect
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800123e:	4804      	ldr	r0, [pc, #16]	; (8001250 <ST7735_FillRectangle+0xe8>)
 8001240:	f000 fd32 	bl	8001ca8 <HAL_GPIO_WritePin>
 8001244:	e000      	b.n	8001248 <ST7735_FillRectangle+0xe0>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001246:	bf00      	nop
}
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	bd90      	pop	{r4, r7, pc}
 800124e:	bf00      	nop
 8001250:	40020400 	.word	0x40020400

08001254 <ST7735_FillScreen>:
void ST7735_FillScreen(uint16_t color) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af02      	add	r7, sp, #8
 800125a:	4603      	mov	r3, r0
 800125c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800125e:	88fb      	ldrh	r3, [r7, #6]
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	23a0      	movs	r3, #160	; 0xa0
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	2100      	movs	r1, #0
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff ff7d 	bl	8001168 <ST7735_FillRectangle>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <ST7735_DrawImage>:
void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b087      	sub	sp, #28
 800127c:	af00      	add	r7, sp, #0
 800127e:	4604      	mov	r4, r0
 8001280:	4608      	mov	r0, r1
 8001282:	4611      	mov	r1, r2
 8001284:	461a      	mov	r2, r3
 8001286:	4623      	mov	r3, r4
 8001288:	80fb      	strh	r3, [r7, #6]
 800128a:	4603      	mov	r3, r0
 800128c:	80bb      	strh	r3, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	807b      	strh	r3, [r7, #2]
 8001292:	4613      	mov	r3, r2
 8001294:	803b      	strh	r3, [r7, #0]
int16_t skipC = 0;                      
 8001296:	2300      	movs	r3, #0
 8001298:	82fb      	strh	r3, [r7, #22]
  int16_t originalWidth = w;              
 800129a:	887b      	ldrh	r3, [r7, #2]
 800129c:	81fb      	strh	r3, [r7, #14]
  int i = w*(h - 1);
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	883a      	ldrh	r2, [r7, #0]
 80012a2:	3a01      	subs	r2, #1
 80012a4:	fb02 f303 	mul.w	r3, r2, r3
 80012a8:	613b      	str	r3, [r7, #16]
 
  if((x >= ST7735_WIDTH) || ((y - h + 1) >= ST7735_HEIGHT) || ((x + w) <= 0) || (y < 0)){
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	2b7f      	cmp	r3, #127	; 0x7f
 80012ae:	f200 809c 	bhi.w	80013ea <ST7735_DrawImage+0x172>
 80012b2:	88ba      	ldrh	r2, [r7, #4]
 80012b4:	883b      	ldrh	r3, [r7, #0]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b9e      	cmp	r3, #158	; 0x9e
 80012ba:	f300 8096 	bgt.w	80013ea <ST7735_DrawImage+0x172>
 80012be:	88fa      	ldrh	r2, [r7, #6]
 80012c0:	887b      	ldrh	r3, [r7, #2]
 80012c2:	4413      	add	r3, r2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f340 8090 	ble.w	80013ea <ST7735_DrawImage+0x172>
    return;                             
  }
  if((w > ST7735_WIDTH) || (h > ST7735_HEIGHT)){    
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	2b80      	cmp	r3, #128	; 0x80
 80012ce:	f200 808e 	bhi.w	80013ee <ST7735_DrawImage+0x176>
 80012d2:	883b      	ldrh	r3, [r7, #0]
 80012d4:	2ba0      	cmp	r3, #160	; 0xa0
 80012d6:	f200 808a 	bhi.w	80013ee <ST7735_DrawImage+0x176>
   
    return;
  }
  if((x + w - 1) >= ST7735_WIDTH){            
 80012da:	88fa      	ldrh	r2, [r7, #6]
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	4413      	add	r3, r2
 80012e0:	2b80      	cmp	r3, #128	; 0x80
 80012e2:	dd0a      	ble.n	80012fa <ST7735_DrawImage+0x82>
    skipC = (x + w) - ST7735_WIDTH;           
 80012e4:	88fa      	ldrh	r2, [r7, #6]
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	4413      	add	r3, r2
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	3b80      	subs	r3, #128	; 0x80
 80012ee:	b29b      	uxth	r3, r3
 80012f0:	82fb      	strh	r3, [r7, #22]
    w = ST7735_WIDTH - x;
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80012f8:	807b      	strh	r3, [r7, #2]
  }
  if((y - h + 1) < 0){                  
 80012fa:	88ba      	ldrh	r2, [r7, #4]
 80012fc:	883b      	ldrh	r3, [r7, #0]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001304:	da0d      	bge.n	8001322 <ST7735_DrawImage+0xaa>
    i = i - (h - y - 1)*originalWidth;  
 8001306:	883a      	ldrh	r2, [r7, #0]
 8001308:	88bb      	ldrh	r3, [r7, #4]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	3b01      	subs	r3, #1
 800130e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001312:	fb02 f303 	mul.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	613b      	str	r3, [r7, #16]
    h = y + 1;
 800131c:	88bb      	ldrh	r3, [r7, #4]
 800131e:	3301      	adds	r3, #1
 8001320:	803b      	strh	r3, [r7, #0]
    w = w + x;
    skipC = -1*x;                       
    i = i - x;                          
    x = 0;
  }
  if(y >= ST7735_HEIGHT){                     
 8001322:	88bb      	ldrh	r3, [r7, #4]
 8001324:	2b9f      	cmp	r3, #159	; 0x9f
 8001326:	d907      	bls.n	8001338 <ST7735_DrawImage+0xc0>
    h = h - (y - ST7735_HEIGHT + 1);
 8001328:	883a      	ldrh	r2, [r7, #0]
 800132a:	88bb      	ldrh	r3, [r7, #4]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	b29b      	uxth	r3, r3
 8001330:	339f      	adds	r3, #159	; 0x9f
 8001332:	803b      	strh	r3, [r7, #0]
    y = ST7735_HEIGHT - 1;
 8001334:	239f      	movs	r3, #159	; 0x9f
 8001336:	80bb      	strh	r3, [r7, #4]
  }
	
	LCD_CS0;  //Select
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800133e:	482e      	ldr	r0, [pc, #184]	; (80013f8 <ST7735_DrawImage+0x180>)
 8001340:	f000 fcb2 	bl	8001ca8 <HAL_GPIO_WritePin>
 
  ST7735_SetAddressWindow(x, y-h+1, x+w-1, y);
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	b2d8      	uxtb	r0, r3
 8001348:	88bb      	ldrh	r3, [r7, #4]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	883b      	ldrh	r3, [r7, #0]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	3301      	adds	r3, #1
 8001356:	b2d9      	uxtb	r1, r3
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	b2da      	uxtb	r2, r3
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	b2db      	uxtb	r3, r3
 8001360:	4413      	add	r3, r2
 8001362:	b2db      	uxtb	r3, r3
 8001364:	3b01      	subs	r3, #1
 8001366:	b2da      	uxtb	r2, r3
 8001368:	88bb      	ldrh	r3, [r7, #4]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f7ff fc70 	bl	8000c50 <ST7735_SetAddressWindow>
 
  for(y=0; y<h; y=y+1){
 8001370:	2300      	movs	r3, #0
 8001372:	80bb      	strh	r3, [r7, #4]
 8001374:	e02e      	b.n	80013d4 <ST7735_DrawImage+0x15c>
    for(x=0; x<w; x=x+1){
 8001376:	2300      	movs	r3, #0
 8001378:	80fb      	strh	r3, [r7, #6]
 800137a:	e019      	b.n	80013b0 <ST7735_DrawImage+0x138>
                                        
      lcd7735_sendData((uint8_t)(data[i] >> 8));
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001382:	4413      	add	r3, r2
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	b29b      	uxth	r3, r3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f84b 	bl	8001428 <lcd7735_sendData>
                                        
      lcd7735_sendData((uint8_t)data[i]);
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001398:	4413      	add	r3, r2
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f842 	bl	8001428 <lcd7735_sendData>
      i = i + 1;                       
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	3301      	adds	r3, #1
 80013a8:	613b      	str	r3, [r7, #16]
    for(x=0; x<w; x=x+1){
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	3301      	adds	r3, #1
 80013ae:	80fb      	strh	r3, [r7, #6]
 80013b0:	88fa      	ldrh	r2, [r7, #6]
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d3e1      	bcc.n	800137c <ST7735_DrawImage+0x104>
    }
    i = i + skipC;
 80013b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	4413      	add	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
    i = i - 2*originalWidth;
 80013c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	613b      	str	r3, [r7, #16]
  for(y=0; y<h; y=y+1){
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	3301      	adds	r3, #1
 80013d2:	80bb      	strh	r3, [r7, #4]
 80013d4:	88ba      	ldrh	r2, [r7, #4]
 80013d6:	883b      	ldrh	r3, [r7, #0]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d3cc      	bcc.n	8001376 <ST7735_DrawImage+0xfe>
  }
	LCD_CS1;  //Unselect
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <ST7735_DrawImage+0x180>)
 80013e4:	f000 fc60 	bl	8001ca8 <HAL_GPIO_WritePin>
 80013e8:	e002      	b.n	80013f0 <ST7735_DrawImage+0x178>
    return;                             
 80013ea:	bf00      	nop
 80013ec:	e000      	b.n	80013f0 <ST7735_DrawImage+0x178>
    return;
 80013ee:	bf00      	nop
}
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd90      	pop	{r4, r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40020400 	.word	0x40020400

080013fc <lcd7735_sendCmd>:
  //ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
	lcd7735_sendCmd(invert ? ST7735_INVON : ST7735_INVOFF);
  LCD_CS1;  //Unselect
}
 
void lcd7735_sendCmd(uint8_t cmd) {  //uint8_t       //unsigned char
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
   LCD_DC0; //Set DC low
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <lcd7735_sendCmd+0x28>)
 800140e:	f000 fc4b 	bl	8001ca8 <HAL_GPIO_WritePin>
   lcd7735_senddata(cmd);
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	4618      	mov	r0, r3
 8001416:	f000 f81d 	bl	8001454 <lcd7735_senddata>
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40020400 	.word	0x40020400

08001428 <lcd7735_sendData>:
 
 
void lcd7735_sendData(uint8_t data) {  //uint8_t      //unsigned char
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
   LCD_DC1;//Set DC HIGH
 8001432:	2201      	movs	r2, #1
 8001434:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <lcd7735_sendData+0x28>)
 800143a:	f000 fc35 	bl	8001ca8 <HAL_GPIO_WritePin>
   lcd7735_senddata(data);
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f807 	bl	8001454 <lcd7735_senddata>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40020400 	.word	0x40020400

08001454 <lcd7735_senddata>:
 
void lcd7735_senddata(uint8_t data) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, &data,sizeof(data),0x1);
 800145e:	1df9      	adds	r1, r7, #7
 8001460:	2301      	movs	r3, #1
 8001462:	2201      	movs	r2, #1
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <lcd7735_senddata+0x20>)
 8001466:	f001 f95a 	bl	800271e <HAL_SPI_Transmit>
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000004c 	.word	0x2000004c

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_MspInit+0x4c>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <HAL_MspInit+0x4c>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_MspInit+0x4c>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a08      	ldr	r2, [pc, #32]	; (80014c4 <HAL_MspInit+0x4c>)
 80014a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_MspInit+0x4c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014b6:	2007      	movs	r0, #7
 80014b8:	f000 fa26 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40023800 	.word	0x40023800

080014c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <NMI_Handler+0x4>

080014ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d2:	e7fe      	b.n	80014d2 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <MemManage_Handler+0x4>

080014da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001514:	f000 f902 	bl	800171c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <SystemInit+0x20>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <SystemInit+0x20>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	e000ed00 	.word	0xe000ed00

08001540 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001546:	4a12      	ldr	r2, [pc, #72]	; (8001590 <MX_USART2_UART_Init+0x50>)
 8001548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <MX_USART2_UART_Init+0x4c>)
 800154c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USART2_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USART2_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USART2_UART_Init+0x4c>)
 8001578:	f001 fad8 	bl	8002b2c <HAL_UART_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001582:	f7ff fae1 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200000a4 	.word	0x200000a4
 8001590:	40004400 	.word	0x40004400

08001594 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a19      	ldr	r2, [pc, #100]	; (8001618 <HAL_UART_MspInit+0x84>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d12b      	bne.n	800160e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_UART_MspInit+0x88>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <HAL_UART_MspInit+0x88>)
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_UART_MspInit+0x88>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_UART_MspInit+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a10      	ldr	r2, [pc, #64]	; (800161c <HAL_UART_MspInit+0x88>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <HAL_UART_MspInit+0x88>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015ee:	230c      	movs	r3, #12
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015fe:	2307      	movs	r3, #7
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	; (8001620 <HAL_UART_MspInit+0x8c>)
 800160a:	f000 f9b1 	bl	8001970 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800160e:	bf00      	nop
 8001610:	3728      	adds	r7, #40	; 0x28
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40004400 	.word	0x40004400
 800161c:	40023800 	.word	0x40023800
 8001620:	40020000 	.word	0x40020000

08001624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800165c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001628:	480d      	ldr	r0, [pc, #52]	; (8001660 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800162a:	490e      	ldr	r1, [pc, #56]	; (8001664 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800162c:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001630:	e002      	b.n	8001638 <LoopCopyDataInit>

08001632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001636:	3304      	adds	r3, #4

08001638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800163c:	d3f9      	bcc.n	8001632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001640:	4c0b      	ldr	r4, [pc, #44]	; (8001670 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001644:	e001      	b.n	800164a <LoopFillZerobss>

08001646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001648:	3204      	adds	r2, #4

0800164a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800164c:	d3fb      	bcc.n	8001646 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800164e:	f7ff ff65 	bl	800151c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001652:	f001 fd35 	bl	80030c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001656:	f7ff f9db 	bl	8000a10 <main>
  bx  lr    
 800165a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800165c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001664:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001668:	0800cc54 	.word	0x0800cc54
  ldr r2, =_sbss
 800166c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001670:	200000ec 	.word	0x200000ec

08001674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC_IRQHandler>
	...

08001678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <HAL_Init+0x40>)
 8001682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001686:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <HAL_Init+0x40>)
 800168e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001692:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <HAL_Init+0x40>)
 800169a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a0:	2003      	movs	r0, #3
 80016a2:	f000 f931 	bl	8001908 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a6:	2000      	movs	r0, #0
 80016a8:	f000 f808 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ac:	f7ff fee4 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023c00 	.word	0x40023c00

080016bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_InitTick+0x54>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_InitTick+0x58>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4619      	mov	r1, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f93b 	bl	8001956 <HAL_SYSTICK_Config>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e00e      	b.n	8001708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b0f      	cmp	r3, #15
 80016ee:	d80a      	bhi.n	8001706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f0:	2200      	movs	r2, #0
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f000 f911 	bl	800191e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016fc:	4a06      	ldr	r2, [pc, #24]	; (8001718 <HAL_InitTick+0x5c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
 8001704:	e000      	b.n	8001708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000020 	.word	0x20000020
 8001714:	20000028 	.word	0x20000028
 8001718:	20000024 	.word	0x20000024

0800171c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x20>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x24>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_IncTick+0x24>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000028 	.word	0x20000028
 8001740:	200000e8 	.word	0x200000e8

08001744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_GetTick+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	200000e8 	.word	0x200000e8

0800175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff ffee 	bl	8001744 <HAL_GetTick>
 8001768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001774:	d005      	beq.n	8001782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_Delay+0x44>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001782:	bf00      	nop
 8001784:	f7ff ffde 	bl	8001744 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	429a      	cmp	r2, r3
 8001792:	d8f7      	bhi.n	8001784 <HAL_Delay+0x28>
  {
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000028 	.word	0x20000028

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d4:	d301      	bcc.n	80018da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d6:	2301      	movs	r3, #1
 80018d8:	e00f      	b.n	80018fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <SysTick_Config+0x40>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e2:	210f      	movs	r1, #15
 80018e4:	f04f 30ff 	mov.w	r0, #4294967295
 80018e8:	f7ff ff8e 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <SysTick_Config+0x40>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <SysTick_Config+0x40>)
 80018f4:	2207      	movs	r2, #7
 80018f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	e000e010 	.word	0xe000e010

08001908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff47 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800192c:	2300      	movs	r3, #0
 800192e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff5c 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff8e 	bl	800185c <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5d 	bl	8001808 <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffb0 	bl	80018c4 <SysTick_Config>
 8001964:	4603      	mov	r3, r0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	b480      	push	{r7}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	e159      	b.n	8001c40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	f040 8148 	bne.w	8001c3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d005      	beq.n	80019c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d130      	bne.n	8001a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 0201 	and.w	r2, r3, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d017      	beq.n	8001a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d123      	bne.n	8001ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	08da      	lsrs	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3208      	adds	r2, #8
 8001a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	220f      	movs	r2, #15
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f003 0307 	and.w	r3, r3, #7
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	08da      	lsrs	r2, r3, #3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	3208      	adds	r2, #8
 8001aae:	69b9      	ldr	r1, [r7, #24]
 8001ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0203 	and.w	r2, r3, #3
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80a2 	beq.w	8001c3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b57      	ldr	r3, [pc, #348]	; (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	4a56      	ldr	r2, [pc, #344]	; (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b04:	6453      	str	r3, [r2, #68]	; 0x44
 8001b06:	4b54      	ldr	r3, [pc, #336]	; (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b12:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	3302      	adds	r3, #2
 8001b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 0303 	and.w	r3, r3, #3
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	220f      	movs	r2, #15
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	43db      	mvns	r3, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4013      	ands	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a49      	ldr	r2, [pc, #292]	; (8001c60 <HAL_GPIO_Init+0x2f0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d019      	beq.n	8001b72 <HAL_GPIO_Init+0x202>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a48      	ldr	r2, [pc, #288]	; (8001c64 <HAL_GPIO_Init+0x2f4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_GPIO_Init+0x1fe>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a47      	ldr	r2, [pc, #284]	; (8001c68 <HAL_GPIO_Init+0x2f8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d00d      	beq.n	8001b6a <HAL_GPIO_Init+0x1fa>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a46      	ldr	r2, [pc, #280]	; (8001c6c <HAL_GPIO_Init+0x2fc>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d007      	beq.n	8001b66 <HAL_GPIO_Init+0x1f6>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a45      	ldr	r2, [pc, #276]	; (8001c70 <HAL_GPIO_Init+0x300>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d101      	bne.n	8001b62 <HAL_GPIO_Init+0x1f2>
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e008      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b62:	2307      	movs	r3, #7
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b66:	2303      	movs	r3, #3
 8001b68:	e004      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_GPIO_Init+0x204>
 8001b72:	2300      	movs	r3, #0
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	f002 0203 	and.w	r2, r2, #3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4093      	lsls	r3, r2
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b84:	4935      	ldr	r1, [pc, #212]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b92:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bb6:	4a2f      	ldr	r2, [pc, #188]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be0:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001be6:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c0a:	4a1a      	ldr	r2, [pc, #104]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c10:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c34:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <HAL_GPIO_Init+0x304>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b0f      	cmp	r3, #15
 8001c44:	f67f aea2 	bls.w	800198c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	40020000 	.word	0x40020000
 8001c64:	40020400 	.word	0x40020400
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020c00 	.word	0x40020c00
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40013c00 	.word	0x40013c00

08001c78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	887b      	ldrh	r3, [r7, #2]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c90:	2301      	movs	r3, #1
 8001c92:	73fb      	strb	r3, [r7, #15]
 8001c94:	e001      	b.n	8001c9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c96:	2300      	movs	r3, #0
 8001c98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb8:	787b      	ldrb	r3, [r7, #1]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cc4:	e003      	b.n	8001cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	041a      	lsls	r2, r3, #16
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	619a      	str	r2, [r3, #24]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e267      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d075      	beq.n	8001de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cfa:	4b88      	ldr	r3, [pc, #544]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	d00c      	beq.n	8001d20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d06:	4b85      	ldr	r3, [pc, #532]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d112      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d12:	4b82      	ldr	r3, [pc, #520]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d1e:	d10b      	bne.n	8001d38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d20:	4b7e      	ldr	r3, [pc, #504]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d05b      	beq.n	8001de4 <HAL_RCC_OscConfig+0x108>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d157      	bne.n	8001de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e242      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d40:	d106      	bne.n	8001d50 <HAL_RCC_OscConfig+0x74>
 8001d42:	4b76      	ldr	r3, [pc, #472]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a75      	ldr	r2, [pc, #468]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e01d      	b.n	8001d8c <HAL_RCC_OscConfig+0xb0>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x98>
 8001d5a:	4b70      	ldr	r3, [pc, #448]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a6f      	ldr	r2, [pc, #444]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	4b6d      	ldr	r3, [pc, #436]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a6c      	ldr	r2, [pc, #432]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0xb0>
 8001d74:	4b69      	ldr	r3, [pc, #420]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a68      	ldr	r2, [pc, #416]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b66      	ldr	r3, [pc, #408]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a65      	ldr	r2, [pc, #404]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff fcd6 	bl	8001744 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fcd2 	bl	8001744 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e207      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b5b      	ldr	r3, [pc, #364]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0xc0>
 8001dba:	e014      	b.n	8001de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fcc2 	bl	8001744 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fcbe 	bl	8001744 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e1f3      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	4b51      	ldr	r3, [pc, #324]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0xe8>
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d063      	beq.n	8001eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001df2:	4b4a      	ldr	r3, [pc, #296]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfe:	4b47      	ldr	r3, [pc, #284]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d11c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e0a:	4b44      	ldr	r3, [pc, #272]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d116      	bne.n	8001e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e16:	4b41      	ldr	r3, [pc, #260]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_RCC_OscConfig+0x152>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e1c7      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2e:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4937      	ldr	r1, [pc, #220]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	e03a      	b.n	8001eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d020      	beq.n	8001e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e4c:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <HAL_RCC_OscConfig+0x244>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7ff fc77 	bl	8001744 <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fc73 	bl	8001744 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e1a8      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6c:	4b2b      	ldr	r3, [pc, #172]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4925      	ldr	r1, [pc, #148]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]
 8001e8c:	e015      	b.n	8001eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8e:	4b24      	ldr	r3, [pc, #144]	; (8001f20 <HAL_RCC_OscConfig+0x244>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff fc56 	bl	8001744 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e9c:	f7ff fc52 	bl	8001744 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e187      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d036      	beq.n	8001f34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d016      	beq.n	8001efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <HAL_RCC_OscConfig+0x248>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed4:	f7ff fc36 	bl	8001744 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001edc:	f7ff fc32 	bl	8001744 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e167      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_OscConfig+0x240>)
 8001ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x200>
 8001efa:	e01b      	b.n	8001f34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_RCC_OscConfig+0x248>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f02:	f7ff fc1f 	bl	8001744 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f08:	e00e      	b.n	8001f28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f0a:	f7ff fc1b 	bl	8001744 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d907      	bls.n	8001f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e150      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	42470000 	.word	0x42470000
 8001f24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f28:	4b88      	ldr	r3, [pc, #544]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8001f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d1ea      	bne.n	8001f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 8097 	beq.w	8002070 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f46:	4b81      	ldr	r3, [pc, #516]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10f      	bne.n	8001f72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	4b7d      	ldr	r3, [pc, #500]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	4a7c      	ldr	r2, [pc, #496]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8001f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f60:	6413      	str	r3, [r2, #64]	; 0x40
 8001f62:	4b7a      	ldr	r3, [pc, #488]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f72:	4b77      	ldr	r3, [pc, #476]	; (8002150 <HAL_RCC_OscConfig+0x474>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d118      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7e:	4b74      	ldr	r3, [pc, #464]	; (8002150 <HAL_RCC_OscConfig+0x474>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a73      	ldr	r2, [pc, #460]	; (8002150 <HAL_RCC_OscConfig+0x474>)
 8001f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8a:	f7ff fbdb 	bl	8001744 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f92:	f7ff fbd7 	bl	8001744 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e10c      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	4b6a      	ldr	r3, [pc, #424]	; (8002150 <HAL_RCC_OscConfig+0x474>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d106      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x2ea>
 8001fb8:	4b64      	ldr	r3, [pc, #400]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8001fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fbc:	4a63      	ldr	r2, [pc, #396]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc4:	e01c      	b.n	8002000 <HAL_RCC_OscConfig+0x324>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	d10c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x30c>
 8001fce:	4b5f      	ldr	r3, [pc, #380]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8001fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd2:	4a5e      	ldr	r2, [pc, #376]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fda:	4b5c      	ldr	r3, [pc, #368]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8001fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fde:	4a5b      	ldr	r2, [pc, #364]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe6:	e00b      	b.n	8002000 <HAL_RCC_OscConfig+0x324>
 8001fe8:	4b58      	ldr	r3, [pc, #352]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	4a57      	ldr	r2, [pc, #348]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8001fee:	f023 0301 	bic.w	r3, r3, #1
 8001ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff4:	4b55      	ldr	r3, [pc, #340]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	4a54      	ldr	r2, [pc, #336]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8001ffa:	f023 0304 	bic.w	r3, r3, #4
 8001ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d015      	beq.n	8002034 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002008:	f7ff fb9c 	bl	8001744 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200e:	e00a      	b.n	8002026 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002010:	f7ff fb98 	bl	8001744 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e0cb      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002026:	4b49      	ldr	r3, [pc, #292]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0ee      	beq.n	8002010 <HAL_RCC_OscConfig+0x334>
 8002032:	e014      	b.n	800205e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002034:	f7ff fb86 	bl	8001744 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800203a:	e00a      	b.n	8002052 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800203c:	f7ff fb82 	bl	8001744 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e0b5      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002052:	4b3e      	ldr	r3, [pc, #248]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1ee      	bne.n	800203c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800205e:	7dfb      	ldrb	r3, [r7, #23]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d105      	bne.n	8002070 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002064:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	4a38      	ldr	r2, [pc, #224]	; (800214c <HAL_RCC_OscConfig+0x470>)
 800206a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800206e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80a1 	beq.w	80021bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800207a:	4b34      	ldr	r3, [pc, #208]	; (800214c <HAL_RCC_OscConfig+0x470>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b08      	cmp	r3, #8
 8002084:	d05c      	beq.n	8002140 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d141      	bne.n	8002112 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208e:	4b31      	ldr	r3, [pc, #196]	; (8002154 <HAL_RCC_OscConfig+0x478>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002094:	f7ff fb56 	bl	8001744 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209c:	f7ff fb52 	bl	8001744 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e087      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ae:	4b27      	ldr	r3, [pc, #156]	; (800214c <HAL_RCC_OscConfig+0x470>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69da      	ldr	r2, [r3, #28]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	019b      	lsls	r3, r3, #6
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	3b01      	subs	r3, #1
 80020d4:	041b      	lsls	r3, r3, #16
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	061b      	lsls	r3, r3, #24
 80020de:	491b      	ldr	r1, [pc, #108]	; (800214c <HAL_RCC_OscConfig+0x470>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_RCC_OscConfig+0x478>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7ff fb2b 	bl	8001744 <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f2:	f7ff fb27 	bl	8001744 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e05c      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x416>
 8002110:	e054      	b.n	80021bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_RCC_OscConfig+0x478>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff fb14 	bl	8001744 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff fb10 	bl	8001744 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e045      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_RCC_OscConfig+0x470>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1f0      	bne.n	8002120 <HAL_RCC_OscConfig+0x444>
 800213e:	e03d      	b.n	80021bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d107      	bne.n	8002158 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e038      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
 800214c:	40023800 	.word	0x40023800
 8002150:	40007000 	.word	0x40007000
 8002154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002158:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_RCC_OscConfig+0x4ec>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d028      	beq.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002170:	429a      	cmp	r2, r3
 8002172:	d121      	bne.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217e:	429a      	cmp	r2, r3
 8002180:	d11a      	bne.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002188:	4013      	ands	r3, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800218e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002190:	4293      	cmp	r3, r2
 8002192:	d111      	bne.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219e:	085b      	lsrs	r3, r3, #1
 80021a0:	3b01      	subs	r3, #1
 80021a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d001      	beq.n	80021bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40023800 	.word	0x40023800

080021cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0cc      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e0:	4b68      	ldr	r3, [pc, #416]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d90c      	bls.n	8002208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b65      	ldr	r3, [pc, #404]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0b8      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002220:	4b59      	ldr	r3, [pc, #356]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4a58      	ldr	r2, [pc, #352]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800222a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002238:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4a52      	ldr	r2, [pc, #328]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002244:	4b50      	ldr	r3, [pc, #320]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	494d      	ldr	r1, [pc, #308]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d044      	beq.n	80022ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	4b47      	ldr	r3, [pc, #284]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d119      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e07f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d003      	beq.n	800228a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002286:	2b03      	cmp	r3, #3
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228a:	4b3f      	ldr	r3, [pc, #252]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e06f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229a:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e067      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022aa:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f023 0203 	bic.w	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4934      	ldr	r1, [pc, #208]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022bc:	f7ff fa42 	bl	8001744 <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	e00a      	b.n	80022da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c4:	f7ff fa3e 	bl	8001744 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e04f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 020c 	and.w	r2, r3, #12
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d1eb      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d20c      	bcs.n	8002314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e032      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002320:	4b19      	ldr	r3, [pc, #100]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4916      	ldr	r1, [pc, #88]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	490e      	ldr	r1, [pc, #56]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002352:	f000 f821 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8002356:	4602      	mov	r2, r0
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	490a      	ldr	r1, [pc, #40]	; (800238c <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	5ccb      	ldrb	r3, [r1, r3]
 8002366:	fa22 f303 	lsr.w	r3, r2, r3
 800236a:	4a09      	ldr	r2, [pc, #36]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x1c8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff f9a2 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023c00 	.word	0x40023c00
 8002388:	40023800 	.word	0x40023800
 800238c:	0800cc2c 	.word	0x0800cc2c
 8002390:	20000020 	.word	0x20000020
 8002394:	20000024 	.word	0x20000024

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800239c:	b094      	sub	sp, #80	; 0x50
 800239e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	647b      	str	r3, [r7, #68]	; 0x44
 80023a4:	2300      	movs	r3, #0
 80023a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a8:	2300      	movs	r3, #0
 80023aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023b0:	4b79      	ldr	r3, [pc, #484]	; (8002598 <HAL_RCC_GetSysClockFreq+0x200>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d00d      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0x40>
 80023bc:	2b08      	cmp	r3, #8
 80023be:	f200 80e1 	bhi.w	8002584 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x34>
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d003      	beq.n	80023d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ca:	e0db      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023cc:	4b73      	ldr	r3, [pc, #460]	; (800259c <HAL_RCC_GetSysClockFreq+0x204>)
 80023ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80023d0:	e0db      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023d2:	4b73      	ldr	r3, [pc, #460]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80023d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023d6:	e0d8      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d8:	4b6f      	ldr	r3, [pc, #444]	; (8002598 <HAL_RCC_GetSysClockFreq+0x200>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023e2:	4b6d      	ldr	r3, [pc, #436]	; (8002598 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d063      	beq.n	80024b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ee:	4b6a      	ldr	r3, [pc, #424]	; (8002598 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	099b      	lsrs	r3, r3, #6
 80023f4:	2200      	movs	r2, #0
 80023f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80023f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
 8002402:	2300      	movs	r3, #0
 8002404:	637b      	str	r3, [r7, #52]	; 0x34
 8002406:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800240a:	4622      	mov	r2, r4
 800240c:	462b      	mov	r3, r5
 800240e:	f04f 0000 	mov.w	r0, #0
 8002412:	f04f 0100 	mov.w	r1, #0
 8002416:	0159      	lsls	r1, r3, #5
 8002418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800241c:	0150      	lsls	r0, r2, #5
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4621      	mov	r1, r4
 8002424:	1a51      	subs	r1, r2, r1
 8002426:	6139      	str	r1, [r7, #16]
 8002428:	4629      	mov	r1, r5
 800242a:	eb63 0301 	sbc.w	r3, r3, r1
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800243c:	4659      	mov	r1, fp
 800243e:	018b      	lsls	r3, r1, #6
 8002440:	4651      	mov	r1, sl
 8002442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002446:	4651      	mov	r1, sl
 8002448:	018a      	lsls	r2, r1, #6
 800244a:	4651      	mov	r1, sl
 800244c:	ebb2 0801 	subs.w	r8, r2, r1
 8002450:	4659      	mov	r1, fp
 8002452:	eb63 0901 	sbc.w	r9, r3, r1
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800246a:	4690      	mov	r8, r2
 800246c:	4699      	mov	r9, r3
 800246e:	4623      	mov	r3, r4
 8002470:	eb18 0303 	adds.w	r3, r8, r3
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	462b      	mov	r3, r5
 8002478:	eb49 0303 	adc.w	r3, r9, r3
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800248a:	4629      	mov	r1, r5
 800248c:	024b      	lsls	r3, r1, #9
 800248e:	4621      	mov	r1, r4
 8002490:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002494:	4621      	mov	r1, r4
 8002496:	024a      	lsls	r2, r1, #9
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800249e:	2200      	movs	r2, #0
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024a8:	f7fd fe94 	bl	80001d4 <__aeabi_uldivmod>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4613      	mov	r3, r2
 80024b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024b4:	e058      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b6:	4b38      	ldr	r3, [pc, #224]	; (8002598 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	099b      	lsrs	r3, r3, #6
 80024bc:	2200      	movs	r2, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	4611      	mov	r1, r2
 80024c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024c6:	623b      	str	r3, [r7, #32]
 80024c8:	2300      	movs	r3, #0
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
 80024cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024d0:	4642      	mov	r2, r8
 80024d2:	464b      	mov	r3, r9
 80024d4:	f04f 0000 	mov.w	r0, #0
 80024d8:	f04f 0100 	mov.w	r1, #0
 80024dc:	0159      	lsls	r1, r3, #5
 80024de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024e2:	0150      	lsls	r0, r2, #5
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4641      	mov	r1, r8
 80024ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80024ee:	4649      	mov	r1, r9
 80024f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002500:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002504:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002508:	ebb2 040a 	subs.w	r4, r2, sl
 800250c:	eb63 050b 	sbc.w	r5, r3, fp
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	00eb      	lsls	r3, r5, #3
 800251a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800251e:	00e2      	lsls	r2, r4, #3
 8002520:	4614      	mov	r4, r2
 8002522:	461d      	mov	r5, r3
 8002524:	4643      	mov	r3, r8
 8002526:	18e3      	adds	r3, r4, r3
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	464b      	mov	r3, r9
 800252c:	eb45 0303 	adc.w	r3, r5, r3
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800253e:	4629      	mov	r1, r5
 8002540:	028b      	lsls	r3, r1, #10
 8002542:	4621      	mov	r1, r4
 8002544:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002548:	4621      	mov	r1, r4
 800254a:	028a      	lsls	r2, r1, #10
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002552:	2200      	movs	r2, #0
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	61fa      	str	r2, [r7, #28]
 8002558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800255c:	f7fd fe3a 	bl	80001d4 <__aeabi_uldivmod>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4613      	mov	r3, r2
 8002566:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_GetSysClockFreq+0x200>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	0c1b      	lsrs	r3, r3, #16
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	3301      	adds	r3, #1
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002578:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800257a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002582:	e002      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_RCC_GetSysClockFreq+0x204>)
 8002586:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800258a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800258c:	4618      	mov	r0, r3
 800258e:	3750      	adds	r7, #80	; 0x50
 8002590:	46bd      	mov	sp, r7
 8002592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	00f42400 	.word	0x00f42400
 80025a0:	007a1200 	.word	0x007a1200

080025a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000020 	.word	0x20000020

080025bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025c0:	f7ff fff0 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	0a9b      	lsrs	r3, r3, #10
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4903      	ldr	r1, [pc, #12]	; (80025e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40023800 	.word	0x40023800
 80025e0:	0800cc3c 	.word	0x0800cc3c

080025e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025e8:	f7ff ffdc 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	0b5b      	lsrs	r3, r3, #13
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	4903      	ldr	r1, [pc, #12]	; (8002608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025fa:	5ccb      	ldrb	r3, [r1, r3]
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002600:	4618      	mov	r0, r3
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40023800 	.word	0x40023800
 8002608:	0800cc3c 	.word	0x0800cc3c

0800260c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e07b      	b.n	8002716 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002622:	2b00      	cmp	r3, #0
 8002624:	d108      	bne.n	8002638 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800262e:	d009      	beq.n	8002644 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
 8002636:	e005      	b.n	8002644 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7fe faae 	bl	8000bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800267a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800268c:	431a      	orrs	r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c8:	ea42 0103 	orr.w	r1, r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	f003 0104 	and.w	r1, r3, #4
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	f003 0210 	and.w	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002704:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b088      	sub	sp, #32
 8002722:	af00      	add	r7, sp, #0
 8002724:	60f8      	str	r0, [r7, #12]
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_SPI_Transmit+0x22>
 800273c:	2302      	movs	r3, #2
 800273e:	e126      	b.n	800298e <HAL_SPI_Transmit+0x270>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002748:	f7fe fffc 	bl	8001744 <HAL_GetTick>
 800274c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b01      	cmp	r3, #1
 800275c:	d002      	beq.n	8002764 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800275e:	2302      	movs	r3, #2
 8002760:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002762:	e10b      	b.n	800297c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_SPI_Transmit+0x52>
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002774:	e102      	b.n	800297c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2203      	movs	r2, #3
 800277a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	88fa      	ldrh	r2, [r7, #6]
 800278e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	88fa      	ldrh	r2, [r7, #6]
 8002794:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027bc:	d10f      	bne.n	80027de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	d007      	beq.n	80027fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002804:	d14b      	bne.n	800289e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_SPI_Transmit+0xf6>
 800280e:	8afb      	ldrh	r3, [r7, #22]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d13e      	bne.n	8002892 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	881a      	ldrh	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	1c9a      	adds	r2, r3, #2
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002838:	e02b      	b.n	8002892 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b02      	cmp	r3, #2
 8002846:	d112      	bne.n	800286e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	881a      	ldrh	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	1c9a      	adds	r2, r3, #2
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	86da      	strh	r2, [r3, #54]	; 0x36
 800286c:	e011      	b.n	8002892 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800286e:	f7fe ff69 	bl	8001744 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d803      	bhi.n	8002886 <HAL_SPI_Transmit+0x168>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002884:	d102      	bne.n	800288c <HAL_SPI_Transmit+0x16e>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002890:	e074      	b.n	800297c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002896:	b29b      	uxth	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ce      	bne.n	800283a <HAL_SPI_Transmit+0x11c>
 800289c:	e04c      	b.n	8002938 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_SPI_Transmit+0x18e>
 80028a6:	8afb      	ldrh	r3, [r7, #22]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d140      	bne.n	800292e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	330c      	adds	r3, #12
 80028b6:	7812      	ldrb	r2, [r2, #0]
 80028b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80028d2:	e02c      	b.n	800292e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d113      	bne.n	800290a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	330c      	adds	r3, #12
 80028ec:	7812      	ldrb	r2, [r2, #0]
 80028ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	86da      	strh	r2, [r3, #54]	; 0x36
 8002908:	e011      	b.n	800292e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800290a:	f7fe ff1b 	bl	8001744 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d803      	bhi.n	8002922 <HAL_SPI_Transmit+0x204>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d102      	bne.n	8002928 <HAL_SPI_Transmit+0x20a>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800292c:	e026      	b.n	800297c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002932:	b29b      	uxth	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1cd      	bne.n	80028d4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	6839      	ldr	r1, [r7, #0]
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f8b3 	bl	8002aa8 <SPI_EndRxTxTransaction>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10a      	bne.n	800296c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002956:	2300      	movs	r3, #0
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	77fb      	strb	r3, [r7, #31]
 8002978:	e000      	b.n	800297c <HAL_SPI_Transmit+0x25e>
  }

error:
 800297a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800298c:	7ffb      	ldrb	r3, [r7, #31]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	4613      	mov	r3, r2
 80029a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029a8:	f7fe fecc 	bl	8001744 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	4413      	add	r3, r2
 80029b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029b8:	f7fe fec4 	bl	8001744 <HAL_GetTick>
 80029bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029be:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	015b      	lsls	r3, r3, #5
 80029c4:	0d1b      	lsrs	r3, r3, #20
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029ce:	e054      	b.n	8002a7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d6:	d050      	beq.n	8002a7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029d8:	f7fe feb4 	bl	8001744 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d902      	bls.n	80029ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d13d      	bne.n	8002a6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a06:	d111      	bne.n	8002a2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a10:	d004      	beq.n	8002a1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a1a:	d107      	bne.n	8002a2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a34:	d10f      	bne.n	8002a56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e017      	b.n	8002a9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4013      	ands	r3, r2
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	bf0c      	ite	eq
 8002a8a:	2301      	moveq	r3, #1
 8002a8c:	2300      	movne	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d19b      	bne.n	80029d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3720      	adds	r7, #32
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000020 	.word	0x20000020

08002aa8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <SPI_EndRxTxTransaction+0x7c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1b      	ldr	r2, [pc, #108]	; (8002b28 <SPI_EndRxTxTransaction+0x80>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	0d5b      	lsrs	r3, r3, #21
 8002ac0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ac4:	fb02 f303 	mul.w	r3, r2, r3
 8002ac8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ad2:	d112      	bne.n	8002afa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2200      	movs	r2, #0
 8002adc:	2180      	movs	r1, #128	; 0x80
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f7ff ff5a 	bl	8002998 <SPI_WaitFlagStateUntilTimeout>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d016      	beq.n	8002b18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f043 0220 	orr.w	r2, r3, #32
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e00f      	b.n	8002b1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b10:	2b80      	cmp	r3, #128	; 0x80
 8002b12:	d0f2      	beq.n	8002afa <SPI_EndRxTxTransaction+0x52>
 8002b14:	e000      	b.n	8002b18 <SPI_EndRxTxTransaction+0x70>
        break;
 8002b16:	bf00      	nop
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3718      	adds	r7, #24
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000020 	.word	0x20000020
 8002b28:	165e9f81 	.word	0x165e9f81

08002b2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e03f      	b.n	8002bbe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d106      	bne.n	8002b58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fe fd1e 	bl	8001594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2224      	movs	r2, #36	; 0x24
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f829 	bl	8002bc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695a      	ldr	r2, [r3, #20]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ba4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
	...

08002bc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bcc:	b0c0      	sub	sp, #256	; 0x100
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002be4:	68d9      	ldr	r1, [r3, #12]
 8002be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	ea40 0301 	orr.w	r3, r0, r1
 8002bf0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c20:	f021 010c 	bic.w	r1, r1, #12
 8002c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c2e:	430b      	orrs	r3, r1
 8002c30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c42:	6999      	ldr	r1, [r3, #24]
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	ea40 0301 	orr.w	r3, r0, r1
 8002c4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	4b8f      	ldr	r3, [pc, #572]	; (8002e94 <UART_SetConfig+0x2cc>)
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d005      	beq.n	8002c68 <UART_SetConfig+0xa0>
 8002c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	4b8d      	ldr	r3, [pc, #564]	; (8002e98 <UART_SetConfig+0x2d0>)
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d104      	bne.n	8002c72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c68:	f7ff fcbc 	bl	80025e4 <HAL_RCC_GetPCLK2Freq>
 8002c6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002c70:	e003      	b.n	8002c7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c72:	f7ff fca3 	bl	80025bc <HAL_RCC_GetPCLK1Freq>
 8002c76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c84:	f040 810c 	bne.w	8002ea0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002c96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002c9a:	4622      	mov	r2, r4
 8002c9c:	462b      	mov	r3, r5
 8002c9e:	1891      	adds	r1, r2, r2
 8002ca0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ca2:	415b      	adcs	r3, r3
 8002ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ca6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002caa:	4621      	mov	r1, r4
 8002cac:	eb12 0801 	adds.w	r8, r2, r1
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	eb43 0901 	adc.w	r9, r3, r1
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cca:	4690      	mov	r8, r2
 8002ccc:	4699      	mov	r9, r3
 8002cce:	4623      	mov	r3, r4
 8002cd0:	eb18 0303 	adds.w	r3, r8, r3
 8002cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002cd8:	462b      	mov	r3, r5
 8002cda:	eb49 0303 	adc.w	r3, r9, r3
 8002cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002cee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002cf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	18db      	adds	r3, r3, r3
 8002cfa:	653b      	str	r3, [r7, #80]	; 0x50
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	eb42 0303 	adc.w	r3, r2, r3
 8002d02:	657b      	str	r3, [r7, #84]	; 0x54
 8002d04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d0c:	f7fd fa62 	bl	80001d4 <__aeabi_uldivmod>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4b61      	ldr	r3, [pc, #388]	; (8002e9c <UART_SetConfig+0x2d4>)
 8002d16:	fba3 2302 	umull	r2, r3, r3, r2
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	011c      	lsls	r4, r3, #4
 8002d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d22:	2200      	movs	r2, #0
 8002d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d28:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d30:	4642      	mov	r2, r8
 8002d32:	464b      	mov	r3, r9
 8002d34:	1891      	adds	r1, r2, r2
 8002d36:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d38:	415b      	adcs	r3, r3
 8002d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d40:	4641      	mov	r1, r8
 8002d42:	eb12 0a01 	adds.w	sl, r2, r1
 8002d46:	4649      	mov	r1, r9
 8002d48:	eb43 0b01 	adc.w	fp, r3, r1
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d60:	4692      	mov	sl, r2
 8002d62:	469b      	mov	fp, r3
 8002d64:	4643      	mov	r3, r8
 8002d66:	eb1a 0303 	adds.w	r3, sl, r3
 8002d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d6e:	464b      	mov	r3, r9
 8002d70:	eb4b 0303 	adc.w	r3, fp, r3
 8002d74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d84:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	18db      	adds	r3, r3, r3
 8002d90:	643b      	str	r3, [r7, #64]	; 0x40
 8002d92:	4613      	mov	r3, r2
 8002d94:	eb42 0303 	adc.w	r3, r2, r3
 8002d98:	647b      	str	r3, [r7, #68]	; 0x44
 8002d9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002d9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002da2:	f7fd fa17 	bl	80001d4 <__aeabi_uldivmod>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	4611      	mov	r1, r2
 8002dac:	4b3b      	ldr	r3, [pc, #236]	; (8002e9c <UART_SetConfig+0x2d4>)
 8002dae:	fba3 2301 	umull	r2, r3, r3, r1
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	2264      	movs	r2, #100	; 0x64
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	1acb      	subs	r3, r1, r3
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002dc2:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <UART_SetConfig+0x2d4>)
 8002dc4:	fba3 2302 	umull	r2, r3, r3, r2
 8002dc8:	095b      	lsrs	r3, r3, #5
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dd0:	441c      	add	r4, r3
 8002dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ddc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002de0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002de4:	4642      	mov	r2, r8
 8002de6:	464b      	mov	r3, r9
 8002de8:	1891      	adds	r1, r2, r2
 8002dea:	63b9      	str	r1, [r7, #56]	; 0x38
 8002dec:	415b      	adcs	r3, r3
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002df4:	4641      	mov	r1, r8
 8002df6:	1851      	adds	r1, r2, r1
 8002df8:	6339      	str	r1, [r7, #48]	; 0x30
 8002dfa:	4649      	mov	r1, r9
 8002dfc:	414b      	adcs	r3, r1
 8002dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e0c:	4659      	mov	r1, fp
 8002e0e:	00cb      	lsls	r3, r1, #3
 8002e10:	4651      	mov	r1, sl
 8002e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e16:	4651      	mov	r1, sl
 8002e18:	00ca      	lsls	r2, r1, #3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4642      	mov	r2, r8
 8002e22:	189b      	adds	r3, r3, r2
 8002e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e28:	464b      	mov	r3, r9
 8002e2a:	460a      	mov	r2, r1
 8002e2c:	eb42 0303 	adc.w	r3, r2, r3
 8002e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e40:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e48:	460b      	mov	r3, r1
 8002e4a:	18db      	adds	r3, r3, r3
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4e:	4613      	mov	r3, r2
 8002e50:	eb42 0303 	adc.w	r3, r2, r3
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e5e:	f7fd f9b9 	bl	80001d4 <__aeabi_uldivmod>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4b0d      	ldr	r3, [pc, #52]	; (8002e9c <UART_SetConfig+0x2d4>)
 8002e68:	fba3 1302 	umull	r1, r3, r3, r2
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	2164      	movs	r1, #100	; 0x64
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	3332      	adds	r3, #50	; 0x32
 8002e7a:	4a08      	ldr	r2, [pc, #32]	; (8002e9c <UART_SetConfig+0x2d4>)
 8002e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e80:	095b      	lsrs	r3, r3, #5
 8002e82:	f003 0207 	and.w	r2, r3, #7
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4422      	add	r2, r4
 8002e8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e90:	e106      	b.n	80030a0 <UART_SetConfig+0x4d8>
 8002e92:	bf00      	nop
 8002e94:	40011000 	.word	0x40011000
 8002e98:	40011400 	.word	0x40011400
 8002e9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ea0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002eaa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002eae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002eb2:	4642      	mov	r2, r8
 8002eb4:	464b      	mov	r3, r9
 8002eb6:	1891      	adds	r1, r2, r2
 8002eb8:	6239      	str	r1, [r7, #32]
 8002eba:	415b      	adcs	r3, r3
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ec2:	4641      	mov	r1, r8
 8002ec4:	1854      	adds	r4, r2, r1
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	eb43 0501 	adc.w	r5, r3, r1
 8002ecc:	f04f 0200 	mov.w	r2, #0
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	00eb      	lsls	r3, r5, #3
 8002ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eda:	00e2      	lsls	r2, r4, #3
 8002edc:	4614      	mov	r4, r2
 8002ede:	461d      	mov	r5, r3
 8002ee0:	4643      	mov	r3, r8
 8002ee2:	18e3      	adds	r3, r4, r3
 8002ee4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ee8:	464b      	mov	r3, r9
 8002eea:	eb45 0303 	adc.w	r3, r5, r3
 8002eee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002efe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	f04f 0300 	mov.w	r3, #0
 8002f0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f0e:	4629      	mov	r1, r5
 8002f10:	008b      	lsls	r3, r1, #2
 8002f12:	4621      	mov	r1, r4
 8002f14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f18:	4621      	mov	r1, r4
 8002f1a:	008a      	lsls	r2, r1, #2
 8002f1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f20:	f7fd f958 	bl	80001d4 <__aeabi_uldivmod>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4b60      	ldr	r3, [pc, #384]	; (80030ac <UART_SetConfig+0x4e4>)
 8002f2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	011c      	lsls	r4, r3, #4
 8002f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f36:	2200      	movs	r2, #0
 8002f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f44:	4642      	mov	r2, r8
 8002f46:	464b      	mov	r3, r9
 8002f48:	1891      	adds	r1, r2, r2
 8002f4a:	61b9      	str	r1, [r7, #24]
 8002f4c:	415b      	adcs	r3, r3
 8002f4e:	61fb      	str	r3, [r7, #28]
 8002f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f54:	4641      	mov	r1, r8
 8002f56:	1851      	adds	r1, r2, r1
 8002f58:	6139      	str	r1, [r7, #16]
 8002f5a:	4649      	mov	r1, r9
 8002f5c:	414b      	adcs	r3, r1
 8002f5e:	617b      	str	r3, [r7, #20]
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f6c:	4659      	mov	r1, fp
 8002f6e:	00cb      	lsls	r3, r1, #3
 8002f70:	4651      	mov	r1, sl
 8002f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f76:	4651      	mov	r1, sl
 8002f78:	00ca      	lsls	r2, r1, #3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4603      	mov	r3, r0
 8002f80:	4642      	mov	r2, r8
 8002f82:	189b      	adds	r3, r3, r2
 8002f84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002f88:	464b      	mov	r3, r9
 8002f8a:	460a      	mov	r2, r1
 8002f8c:	eb42 0303 	adc.w	r3, r2, r3
 8002f90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fac:	4649      	mov	r1, r9
 8002fae:	008b      	lsls	r3, r1, #2
 8002fb0:	4641      	mov	r1, r8
 8002fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fb6:	4641      	mov	r1, r8
 8002fb8:	008a      	lsls	r2, r1, #2
 8002fba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002fbe:	f7fd f909 	bl	80001d4 <__aeabi_uldivmod>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4b38      	ldr	r3, [pc, #224]	; (80030ac <UART_SetConfig+0x4e4>)
 8002fca:	fba3 2301 	umull	r2, r3, r3, r1
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	2264      	movs	r2, #100	; 0x64
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	1acb      	subs	r3, r1, r3
 8002fd8:	011b      	lsls	r3, r3, #4
 8002fda:	3332      	adds	r3, #50	; 0x32
 8002fdc:	4a33      	ldr	r2, [pc, #204]	; (80030ac <UART_SetConfig+0x4e4>)
 8002fde:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002fe8:	441c      	add	r4, r3
 8002fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fee:	2200      	movs	r2, #0
 8002ff0:	673b      	str	r3, [r7, #112]	; 0x70
 8002ff2:	677a      	str	r2, [r7, #116]	; 0x74
 8002ff4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ff8:	4642      	mov	r2, r8
 8002ffa:	464b      	mov	r3, r9
 8002ffc:	1891      	adds	r1, r2, r2
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	415b      	adcs	r3, r3
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003008:	4641      	mov	r1, r8
 800300a:	1851      	adds	r1, r2, r1
 800300c:	6039      	str	r1, [r7, #0]
 800300e:	4649      	mov	r1, r9
 8003010:	414b      	adcs	r3, r1
 8003012:	607b      	str	r3, [r7, #4]
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003020:	4659      	mov	r1, fp
 8003022:	00cb      	lsls	r3, r1, #3
 8003024:	4651      	mov	r1, sl
 8003026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800302a:	4651      	mov	r1, sl
 800302c:	00ca      	lsls	r2, r1, #3
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	4603      	mov	r3, r0
 8003034:	4642      	mov	r2, r8
 8003036:	189b      	adds	r3, r3, r2
 8003038:	66bb      	str	r3, [r7, #104]	; 0x68
 800303a:	464b      	mov	r3, r9
 800303c:	460a      	mov	r2, r1
 800303e:	eb42 0303 	adc.w	r3, r2, r3
 8003042:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	663b      	str	r3, [r7, #96]	; 0x60
 800304e:	667a      	str	r2, [r7, #100]	; 0x64
 8003050:	f04f 0200 	mov.w	r2, #0
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800305c:	4649      	mov	r1, r9
 800305e:	008b      	lsls	r3, r1, #2
 8003060:	4641      	mov	r1, r8
 8003062:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003066:	4641      	mov	r1, r8
 8003068:	008a      	lsls	r2, r1, #2
 800306a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800306e:	f7fd f8b1 	bl	80001d4 <__aeabi_uldivmod>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <UART_SetConfig+0x4e4>)
 8003078:	fba3 1302 	umull	r1, r3, r3, r2
 800307c:	095b      	lsrs	r3, r3, #5
 800307e:	2164      	movs	r1, #100	; 0x64
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	3332      	adds	r3, #50	; 0x32
 800308a:	4a08      	ldr	r2, [pc, #32]	; (80030ac <UART_SetConfig+0x4e4>)
 800308c:	fba2 2303 	umull	r2, r3, r2, r3
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	f003 020f 	and.w	r2, r3, #15
 8003096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4422      	add	r2, r4
 800309e:	609a      	str	r2, [r3, #8]
}
 80030a0:	bf00      	nop
 80030a2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030a6:	46bd      	mov	sp, r7
 80030a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ac:	51eb851f 	.word	0x51eb851f

080030b0 <memset>:
 80030b0:	4402      	add	r2, r0
 80030b2:	4603      	mov	r3, r0
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d100      	bne.n	80030ba <memset+0xa>
 80030b8:	4770      	bx	lr
 80030ba:	f803 1b01 	strb.w	r1, [r3], #1
 80030be:	e7f9      	b.n	80030b4 <memset+0x4>

080030c0 <__libc_init_array>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	4d0d      	ldr	r5, [pc, #52]	; (80030f8 <__libc_init_array+0x38>)
 80030c4:	4c0d      	ldr	r4, [pc, #52]	; (80030fc <__libc_init_array+0x3c>)
 80030c6:	1b64      	subs	r4, r4, r5
 80030c8:	10a4      	asrs	r4, r4, #2
 80030ca:	2600      	movs	r6, #0
 80030cc:	42a6      	cmp	r6, r4
 80030ce:	d109      	bne.n	80030e4 <__libc_init_array+0x24>
 80030d0:	4d0b      	ldr	r5, [pc, #44]	; (8003100 <__libc_init_array+0x40>)
 80030d2:	4c0c      	ldr	r4, [pc, #48]	; (8003104 <__libc_init_array+0x44>)
 80030d4:	f000 f818 	bl	8003108 <_init>
 80030d8:	1b64      	subs	r4, r4, r5
 80030da:	10a4      	asrs	r4, r4, #2
 80030dc:	2600      	movs	r6, #0
 80030de:	42a6      	cmp	r6, r4
 80030e0:	d105      	bne.n	80030ee <__libc_init_array+0x2e>
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
 80030e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e8:	4798      	blx	r3
 80030ea:	3601      	adds	r6, #1
 80030ec:	e7ee      	b.n	80030cc <__libc_init_array+0xc>
 80030ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f2:	4798      	blx	r3
 80030f4:	3601      	adds	r6, #1
 80030f6:	e7f2      	b.n	80030de <__libc_init_array+0x1e>
 80030f8:	0800cc4c 	.word	0x0800cc4c
 80030fc:	0800cc4c 	.word	0x0800cc4c
 8003100:	0800cc4c 	.word	0x0800cc4c
 8003104:	0800cc50 	.word	0x0800cc50

08003108 <_init>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr

08003114 <_fini>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	bf00      	nop
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr
